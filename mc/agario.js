(function (console, $hx_exports, $global) { "use strict";
$hx_exports.promhx = $hx_exports.promhx || {};
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("core-assets/Close.png");
	types.push("IMAGE");
	urls.push("core-assets/Close_disabled.png");
	types.push("IMAGE");
	urls.push("core-assets/oaktree.png");
	types.push("IMAGE");
	urls.push("atlas/main_shop.png");
	types.push("IMAGE");
	urls.push("atlas/main_shop.xml");
	types.push("TEXT");
	urls.push("img/arrow.png");
	types.push("IMAGE");
	urls.push("img/back_button.png");
	types.push("IMAGE");
	urls.push("img/Close.png");
	types.push("IMAGE");
	urls.push("img/Close_disabled.png");
	types.push("IMAGE");
	urls.push("img/Close_disabled_old.png");
	types.push("IMAGE");
	urls.push("img/Close_old.png");
	types.push("IMAGE");
	urls.push("img/currency_icon.png");
	types.push("IMAGE");
	urls.push("img/Exp_Star.png");
	types.push("IMAGE");
	urls.push("img/Facebook_Share_BTN.png");
	types.push("IMAGE");
	urls.push("img/Facebook_Symbol.png");
	types.push("IMAGE");
	urls.push("img/fast_play.png");
	types.push("IMAGE");
	urls.push("img/FB_Arrow.png");
	types.push("IMAGE");
	urls.push("img/giant_coin.png");
	types.push("IMAGE");
	urls.push("img/hint.png");
	types.push("IMAGE");
	urls.push("img/incentive_android+iphone.png");
	types.push("IMAGE");
	urls.push("img/incentive_android.png");
	types.push("IMAGE");
	urls.push("img/incentive_android_button.png");
	types.push("IMAGE");
	urls.push("img/incentive_iphone_button.png");
	types.push("IMAGE");
	urls.push("img/Login_Play.png");
	types.push("IMAGE");
	urls.push("img/massboost_2x_shop.png");
	types.push("IMAGE");
	urls.push("img/massboost_3x_shop.png");
	types.push("IMAGE");
	urls.push("img/multiplier_stamp.png");
	types.push("IMAGE");
	urls.push("img/not_for_guests.png");
	types.push("IMAGE");
	urls.push("img/play.png");
	types.push("IMAGE");
	urls.push("img/profilepic_guest.png");
	types.push("IMAGE");
	urls.push("img/sticker.png");
	types.push("IMAGE");
	urls.push("img/Twitter_Share_BTN.png");
	types.push("IMAGE");
	urls.push("img/xpboost_2x_shop.png");
	types.push("IMAGE");
	urls.push("img/xpboost_3x_shop.png");
	types.push("IMAGE");
	urls.push("particle/LevelUpSlotBar-ipadhd.plist");
	types.push("TEXT");
	urls.push("particle/LevelUpSlotBarParticle.png");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "1", company : "Miniclip", file : "agario", fps : 60, name : "Agario", orientation : "", packageName : "agario", version : "1.1.2", windows : [{ antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : false, height : 1024, parameters : "{}", resizable : true, stencilBuffer : true, title : "Agario", vsync : false, width : 1280, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	__dispatching: null
	,__targetDispatcher: null
	,__eventMap: null
	,__newEventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		if(this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list;
		if(this.__dispatching.get(type) == true) {
			list = this.__newEventMap.get(type);
			if(list == null) return false;
			list = list.slice();
		} else {
			list = this.__eventMap.get(type);
			if(list == null) return false;
			this.__dispatching.set(type,true);
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmapSmooth = true;
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmapBounds: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,shader: null
	,stage: null
	,__renderTransform: null
	,__worldColorTransform: null
	,__worldOffset: null
	,__worldTransform: null
	,__alpha: null
	,__blendMode: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__objectTransform: null
	,__offset: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__shader: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheAsBitmapSmooth: null
	,__forceCacheAsBitmap: null
	,__updateCachedBitmap: null
	,__cachedBitmap: null
	,__cachedBitmapBounds: null
	,__cachedFilterBounds: null
	,__cacheGLMatrix: null
	,__updateFilters: null
	,__canvas: null
	,__context: null
	,__style: null
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getWorldTransform().__transformInversePoint(pos);
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getWorldTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getWorldTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) return true;
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__drawGraphicsGL: function(renderSession) {
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__preRenderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
	}
	,__postRenderGL: function(renderSession) {
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__cacheGL: function(renderSession) {
		var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
		var x = this.__cachedBitmapBounds.x;
		var y = this.__cachedBitmapBounds.y;
		var w = this.__cachedBitmapBounds.width;
		var h = this.__cachedBitmapBounds.height;
		if(this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
		if(hasCacheMatrix) {
			var bmpBounds = openfl_geom_Rectangle.__temp;
			this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
			x = bmpBounds.x;
			y = bmpBounds.y;
			w = bmpBounds.width;
			h = bmpBounds.height;
			this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
		} else this.__cacheGLMatrix.identity();
		if(w <= 0 && h <= 0) throw new js__$Boot_HaxeError("Error creating a cached bitmap. The texture size is " + w + "x" + h);
		if(this.__updateCachedBitmap || this.__updateFilters) {
			if(this.__cachedFilterBounds != null) {
				w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
				h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
			}
			if(this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
			this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
			var m = this.__cacheGLMatrix.clone();
			m.translate(-x,-y);
			var shader = this.__shader;
			this.__shader = null;
			this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
			this.__shader = shader;
			this.__updateCachedBitmap = false;
		}
		if(this.__updateFilters) {
			openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
			this.__updateFilters = false;
		}
		this.__cacheGLMatrix.invert();
		this.__cacheGLMatrix.__translateTransformed(x,y);
		this.__cacheGLMatrix.concat(this.__renderTransform);
		this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
		renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) this.stage.set_focus(null);
				this.dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			}
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) this.__maskCached = false;
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				if(this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds); else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == 10) this.__blendMode = this.parent.__blendMode;
				if(this.shader == null) this.__shader = this.parent.__shader;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = overrideTransform.clone(); else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else this.__offset.setTo(0,0);
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,set_shader: function(value) {
		this.__shader = value;
		return this.shader = value;
	}
	,get_cacheAsBitmap: function() {
		return this.__cacheAsBitmap;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__forceCacheAsBitmap?this.__cacheAsBitmap = true:this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_cacheAsBitmapSmooth: function() {
		return this.__cacheAsBitmapSmooth;
	}
	,set_cacheAsBitmapSmooth: function(value) {
		return this.__cacheAsBitmapSmooth = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapSmooth:"set_cacheAsBitmapSmooth",get_cacheAsBitmapSmooth:"get_cacheAsBitmapSmooth",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCanceled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCanceled) return true;
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.__dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			this.stage = stage;
			if(stage != null) this.__dispatchEvent(new openfl_events_Event("addedToStage",false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled && this.hitArea.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				stack[stack.length - 1] = hitObject;
				return true;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var oaktree_core_Engine = function(pFPS) {
	if(pFPS == null) pFPS = 30;
	openfl_display_Sprite.call(this);
	oaktree_OakTree.init();
	this._targetFPS = pFPS;
	this._frameCount = 0;
	this._currentTimeMS = 0;
	this._lastTimeMS = 0;
	this._deltaTimeMS = 0;
	this._currentDate = new Date();
	this._creationTime = openfl_Lib.getTimer();
	this.entities = new oaktree_core_EntityManager();
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["oaktree.core.Engine"] = oaktree_core_Engine;
oaktree_core_Engine.__name__ = ["oaktree","core","Engine"];
oaktree_core_Engine.__super__ = openfl_display_Sprite;
oaktree_core_Engine.prototype = $extend(openfl_display_Sprite.prototype,{
	states: null
	,scenes: null
	,entities: null
	,baseContainer: null
	,_targetFPS: null
	,_frameCount: null
	,_currentDate: null
	,_creationTime: null
	,_timeStepS: null
	,_timeStepMS: null
	,_currentTimeMS: null
	,_lastTimeMS: null
	,_deltaTimeMS: null
	,onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		oaktree_OakTree.onEngineAddedToStage(this,this.stage);
		this.states = new oaktree_utils_States({ name : "MainStateStack"});
		this.states.createOnGet = true;
		this.baseContainer = new openfl_display_Sprite();
		this.addChild(this.baseContainer);
		this.scenes = new oaktree_core_scene_SceneManager(this.baseContainer);
		this._timeStepMS = 1000 / this._targetFPS;
		this._timeStepS = this._timeStepMS / 1000;
		this._lastTimeMS = this._currentTimeMS = openfl_Lib.getTimer();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.initialize();
	}
	,onEnterFrame: function(event) {
		var logicTime;
		this._currentTimeMS = openfl_Lib.getTimer();
		this._deltaTimeMS = this._currentTimeMS - this._lastTimeMS;
		if(this._deltaTimeMS >= this._timeStepMS) {
			this._deltaTimeMS -= this._timeStepMS;
			logicTime = openfl_Lib.getTimer();
			this.entities.update(this._timeStepS);
			this.scenes.update(this._timeStepS);
			this._lastTimeMS = this._currentTimeMS;
		}
		this._frameCount++;
		this.scenes.lateUpdate();
	}
	,initialize: function() {
	}
	,setStartDate: function(pDate) {
		if(pDate != null) this._currentDate = pDate;
	}
	,time: null
	,get_time: function() {
		return this._currentDate.getTime() + (openfl_Lib.getTimer() - this._creationTime);
	}
	,__class__: oaktree_core_Engine
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_time:"get_time"})
});
var Main = function() {
	oaktree_core_Engine.call(this,30);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.instance = null;
Main.__super__ = oaktree_core_Engine;
Main.prototype = $extend(oaktree_core_Engine.prototype,{
	shopDialog: null
	,initialize: function() {
		var _g = this;
		Core.init(this.stage);
		Core.onReady.addOnce(function() {
			_g.initializeDebugging();
		});
		this.resize(this.stage.stageWidth,this.stage.stageHeight);
	}
	,initializeDebugging: function() {
		var _g = this;
		oaktree_debug_MetricsManager.initialize();
		var debugContainer = new openfl_display_Sprite();
		this.addChild(debugContainer);
		oaktree_debug_DebugManager.initialize(debugContainer);
		var debugPanel = new oaktree_debug_ui_DebugPanel();
		this.addChild(debugPanel);
		debugPanel.addTab("Metrics",new oaktree_debug_metrics_MetricsPanel());
		var btn = new agario_views_controls_CloseButton();
		this.addChild(btn);
		btn.addEventListener("click",function(e) {
			var profile = new agario_module_user_view_ProfileDialog();
			Core.views.openView(profile,{ animate : true, allowClickClose : false});
		});
		var coinsButton = new agario_views_controls_FlatButton({ labelUp : { text : "Coins Shop"}, width : 130, height : 35});
		this.addChild(coinsButton);
		coinsButton.set_x(btn.get_x() + btn.get_width() + 10);
		coinsButton.set_y(55);
		coinsButton.addEventListener("click",function(e1) {
			_g.shopDialog = new agario_views_ShopDialog();
			_g.shopDialog.openCategory("shopCurrency");
			Core.views.openView(_g.shopDialog,{ animate : true, allowClickClose : false});
			oaktree_OakTree.events.fire("echo","hello world");
		});
		var loginButton = new agario_views_controls_FlatButton({ labelUp : { text : "login"}, width : 130, height : 35});
		this.addChild(loginButton);
		loginButton.set_x(this.stage.stageWidth - loginButton.get_width() - 5);
		loginButton.set_y(55);
		loginButton.addEventListener("click",function(e2) {
			var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
			authModel.set_authToken("CAAJoMBwWJiMBAGatCsZA6pGx1OYfv1G0ZAHPU1qhyPtjfXSx1sVBCkuO8YRCPAlRpZC0ZBlawTgkITkRVQ7jCiMDLV8JbFY6L9YHZAZCZCUFMxYVtYpdZAc1bdqUOZBcMOmEdakLxTN5lIYDIFdwfg3QLF6bQudnuZAwWMf6wpVGRnFwv9JWcZCM8nwCA0ZB3lTVRlbzmsm7QeijMlln8WG520rm");
			authModel.login();
			var dv = new agario_views_DebugView();
			Core.views.openView(dv,{ animate : true, allowClickClose : false});
		});
		var icon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
		var shareButton = new agario_views_controls_ColorButton({ color : 3625371, overColor : 3625371, text : "Share", textColorOver : 16777215, textColor : 16777215, icon : icon, iconPosition : "left", iconPadding : 0, w : 135, h : 35, fontSize : 14, bold : true});
		this.addChild(shareButton);
		shareButton.set_x(this.stage.stageWidth - loginButton.get_width() - 135);
		shareButton.set_y(55);
		shareButton.addEventListener("click",function(e3) {
			Core.get_events().dispatchEventWith("ShopEvent::connectionLost");
		});
	}
	,resize: function(newWidth,newHeight) {
		Core.views.onResize(newWidth,newHeight);
	}
	,onStageResize: function(e) {
		this.resize(this.stage.stageWidth,this.stage.stageHeight);
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) valueClasses = [];
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = ["msignal","Signal"];
msignal_Signal.prototype = {
	valueClasses: null
	,numListeners: null
	,slots: null
	,priorityBased: null
	,add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) priority = 0;
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) priority = 0;
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) return null;
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) this.priorityBased = true;
			if(!this.priorityBased && priority == 0) this.slots = this.slots.prepend(newSlot); else this.slots = this.slots.insertWithPriority(newSlot);
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) return true;
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) return true;
		if(existingSlot.once != once) throw new js__$Boot_HaxeError("You cannot addOnce() then add() the same listener without removing the relationship first.");
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
	,__properties__: {get_numListeners:"get_numListeners"}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = ["msignal","Signal0"];
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		if(msignal_SlotList.NIL != null) throw new js__$Boot_HaxeError("Parameters head and tail are null. Use the NIL element instead.");
		this.nonEmpty = false;
	} else if(head == null) throw new js__$Boot_HaxeError("Parameter head cannot be null."); else {
		this.head = head;
		if(tail == null) this.tail = msignal_SlotList.NIL; else this.tail = tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = ["msignal","SlotList"];
msignal_SlotList.NIL = null;
msignal_SlotList.prototype = {
	head: null
	,tail: null
	,nonEmpty: null
	,length: null
	,get_length: function() {
		if(!this.nonEmpty) return 0;
		if(this.tail == msignal_SlotList.NIL) return 1;
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) return this;
		if(!this.nonEmpty) return new msignal_SlotList(slot);
		if(this.tail == msignal_SlotList.NIL) return new msignal_SlotList(slot).prepend(this.head);
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) return new msignal_SlotList(slot);
		var priority = slot.priority;
		if(priority >= this.head.priority) return this.prepend(slot);
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) return this;
		if(Reflect.compareMethods(this.head.listener,listener)) return this.tail;
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) return false;
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) return true;
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) return null;
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) return p.head;
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
	,__properties__: {get_length:"get_length"}
};
var Core = function() { };
$hxClasses["Core"] = Core;
Core.__name__ = ["Core"];
Core.__properties__ = {get_fontName:"get_fontName",get_assets:"get_assets",get_states:"get_states",get_events:"get_events",get_height:"get_height",get_width:"get_width"}
Core.stage = null;
Core.width = null;
Core.height = null;
Core.events = null;
Core.environment = null;
Core.ui = null;
Core.services = null;
Core.views = null;
Core.models = null;
Core.remoteAssets = null;
Core.user = null;
Core.states = null;
Core._assets = null;
Core.assets = null;
Core.fontName = null;
Core.fontFile = null;
Core.init = function(_stage) {
	haxe_Log.trace("     d / core / " + "Core init!",{ fileName : "Core.hx", lineNumber : 56, className : "Core", methodName : "init"});
	Core.stage = _stage;
	oaktree_OakTree.commands.initialize(agario_config_CommandMap.list);
	Core.environment = new agario_services_EnvironmentService();
	Core.environment.initialize();
	Core.get_states().enable("state_main_screen");
	oaktree_ext_services_ServiceManager.initialize(agario_config_Services.getModelList());
	Core.ui = new agario_module_dom_JSUIManager();
	Core._assets = new oaktree_display_AssetsManager(agario_config_Assets.INGAME_ATLAS);
	Core.services = new agario_services_ServicesManager();
	Core.views = new agario_views_ViewManager();
	Core.models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
	Core.remoteAssets = new oaktree_display_RemoteAssetLibrary();
	Core.user = new agario_module_shop_models_GameUser("","");
	Core.get_assets().onInit.addOnce(Core.checkIfReady);
	Core.models.onConfigurationLoaded.addOnce(function() {
		Core.initialized = true;
		agario_models_VersionModel.CONFIG_NUMBER = agario_services_ConfigurationService.configID;
		agario_models_VersionModel.updateTag();
		window.checkLoginStatus();
		Core.onReady.dispatch();
	});
	Core.checkIfReady();
};
Core.checkIfReady = function() {
	var assetsInitialized = Core._assets.get_initialized();
	if(!assetsInitialized) return;
	Core.onReady.dispatch();
};
Core.get_width = function() {
	return Core.stage.stageWidth;
};
Core.get_height = function() {
	return Core.stage.stageHeight;
};
Core.resetStageFocus = function() {
	openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
};
Core.get_assets = function() {
	return Core._assets;
};
Core.get_fontName = function() {
	return "_sans";
};
Core.get_events = function() {
	return oaktree_OakTree.events;
};
Core.get_states = function() {
	return oaktree_OakTree.engine.states;
};
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	onChange: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.getString(0,bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _g = this;
		return new lime_app_Future(function() {
			return _g;
		});
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.getString(0,bytes.length);
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "core-assets/Close.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "core-assets/Close_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "core-assets/oaktree.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "atlas/main_shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "atlas/main_shop.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "img/arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/back_button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Close.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Close_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Close_disabled_old.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Close_old.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/currency_icon.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Exp_Star.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Facebook_Share_BTN.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Facebook_Symbol.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/fast_play.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/FB_Arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/giant_coin.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/hint.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/incentive_android+iphone.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/incentive_android.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/incentive_android_button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/incentive_iphone_button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Login_Play.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/massboost_2x_shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/massboost_3x_shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/multiplier_stamp.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/not_for_guests.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/play.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/profilepic_guest.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/sticker.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/Twitter_Share_BTN.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/xpboost_2x_shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/xpboost_3x_shop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "particle/LevelUpSlotBar-ipadhd.plist";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "particle/LevelUpSlotBarParticle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes; else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var bytes = loader.bytes;
		if(bytes != null) return bytes.getString(0,bytes.length); else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			promise.completeWith(request.load(this.path.get(id) + "?" + lime_Assets.cache.version));
		} else promise.complete(this.getBytes(id));
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			image.src = this.path.get(id) + "?" + lime_Assets.cache.version;
		} else promise.complete(this.getImage(id));
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var request = new lime_net_HTTPRequest();
			var future = request.load(this.path.get(id) + "?" + lime_Assets.cache.version);
			future.onProgress(function(progress) {
				promise.progress(progress);
			});
			future.onError(function(msg) {
				promise.error(msg);
			});
			future.onComplete(function(bytes) {
				promise.complete(bytes.getString(0,bytes.length));
			});
		} else promise.complete(this.getText(id));
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.exists = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) return true;
	}
	return false;
};
Lambda.fold = function(it,f,first) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		first = f(x,first);
	}
	return first;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,last: function() {
		if(this.q == null) return null; else return this.q[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,val: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var MiniclipAPI = $hx_exports.MiniclipAPI = function(_container,overlayTarget) {
	if(overlayTarget == null) overlayTarget = "";
	this._inGame = false;
	this.coreWasLoaded = false;
	this.gamepadSupportActive = false;
	MiniclipAPI.instance = this;
	this.overlay = overlayTarget;
	this.container = _container;
	Core.onReady.addOnce($bind(this,this.dispatchOnReady));
};
$hxClasses["MiniclipAPI"] = MiniclipAPI;
MiniclipAPI.__name__ = ["MiniclipAPI"];
MiniclipAPI.instance = null;
MiniclipAPI.prototype = {
	onReady: null
	,container: null
	,overlay: null
	,shopDialog: null
	,gamepadSupportActive: null
	,coreWasLoaded: null
	,_inGame: null
	,serverVersion: null
	,_server: null
	,dispatchOnReady: function() {
		if(this.onReady != null) this.onReady();
		this.setInGameState(this._inGame);
	}
	,loadEnvironment: function(obj) {
		var fields = Reflect.fields(obj);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			agario_config_Configs.setProperty(field,Reflect.getProperty(obj,field));
		}
	}
	,openShop: function(target,data) {
		if(target == null) target = "";
		if(Core.services.shop.isOpen) return;
		Core.services.shop.isOpen = true;
		if(!Core.initialized) return null;
		Core.services.gameui.showContainer();
		this.shopDialog = new agario_views_ShopDialog();
		this.shopDialog.openCategory(target,true,data);
		this.shopDialog.addEventListener("close",$bind(this,this.onShopClose));
		Core.views.openView(this.shopDialog,{ animate : true, allowClickClose : false});
	}
	,onShopClose: function(e) {
		Core.services.shop.isOpen = false;
		Core.services.gameui.hideContainer();
	}
	,retryConnection: function() {
		var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
		authModel.login();
		Core.services.gameui.disableShop();
	}
	,onVideoClose: function() {
		Core.views.enableViews();
		Core.get_states().disable("state_video_window");
	}
	,checkVideoAds: function() {
		Core.get_events().dispatchEventWith("ShopEvent::checkVideos");
	}
	,showProfile: function() {
		if(Core.views == null) return;
		var _server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		if(_server != null && !_server.isConnected()) return;
		Core.services.gameui.showContainer();
		if(Core.user != null && Core.user.isGuest || Core.user.isConnecting) Core.get_events().fire("ShopEvent::show_guest_conversion"); else {
			var profile = new agario_module_user_view_ProfileDialog();
			Core.views.openView(profile,{ animate : true, allowClickClose : true});
			profile.addEventListener("close",$bind(this,this.onShopClose));
		}
	}
	,showLevelUp: function(deltaCoins,previousLevel,currentLevel) {
		Core.services.gameui.showContainer();
		var lvlUpDialog = new agario_module_user_view_LevelUpDialog(deltaCoins,previousLevel,currentLevel);
		Core.views.openView(lvlUpDialog,{ animate : true, allowClickClose : true});
		lvlUpDialog.addEventListener("close",$bind(this,this.onShopClose));
	}
	,showGuestView: function() {
		Core.services.gameui.showContainer();
		Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion");
	}
	,showFreeCoins: function() {
		var _g = this;
		if(Core.get_states().isEnabled("state_free_coins_dialog")) return;
		if(Core.environment.get_isInFacebook() && Core.get_states().isEnabled("stateFreeCoinsCollect")) return;
		Core.services.gameui.showContainer();
		if(Core.user.userInfo == null) {
			Core.get_events().dispatchEventWith("ShopEvent::show_guest_conversion");
			return;
		}
		if(Core.environment.platform == agario_services_WebPlatform.Facebook) {
			var freeCoinTime = Core.user.freeCoinTimeLeft();
			agario_views_FreeCoinsDialog.openCollectDialog(freeCoinTime == 0,function() {
				_g.onShopClose(null);
			},false);
			agario_views_FreeCoinsDialog.triggerFreeCoins();
		} else {
			var freeCoinsDialog = new agario_views_FreeCoinsDialog();
			Core.views.openView(freeCoinsDialog,{ animate : true, allowClickClose : false});
			freeCoinsDialog.addEventListener("close",$bind(this,this.onShopClose));
		}
	}
	,showGifting: function() {
		Core.get_events().dispatchEventWith("shop_event::showGiftUnavailable");
	}
	,isUserLoggedIn: function() {
		if(Core.user.userInfo == null) return false; else return true;
	}
	,overlayClick: function() {
		Core.get_events().dispatchEventWith("deactivate");
	}
	,isShopAvailable: function() {
		if(!Core.initialized) return false;
		return Core.services.shop.isShopAvailable;
	}
	,isConnecting: function() {
		if(!Core.initialized) return true;
		return Core.user.isConnecting;
	}
	,doLoginWithFB: function(token,usedCache) {
		if(usedCache == null) usedCache = false;
		var _g = this;
		if(Core.initialized) {
			Core.environment.authenticationProvider = agario_services_WebAuthProvider.Facebook;
			this.performLogin(token,usedCache);
		} else Core.onReady.addOnce(function() {
			_g.doLoginWithFB(token,usedCache);
		});
	}
	,doLoginWithGPlus: function(token,usedCache) {
		if(usedCache == null) usedCache = false;
		var _g = this;
		if(Core.initialized) {
			Core.environment.authenticationProvider = agario_services_WebAuthProvider.Google;
			this.performLogin(token,usedCache);
		} else Core.onReady.addOnce(function() {
			_g.doLoginWithGPlus(token,usedCache);
		});
	}
	,performLogin: function(token,usedCache) {
		if(usedCache == null) usedCache = false;
		var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
		if(authModel.get_loggedIn()) return;
		authModel.set_authToken(token);
		authModel.login();
		Core.user.isConnecting = true;
		Core.services.gameui.disableShop();
	}
	,doLogout: function() {
		var authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
		authModel.logout();
		Core.services.gameui.hideContainer();
		Core.models.resetModels();
		Core.services.gameui.clearTimers();
		if(this.shopDialog != null) this.shopDialog.destroy();
		this.shopDialog = null;
		Core.services.gameui.setGuestInfo();
	}
	,closeTopView: function() {
		Core.views.closeTopView();
	}
	,connectionLost: function() {
		Core.get_events().dispatchEventWith("ShopEvent::connectionLost");
	}
	,performJS: function(type) {
		var fbService = new oaktree_ext_social_fb_FBService();
		if(type == 1) {
			var inviteObj = { title : "Try Agario!", message : "Please message", users : ["100010654115828"]};
			fbService.inviteFriends(inviteObj,$bind(this,this.onFriendInvited));
		}
		if(type == 2) {
			var appRequests = fbService.getAppRequests();
			if(appRequests != null) appRequests.then($bind(this,this.onAppRequests)).catchError($bind(this,this.onAppRequestError));
		}
	}
	,onAppRequestError: function(e) {
		haxe_Log.trace(e,{ fileName : "MiniclipAPI.hx", lineNumber : 303, className : "MiniclipAPI", methodName : "onAppRequestError"});
	}
	,onAppRequests: function(xpto) {
		haxe_Log.trace(haxe_format_JsonPrinter.print(xpto,null,null),{ fileName : "MiniclipAPI.hx", lineNumber : 309, className : "MiniclipAPI", methodName : "onAppRequests"});
		if(xpto.gifts.length > 0) haxe_Log.trace("We now show the popup!",{ fileName : "MiniclipAPI.hx", lineNumber : 314, className : "MiniclipAPI", methodName : "onAppRequests"});
	}
	,onFriendInvited: function(args) {
		haxe_Log.trace("Received response: " + haxe_format_JsonPrinter.print(args,null,null),{ fileName : "MiniclipAPI.hx", lineNumber : 320, className : "MiniclipAPI", methodName : "onFriendInvited"});
	}
	,setProfilePicture: function(url) {
		if(Core.user != null) Core.user.avatarUrl = url;
	}
	,setSocialId: function(id) {
		if(Core.user != null) Core.user.set_socialId(id);
	}
	,hideContainer: function() {
		Core.services.gameui.hideContainer();
	}
	,updateServerVersion: function(version) {
		agario_models_VersionModel.SERVER_VERSION = version;
		agario_models_VersionModel.updateTag();
	}
	,updateConfigurationID: function(configID) {
		haxe_Log.trace("[CONFIG] ID=" + configID,{ fileName : "MiniclipAPI.hx", lineNumber : 359, className : "MiniclipAPI", methodName : "updateConfigurationID"});
		agario_services_ConfigurationService.setConfigID(configID);
	}
	,getSkinInfo: function(pid) {
		if(!Core.initialized) return null;
		var skinID = pid;
		if(skinID == "skin_starball1") skinID = "skin_starball";
		var shopSkinItem = Core.models.shopSkinsModel.getItemById(skinID);
		if(shopSkinItem == null) return null;
		var returnObj = { url : shopSkinItem.gamePlayInfo.get_gamePlayImage(), color : shopSkinItem.gamePlayInfo.get_cellColor()};
		if(pid == "skin_starball1") returnObj.url = "Starball1.png";
		return returnObj;
	}
	,onOffwerwallClose: function() {
		Core.get_states().disable("state_offerwall_window");
	}
	,onMobileData: function(msg) {
		if(msg == null) return;
		var arrayBuf = msg.buffer.slice(msg.byteOffset,msg.byteOffset + msg.byteLength);
		var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(arrayBuf);
		if(this._server == null) this._server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		this._server.injectPacket(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,onAgarioCoreLoaded: function() {
		this.coreWasLoaded = true;
		if(Core.ui != null) Core.ui.initAgario();
	}
	,onPlayerDeath: function(foodEaten,highestMass,timeAlive,leaderboardTime,cellsEaten,topPosition) {
		Core.ui.state.inGame = false;
		Core.ui.state.isPlayerAlive = false;
		Core.ui.state.lastGameResults = { foodEaten : foodEaten, highestMass : highestMass, timeAlive : timeAlive, leaderboardTime : leaderboardTime, cellsEaten : cellsEaten, topPosition : topPosition};
		Core.ui.stats.onPlayerDeath();
	}
	,onPlayerSpawn: function() {
		Core.ui.state.isPlayerAlive = true;
		Core.ui.stats.onPlayerSpawn();
	}
	,activateGamepadSupport: function() {
		this.gamepadSupportActive = true;
	}
	,deactivateGamepadSupport: function() {
		this.gamepadSupportActive = false;
	}
	,onGamepadUpdate: function(callback) {
		var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
		gamepadController.gamepadAxisUpdate = callback;
	}
	,registerSplitFunction: function(callback) {
		var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
		gamepadController.sendMitosisCallback = callback;
	}
	,registerEjectFunction: function(callback) {
		var gamepadController = oaktree_ext_services_ServiceManager.getService(agario_services_GamepadControllerService);
		gamepadController.ejectMassCallback = callback;
	}
	,setInGameState: function(isInGame) {
		this._inGame = isInGame;
		if(!Core.initialized) return;
		haxe_Log.trace("Setting inGame: " + Std.string(this._inGame),{ fileName : "MiniclipAPI.hx", lineNumber : 466, className : "MiniclipAPI", methodName : "setInGameState"});
		if(this._inGame) Core.get_states().disable("state_main_screen"); else Core.get_states().enable("state_main_screen");
	}
	,onDisconnect: function() {
		Core.ui.onDisconnect();
	}
	,doLogin: function() {
		Core.ui.doLogin();
	}
	,showInstructionsPanel: function(pForce) {
		Core.ui.mainUI.showInstructionsPanel(pForce);
	}
	,findServer: function(region,gameMode) {
		Core.ui.network.findServer(region,gameMode);
	}
	,setGameMode: function(pMode,pReconnect) {
		if(pReconnect == null) pReconnect = true;
		Core.ui.mainUI.setGameMode(pMode,pReconnect);
	}
	,applyGameMode: function(pMode) {
		Core.ui.mainUI.applyGameMode(pMode);
	}
	,wasInitialized: function() {
		Core.ui.state.isInitialized = true;
	}
	,reconnect: function() {
		Core.ui.network.reconnect();
	}
	,getPartyToken: function() {
		return Core.ui.state.partyToken;
	}
	,setPartyToken: function(pToken) {
		Core.ui.state.partyToken = pToken;
	}
	,getRegion: function() {
		return Core.ui.state.region;
	}
	,setRegion: function(pRegion) {
		Core.ui.network.setRegion(pRegion);
	}
	,checkRegion: function() {
		Core.ui.network.checkRegion();
	}
	,refreshRegionInfo: function() {
		Core.ui.network.refreshRegionInfo();
	}
	,getLastGameStats: function() {
		return Core.ui.state.lastGameResults;
	}
	,showStatsDialog: function() {
		Core.ui.stats.showStatsDialog();
	}
	,isInGame: function() {
		return Core.ui.state.inGame;
	}
	,showNickDialog: function(time) {
		Core.ui.mainUI.showNickDialog(time);
	}
	,hideMetaUI: function() {
		Core.ui.mainUI.hideMetaUI();
	}
	,setNick: function(nick) {
		Core.ui.mainUI.setNick(nick);
	}
	,getLatestConfigurationID: function() {
		Core.ui.network.getLatestConfigurationId();
	}
	,setQuality: function(quality) {
		Core.ui.canvas.setQuality(quality);
	}
	,corePendingReload: function() {
		Core.ui.handleAgarioCoreReload();
	}
	,joinParty: function(code) {
		Core.ui.partyMode.joinParty(code);
	}
	,__class__: MiniclipAPI
};
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 1024;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 1280;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
Type.enumIndex = function(e) {
	return e[1];
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a >= b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.nodeName;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType);
		return this.nodeValue;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		return HxOverrides.iter(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && (function($this) {
				var $r;
				if(child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				$r = child.nodeName;
				return $r;
			}(this)) == name) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
	,__properties__: {get_nodeValue:"get_nodeValue",get_nodeName:"get_nodeName"}
};
var agario_atlas_MainShop = function() { };
$hxClasses["agario.atlas.MainShop"] = agario_atlas_MainShop;
agario_atlas_MainShop.__name__ = ["agario","atlas","MainShop"];
var agario_atlas_Menuscommonui = function() { };
$hxClasses["agario.atlas.Menuscommonui"] = agario_atlas_Menuscommonui;
agario_atlas_Menuscommonui.__name__ = ["agario","atlas","Menuscommonui"];
var agario_config_Assets = function() { };
$hxClasses["agario.config.Assets"] = agario_config_Assets;
agario_config_Assets.__name__ = ["agario","config","Assets"];
var oaktree_ext_commands_ICommand = function() { };
$hxClasses["oaktree.ext.commands.ICommand"] = oaktree_ext_commands_ICommand;
oaktree_ext_commands_ICommand.__name__ = ["oaktree","ext","commands","ICommand"];
oaktree_ext_commands_ICommand.prototype = {
	execute: null
	,__class__: oaktree_ext_commands_ICommand
};
var agario_config_EchoCommand = function() { };
$hxClasses["agario.config.EchoCommand"] = agario_config_EchoCommand;
agario_config_EchoCommand.__name__ = ["agario","config","EchoCommand"];
agario_config_EchoCommand.__interfaces__ = [oaktree_ext_commands_ICommand];
agario_config_EchoCommand.prototype = {
	execute: function(e) {
		haxe_Log.trace(e.data,{ fileName : "CommandMap.hx", lineNumber : 22, className : "agario.config.EchoCommand", methodName : "execute"});
	}
	,__class__: agario_config_EchoCommand
};
var oaktree_ext_commands_Command = function(eventName,command,oneTime) {
	if(oneTime == null) oneTime = false;
	this.event = eventName;
	this.command = command;
	this.oneTime = oneTime;
};
$hxClasses["oaktree.ext.commands.Command"] = oaktree_ext_commands_Command;
oaktree_ext_commands_Command.__name__ = ["oaktree","ext","commands","Command"];
oaktree_ext_commands_Command.prototype = {
	event: null
	,command: null
	,oneTime: null
	,__class__: oaktree_ext_commands_Command
};
var agario_config_CommandMap = function() { };
$hxClasses["agario.config.CommandMap"] = agario_config_CommandMap;
agario_config_CommandMap.__name__ = ["agario","config","CommandMap"];
var agario_config_Configs = function() { };
$hxClasses["agario.config.Configs"] = agario_config_Configs;
agario_config_Configs.__name__ = ["agario","config","Configs"];
agario_config_Configs.setProperty = function(field,value) {
	agario_config_Configs.properties.set(field,value);
};
agario_config_Configs.getProperty = function(field) {
	if(agario_config_Configs.properties.exists(field)) return agario_config_Configs.properties.get(field);
	return agario_config_Configs.NOT_FOUND;
};
var agario_config_GameStates = function() { };
$hxClasses["agario.config.GameStates"] = agario_config_GameStates;
agario_config_GameStates.__name__ = ["agario","config","GameStates"];
var agario_config_Services = function() { };
$hxClasses["agario.config.Services"] = agario_config_Services;
agario_config_Services.__name__ = ["agario","config","Services"];
agario_config_Services.getModelList = function() {
	var result = [new oaktree_ext_services_ServiceConfig(agario_services_ConfigurationService),new oaktree_ext_services_ServiceConfig(agario_services_GameServerService,{ }),new oaktree_ext_services_ServiceConfig(agario_game_server_GameConnectionService,{ maxReconnect : 5, retryTimeout : 5000}),new oaktree_ext_services_ServiceConfig(agario_security_AuthenticationService),new oaktree_ext_services_ServiceConfig(agario_services_ShopService),new oaktree_ext_services_ServiceConfig(agario_models_DataManager),new oaktree_ext_services_ServiceConfig(agario_services_ViewService),new oaktree_ext_services_ServiceConfig(agario_services_social_SocialService),new oaktree_ext_services_ServiceConfig(agario_services_social_FBSocialService),new oaktree_ext_services_ServiceConfig(agario_services_social_GoogleSocialService),new oaktree_ext_services_ServiceConfig(agario_services_social_TwitterSocialService),new oaktree_ext_services_ServiceConfig(agario_services_GamepadControllerService)];
	if(Core.environment.platform == agario_services_WebPlatform.Facebook) result.push(new oaktree_ext_services_ServiceConfig(agario_services_FBPaymentService,{ endpoint : agario_config_Configs.getProperty("fb_endpoint")})); else result.push(new oaktree_ext_services_ServiceConfig(agario_services_XsollaPaymentService,{ endpoint : agario_config_Configs.getProperty("xsolla_endpoint")}));
	return result;
};
var oaktree_ext_services_IService = function() { };
$hxClasses["oaktree.ext.services.IService"] = oaktree_ext_services_IService;
oaktree_ext_services_IService.__name__ = ["oaktree","ext","services","IService"];
oaktree_ext_services_IService.prototype = {
	create: null
	,initialize: null
	,__class__: oaktree_ext_services_IService
};
var agario_game_server_GameConnectionService = function() {
	this.gotDisconnectMsg = false;
	this.retryAttempt = 0;
	this.retryTimeout = 2500;
	this.maxReconnect = 5;
	openfl_events_EventDispatcher.call(this,this);
};
$hxClasses["agario.game.server.GameConnectionService"] = agario_game_server_GameConnectionService;
agario_game_server_GameConnectionService.__name__ = ["agario","game","server","GameConnectionService"];
agario_game_server_GameConnectionService.__interfaces__ = [oaktree_ext_services_IService];
agario_game_server_GameConnectionService.__super__ = openfl_events_EventDispatcher;
agario_game_server_GameConnectionService.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_serverModel: null
	,maxReconnect: null
	,retryTimeout: null
	,retryAttempt: null
	,gotDisconnectMsg: null
	,create: function() {
	}
	,initialize: function() {
		this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
		this._serverModel.register(20,$bind(this,this.onDisconnectMessage));
		this._serverModel.onDisconnect.add($bind(this,this.onSocketDisconnect));
	}
	,onSocketDisconnect: function(byRequest) {
		haxe_Log.trace("d / gameconnectionservice / " + ("Game connection closed! byRequest:" + (byRequest == null?"null":"" + byRequest) + ", gotReason: " + Std.string(this.gotDisconnectMsg)),{ fileName : "GameConnectionService.hx", lineNumber : 42, className : "agario.game.server.GameConnectionService", methodName : "onSocketDisconnect"});
		if(byRequest) return;
		this.gotDisconnectMsg = false;
		if(this.retryAttempt <= this.maxReconnect) {
			haxe_Log.trace("d / gameconnectionservice / " + ("Reconnecting (attempt: " + this.retryAttempt + "/" + this.maxReconnect + ")"),{ fileName : "GameConnectionService.hx", lineNumber : 50, className : "agario.game.server.GameConnectionService", methodName : "onSocketDisconnect"});
			haxe_Timer.delay($bind(this,this.performRetryAttempt),this.retryTimeout);
			this.retryAttempt++;
		} else {
			haxe_Log.trace("d / gameconnectionservice / " + "Exceeded the maximum retry attempts",{ fileName : "GameConnectionService.hx", lineNumber : 57, className : "agario.game.server.GameConnectionService", methodName : "onSocketDisconnect"});
			this.dispatchEvent(new oaktree_core_events_ConnectionEvent("retryAttemptsEnded"));
			this.retryAttempt = 0;
		}
	}
	,performRetryAttempt: function() {
		Core.ui.network.reconnect();
	}
	,onDisconnectMessage: function(type,msg) {
		var disconnect = msg;
		var reason = "";
		var _g = disconnect.get_reason();
		switch(_g) {
		case 2:
			reason = "incompatible_client";
			break;
		case 4:
			reason = "invalid_login";
			break;
		case 3:
			reason = "not authorized";
			break;
		case 1:
			reason = "reconnect";
			this.handleReconnect(disconnect);
			break;
		default:
			reason = "undefined";
		}
		this.gotDisconnectMsg = true;
		haxe_Log.trace("d / gameconnectionservice / " + ("Disconnect reason: " + reason),{ fileName : "GameConnectionService.hx", lineNumber : 88, className : "agario.game.server.GameConnectionService", methodName : "onDisconnectMessage"});
	}
	,handleReconnect: function(disconnect) {
		haxe_Log.trace("d / gameconnectionservice / " + "handling reconnection",{ fileName : "GameConnectionService.hx", lineNumber : 93, className : "agario.game.server.GameConnectionService", methodName : "handleReconnect"});
		var host = disconnect.get_reconnectHost();
		var port = "80";
		if((disconnect.hasField__0 & 1) != 0) port = "" + (function($this) {
			var $r;
			var this1 = disconnect.get_reconnectTcpPort();
			$r = Std.string(_$UInt_UInt_$Impl_$.toFloat(this1));
			return $r;
		}(this));
		var newHost = "wss://" + disconnect.get_reconnectHost() + "/ws";
		haxe_Log.trace("d / gameconnectionservice / " + ("reconnecting to " + newHost),{ fileName : "GameConnectionService.hx", lineNumber : 104, className : "agario.game.server.GameConnectionService", methodName : "handleReconnect"});
		this._serverModel.connect(newHost,true);
	}
	,__class__: agario_game_server_GameConnectionService
});
var agario_models_DataManager = function() {
	this.shopReadyToShow = false;
	this.I18nLoaded = false;
	this.userInfoLoaded = false;
	this.shopLoaded = false;
};
$hxClasses["agario.models.DataManager"] = agario_models_DataManager;
agario_models_DataManager.__name__ = ["agario","models","DataManager"];
agario_models_DataManager.__interfaces__ = [oaktree_ext_services_IService];
agario_models_DataManager.prototype = {
	onConfigurationLoaded: null
	,shopCoins: null
	,shopItems: null
	,priceMatrixModel: null
	,shopBoostItems: null
	,shopSkinsModel: null
	,walletProductBundlesModel: null
	,walletProductsModel: null
	,shopPurchasesModel: null
	,defaultSettings: null
	,defaultCommunicationSettings: null
	,xpModel: null
	,shopData: null
	,shopLoaded: null
	,userInfoLoaded: null
	,I18nLoaded: null
	,shopReadyToShow: null
	,_shopService: null
	,_payModel: null
	,create: function() {
		this.onConfigurationLoaded = new msignal_Signal0();
	}
	,initialize: function() {
		this._shopService = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
		this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
		Core.get_events().addEventListener(oaktree_core_events_UserEvent.USER_LOGGED,$bind(this,this.onUserLogged));
		Core.get_events().addEventListener("ShopEvent::CONFIGURATION_LOADED",$bind(this,this.handleShopInit));
		Core.get_events().addEventListener("payment_event::got_currency_code",$bind(this,this.handleReceiveCurrencyCode));
		oaktree_ext_localization_I18n.onInit.add($bind(this,this.handleLocalizationInit));
	}
	,handleReceiveCurrencyCode: function(event) {
		this.validateCurrencyCode();
	}
	,handleLocalizationInit: function() {
		this.I18nLoaded = true;
		this.checkUserItems();
	}
	,onUserLogged: function(e) {
		this.userInfoLoaded = true;
		this.checkUserItems();
	}
	,onUserFbId: function(id) {
	}
	,checkUserItems: function() {
		if(this.shopLoaded && this.userInfoLoaded && this.I18nLoaded) {
			Core.user.evaluateWallet();
			var playerSkin = this.shopSkinsModel.getItemById(Core.user.get_selectedSkin());
			if(playerSkin != null) {
				var skinImagePath = playerSkin.gamePlayInfo.get_shopImage();
				Core.services.gameui.setUserSkin(skinImagePath,playerSkin.gamePlayInfo.get_cellColor(),playerSkin.tab);
			} else Core.services.gameui.setUserSkin("");
		}
	}
	,handleShopInit: function(event) {
		this.shopLoaded = true;
		this.shopItems = new agario_module_shop_models_ShopItemsCollection();
		if(event.data != null) this.shopData = js_Boot.__cast(event.data , agario_module_shop_models_ShopModel); else haxe_Log.trace("d / datamanager / " + "ShopModel data is null!",{ fileName : "DataManager.hx", lineNumber : 152, className : "agario.models.DataManager", methodName : "handleShopInit"});
		this.createDefaultSettings();
		this.createXPSettings();
		this.createPriceModel();
		this.createShopPurchasesModel();
		this.createWalletProducts();
		this.createWalletBundles();
		this.createCoinsModel();
		this.createBoostsModel();
		this.createSkinsModel();
		this.checkUserItems();
		this.registerSkinsInGameCore();
		this.onConfigurationLoaded.dispatch();
	}
	,registerSkinsInGameCore: function() {
		var _g = 0;
		var _g1 = this.shopSkinsModel.skinList;
		while(_g < _g1.length) {
			var skinItem = _g1[_g];
			++_g;
			var flags = 2;
			var skinUrl = skinItem.gamePlayInfo.get_gamePlayImage();
			var skinName = skinItem.gamePlayInfo.productId;
			if(StringTools.startsWith(skinName,"skin_")) skinName = HxOverrides.substr(skinName,5,null);
			skinName = "%" + skinName;
			var skinColor = Std.parseInt(skinItem.gamePlayInfo.get_cellColor());
			if (window.core) window.core.registerSkin(null,skinName,skinUrl,flags,skinColor);
		}
		if(this.shopData.freeSkins != null) {
			var _g2 = 0;
			var _g11 = this.shopData.freeSkins;
			while(_g2 < _g11.length) {
				var freeSkin = _g11[_g2];
				++_g2;
				var flags1;
				if(freeSkin.showName) flags1 = 0; else flags1 = 1;
				var skinUrl1 = freeSkin.get_gamePlayImage();
				if (window.core) window.core.registerSkin("" + freeSkin.id,null,skinUrl1,flags1,null);
			}
		}
	}
	,createXPSettings: function() {
		this.xpModel = new agario_module_shop_models_XPModel();
		this.xpModel.xpList = this.shopData.xpList;
	}
	,createDefaultSettings: function() {
		this.defaultSettings = new agario_module_shop_models_SettingsModel();
		this.defaultSettings.settingList = this.shopData.userSettings;
		this.defaultSettings.settingList = this.defaultSettings.settingList.concat(this.shopData.localizationSettings);
		Core.user.selectedLanguage = this.defaultSettings.getSettingByKey("defaultLanguage");
		this.defaultCommunicationSettings = agario_module_shop_models_SettingsModel.createMap(this.shopData.defaultCommunicationSettings);
	}
	,createShopPurchasesModel: function() {
		this.shopPurchasesModel = new agario_module_shop_models_ShopPurchasesModel();
		this.shopPurchasesModel.walletSoftPurchases = this.shopData.walletSoftPurchases;
		this.shopPurchasesModel.walletInappPurchases = this.shopData.walletInappPurchases;
	}
	,createWalletBundles: function() {
		this.walletProductBundlesModel = new agario_module_shop_models_WalletProductBundlesModel();
		var _g1 = 0;
		var _g = this.shopData.walletProductBundles.length;
		while(_g1 < _g) {
			var i = _g1++;
			var walletProductBundle = this.shopData.walletProductBundles[i];
			this.walletProductBundlesModel.add(walletProductBundle);
		}
	}
	,createWalletProducts: function() {
		this.walletProductsModel = new agario_module_shop_models_WalletProductsModel();
		var _g1 = 0;
		var _g = this.shopData.walletProducts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var walletProduct = this.shopData.walletProducts[i];
			this.walletProductsModel.add(walletProduct);
		}
	}
	,createSkinsModel: function() {
		this.shopSkinsModel = new agario_module_shop_models_ShopSkinModel();
		var _g1 = 0;
		var _g = this.shopData.shopSkins.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tempSkin = this.shopData.shopSkins[i];
			this.setPurchaseInfo(tempSkin);
			tempSkin.gamePlayInfo = this.getGameplayInfoForSkin(tempSkin.productIdToQuantify);
			this.shopSkinsModel.addSkin(tempSkin);
			this.shopItems.add(tempSkin);
		}
		var _g11 = 0;
		var _g2 = this.shopData.shopSkinTabs.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var tempTab = this.shopData.shopSkinTabs[i1];
			this.shopSkinsModel.addTab(tempTab);
		}
	}
	,createPriceModel: function() {
		this.priceMatrixModel = new agario_module_shop_models_PriceMatrixModel();
		var _g1 = 0;
		var _g = this.shopData.shopPriceMatrix.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.priceMatrixModel.add(this.shopData.shopPriceMatrix[i]);
		}
		this.validateCurrencyCode();
	}
	,createCoinsModel: function() {
		this.shopCoins = new agario_module_shop_models_ShopCoinModel();
		var _g1 = 0;
		var _g = this.shopData.shopCoins.length;
		while(_g1 < _g) {
			var i = _g1++;
			var currency = this.shopData.shopCoins[i];
			this.setPurchaseInfo(currency);
			this.shopCoins.add(currency);
			this.shopItems.add(currency);
		}
	}
	,createBoostsModel: function() {
		this.shopBoostItems = new agario_module_shop_models_ShopBoostsModel();
		var _g1 = 0;
		var _g = this.shopData.shopBoostItems.length;
		while(_g1 < _g) {
			var i = _g1++;
			var si = this.shopData.shopBoostItems[i];
			this.setPurchaseInfo(si);
			si.category = this.getBoostCategory(si.categoryShopId,si.categoryPosition);
			si.gameplayInfo = this.getGameplayInfoForBoost(si.purchaseId);
			si.name = si.category.title;
			var hours = si.gameplayInfo.duration / 60 / 60;
			if(hours == 1) si.description = "menu_shop_1_hour"; else si.description = "menu_shop_n_hour";
			this.shopBoostItems.add(si);
			this.shopItems.add(si);
		}
	}
	,getGameplayInfoForBoost: function(purchaseId) {
		var bundleId = this.shopPurchasesModel.getPurchaseByPurchaseId(purchaseId).bundleId;
		var productId = this.walletProductBundlesModel.getBundleByBundleId(bundleId).productId;
		return this.shopData.gamePlayBoosts.filter(function(item) {
			return item.productId == productId;
		})[0];
	}
	,getGameplayInfoForSkin: function(productId) {
		return this.shopData.gamePlaySkins.filter(function(item) {
			return item.productId == productId;
		})[0];
	}
	,getBoostCategory: function(categoryId,position) {
		var _g1 = 0;
		var _g = this.shopData.shopBoostCategories.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.shopData.shopBoostCategories[i].shopId == categoryId && this.shopData.shopBoostCategories[i].position == position) return this.shopData.shopBoostCategories[i];
		}
		return new agario_module_shop_models_vo_ShopBoostCategoryVO();
	}
	,setPurchaseInfo: function(shopItem) {
		if(shopItem.type == agario_module_shop_models_types_ShopItemType.SOFT) {
			if(js_Boot.__instanceof(shopItem,agario_module_shop_models_vo_ShopSkinItemVO)) {
				shopItem.purchaseInfo = this.shopPurchasesModel.getSoftPurchaseByPurchaseId((js_Boot.__cast(shopItem , agario_module_shop_models_vo_ShopSkinItemVO)).originId);
				shopItem.purchaseId = (js_Boot.__cast(shopItem , agario_module_shop_models_vo_ShopSkinItemVO)).originId;
			} else shopItem.purchaseInfo = this.shopPurchasesModel.getSoftPurchaseByPurchaseId(shopItem.purchaseId);
			shopItem.price = shopItem.purchaseInfo.currencyAmount;
		} else if(shopItem.type == agario_module_shop_models_types_ShopItemType.INAPP) {
			shopItem.purchaseInfo = this.shopPurchasesModel.getInappPurchaseByPurchaseId(shopItem.purchaseId);
			shopItem.price = this.priceMatrixModel.getPriceForTier(shopItem.purchaseInfo.priceTier,this._payModel.getCurrencyCode());
		} else if(shopItem.type == "REWARD") {
			var s = "";
			shopItem.price = 0;
			shopItem.isReward = true;
			if(js_Boot.__instanceof(shopItem,agario_module_shop_models_vo_ShopSkinItemVO)) this.checkLevelSkins(js_Boot.__cast(shopItem , agario_module_shop_models_vo_ShopSkinItemVO)); else haxe_Log.trace("d / datamanager / " + ("RewardItem unhandled: " + shopItem.name),{ fileName : "DataManager.hx", lineNumber : 418, className : "agario.models.DataManager", methodName : "setPurchaseInfo"});
		} else haxe_Log.trace("d / datamanager / " + ("Cannot get price of type : " + shopItem.type),{ fileName : "DataManager.hx", lineNumber : 424, className : "agario.models.DataManager", methodName : "setPurchaseInfo"});
	}
	,checkLevelSkins: function(s) {
		s.availableAtLevel = this.xpModel.getLevelForReward(s.originId).level + 1;
	}
	,refreshShopItems: function() {
		var _g = 0;
		var _g1 = this.shopItems.shopItemsList;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.setPurchaseInfo(item);
		}
	}
	,resetModels: function() {
		if(this.shopItems == null) return;
		var _g = 0;
		var _g1 = this.shopItems.shopItemsList;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopSkinItemVO) || js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopBoostItemVO)) {
				item.set_inUse(false);
				item.set_owned(false);
			}
		}
	}
	,getBonusById: function(id) {
		var res = this.shopData.walletBonusRewards.filter(function(b) {
			return b.bonusId == id;
		});
		if(res.length > 0) return res[0]; else return null;
	}
	,validateCurrencyCode: function() {
		if(this.priceMatrixModel != null && !this.priceMatrixModel.hasCurrency(this._payModel.getCurrencyCode())) {
			haxe_Log.trace("d / datamanager / " + ("Currency " + this._payModel.getCurrencyCode() + " isn't available. Falling back to USD"),{ fileName : "DataManager.hx", lineNumber : 478, className : "agario.models.DataManager", methodName : "validateCurrencyCode"});
			this._payModel.overrideCurrencyCode("USD");
		}
	}
	,__class__: agario_models_DataManager
};
var agario_models_VersionModel = function() { };
$hxClasses["agario.models.VersionModel"] = agario_models_VersionModel;
agario_models_VersionModel.__name__ = ["agario","models","VersionModel"];
agario_models_VersionModel.getVersionPaddedAsString = function() {
	return StringTools.lpad("" + "1","0",3) + StringTools.lpad("" + "4","0",3) + StringTools.lpad("" + "9","0",3);
};
agario_models_VersionModel.updateTag = function() {
	if(Core.initialized) Core.services.gameui.setVersionTag("(" + agario_models_VersionModel.SERVER_VERSION + " - " + agario_models_VersionModel.VERSION + "." + "40" + " - (CFG: " + agario_models_VersionModel.CONFIG_NUMBER + "))");
};
var agario_module_dom_AdsManager = function(pManager) {
	this._manager = pManager;
};
$hxClasses["agario.module.dom.AdsManager"] = agario_module_dom_AdsManager;
agario_module_dom_AdsManager.__name__ = ["agario","module","dom","AdsManager"];
agario_module_dom_AdsManager.prototype = {
	_manager: null
	,refreshAds: function(groupName) {
		window.refreshAd(window.adSlots[groupName]);
	}
	,destroyAds: function(groupName) {
		window.destroyAd(window.adSlots[groupName]);
	}
	,__class__: agario_module_dom_AdsManager
};
var agario_module_dom_CanvasManager = function(pManager) {
	this._manager = pManager;
	this.initialize();
};
$hxClasses["agario.module.dom.CanvasManager"] = agario_module_dom_CanvasManager;
agario_module_dom_CanvasManager.__name__ = ["agario","module","dom","CanvasManager"];
agario_module_dom_CanvasManager.prototype = {
	_manager: null
	,targetMouseX: null
	,targetMouseY: null
	,initialize: function() {
		var detailLevel;
		if(window.localStorage.quality_setting) detailLevel = window.localStorage.quality_setting; else detailLevel = "Retina";
		this.setQuality(detailLevel);
		this.updateQualitySetting(detailLevel);
		window.onresize = $bind(this,this.handleWindowResize);
		this.handleWindowResize(null);
	}
	,setScale: function(pNewScale) {
		this._manager.state.canvasScale = pNewScale;
		var innerWidth = window.innerWidth;
		var innerHeight = window.innerHeight;
		var canvas = window.document.getElementById("canvas");
		canvas.width = innerWidth * this._manager.state.canvasScale;
		canvas.height = innerHeight * this._manager.state.canvasScale;
		canvas.onmousemove = $bind(this,this.handleMouseMove);
		var containerHeight = $("#helloContainer").innerHeight();
		var newScale = Math.min(1,innerHeight / 800);
		var newHeight = 640 * newScale;
		if(innerWidth > 0) {
			var transformValue = "translate(-50%, 0%) scale(" + newScale + ")";
			var element = $("#helloContainer");
			element.css("transform",transformValue);
			element.css("-ms-transform",transformValue);
			element.css("-webkit-transform",transformValue);
			var newTop = innerHeight / 2 - newHeight * 0.48;
			element.css("top","" + newTop + "px");
		}
	}
	,updateQualitySetting: function(level) {
		$("#quality").val(level);
	}
	,setQuality: function(level) {
		var hasPixelRatio = "devicePixelRatio" in window;
		var pixelRatio = 1.0;
		if(hasPixelRatio) pixelRatio = window.devicePixelRatio;
		switch(level) {
		case "Retina":
			break;
		case "High":
			pixelRatio = 1.0;
			break;
		case "Medium":
			pixelRatio = 0.75;
			break;
		case "Low":
			pixelRatio = 0.5;
			break;
		}
		this.setScale(pixelRatio);
		window.localStorage.setItem("quality_setting",level);
		window.localStorage.setItem("scale_setting","" + pixelRatio);
	}
	,gamepadAxisUpdate: function(axis,value) {
		var canvas = window.document.getElementById("canvas");
		var canvasWidth = canvas.width;
		var canvasHeight = canvas.height;
		var deadzone = value * value < 0.1;
		if(axis == 0) {
			this.targetMouseX = canvasWidth / 2;
			if(!deadzone) this.targetMouseX = (value + 1) / 2 * canvasWidth;
		}
		if(axis == 1) {
			this.targetMouseY = canvasHeight / 2;
			if(!deadzone) this.targetMouseY = (value + 1) / 2 * canvasHeight;
		}
		this.updateMouseTarget(this.targetMouseX,this.targetMouseY);
	}
	,updateMouseTarget: function(pX,pY) {
		if (window.core) window.core.setTarget(pX * this._manager.state.canvasScale,pY * this._manager.state.canvasScale);
	}
	,handleMouseMove: function(e) {
		this.updateMouseTarget(e.clientX,e.clientY);
	}
	,handleWindowResize: function(_) {
		this.setScale(this._manager.state.canvasScale);
	}
	,__class__: agario_module_dom_CanvasManager
};
var agario_module_dom_GAnalytics = function(pManager) {
	this._manager = pManager;
};
$hxClasses["agario.module.dom.GAnalytics"] = agario_module_dom_GAnalytics;
agario_module_dom_GAnalytics.__name__ = ["agario","module","dom","GAnalytics"];
agario_module_dom_GAnalytics.prototype = {
	_manager: null
	,sendEvent: function(eventName,value) {
		if(window.ga) window.ga("send","event",eventName,value);
	}
	,__class__: agario_module_dom_GAnalytics
};
var agario_module_dom_GameState = function() {
	this.doCoreReload = false;
	this.canvasScale = 1.0;
	this.pendingNick = null;
	this.firstNickDialog = true;
	this.inGame = false;
	this.isPlayerAlive = false;
	this.statsOpen = false;
	this.dialogOpen = false;
	this.region = "";
	this.partyToken = "";
	this.gameMode = "";
	this.isInitialized = false;
	this.lastGameResults = { foodEaten : 0, highestMass : 0, timeAlive : 0, leaderboardTime : 0, cellsEaten : 0, topPosition : 0};
};
$hxClasses["agario.module.dom.GameState"] = agario_module_dom_GameState;
agario_module_dom_GameState.__name__ = ["agario","module","dom","GameState"];
agario_module_dom_GameState.prototype = {
	isInitialized: null
	,gameMode: null
	,partyToken: null
	,region: null
	,lastGameResults: null
	,dialogOpen: null
	,statsOpen: null
	,isPlayerAlive: null
	,inGame: null
	,firstNickDialog: null
	,pendingNick: null
	,canvasScale: null
	,doCoreReload: null
	,setGameResults: function(foodEaten,highestMass,timeAlive,leaderTime,cellsEaten,topPosition) {
		if(topPosition == null) topPosition = 0;
		if(cellsEaten == null) cellsEaten = 0;
		if(leaderTime == null) leaderTime = 0;
		if(timeAlive == null) timeAlive = 0;
		if(highestMass == null) highestMass = 0;
		if(foodEaten == null) foodEaten = 0;
		this.lastGameResults = { foodEaten : foodEaten, highestMass : highestMass, timeAlive : timeAlive, leaderboardTime : leaderTime, cellsEaten : cellsEaten, topPosition : topPosition};
	}
	,__class__: agario_module_dom_GameState
};
var agario_module_dom_MainUI = function(pManager) {
	this._tooltipCounter = 0;
	this._checkTimer = 0;
	this._manager = pManager;
	this.initialize();
};
$hxClasses["agario.module.dom.MainUI"] = agario_module_dom_MainUI;
agario_module_dom_MainUI.__name__ = ["agario","module","dom","MainUI"];
agario_module_dom_MainUI.prototype = {
	_checkTimer: null
	,_tooltipCounter: null
	,_manager: null
	,initialize: function() {
		var isInFacebook = Core.environment.get_isInFacebook();
		if(isInFacebook) {
			$("#gplusLogin").hide();
			$(".btn-logout").hide();
			$("footer.tosBox.left").hide();
		}
		this.initButtonTriggers();
		this.initButtonTooltips();
	}
	,initButtonTriggers: function() {
		var _g = this;
		if(/chrome/.test( navigator.userAgent.toLowerCase() )) {
			$("#gPlusShare").click($bind(this,this.handleGPlusClick));
			$("#externalGShare").click($bind(this,this.handleGPlusClick));
		}
		$("#massButton").click(function(e) {
			MiniclipAPI.instance.openShop("shopMass");
		});
		$("#skinButton").click(function(e1) {
			var dataType = $(e1.currentTarget).attr("data-type");
			MiniclipAPI.instance.openShop("shopSkins",{ tab : dataType});
		});
		$("#boostButton").click(function(e2) {
			MiniclipAPI.instance.openShop("shopBoost");
		});
		$(".agario-wallet-container").click(function(e3) {
			var _server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
			if(_server != null && !_server.isConnected()) return;
			if(!Core.user.loggedIn && Core.environment.get_isInFacebook()) return;
			if(MiniclipAPI.instance.isShopAvailable() || !MiniclipAPI.instance.isConnecting()) MiniclipAPI.instance.openShop("shopCurrency");
		});
		$(".agario-profile-picture").click(function(_) {
			if(!Core.user.loggedIn && Core.environment.get_isInFacebook()) return;
			MiniclipAPI.instance.showProfile();
		});
		$("#statsContinue").click(function(_1) {
			_g._manager.stats.closeStats();
		});
		$(".btn-spectate").click(function(e4) {
			_g.spectate();
			e4.preventDefault();
		});
	}
	,initButtonTooltips: function() {
		$(".btn-login-play").tooltip({ 'html' : true, 'title' : i18n.login_tooltip, 'placement' : "top", 'trigger' : "manual"});
		$(".copy-party-token").tooltip({ 'html' : true, 'title' : "Use <strong>&#8984; + C </strong> to copy!", 'placement' : "top", 'trigger' : "manual"});
		var _tooltipCounter = 0;
		$(".btn-play-guest").hover($bind(this,this.showTooltip),$bind(this,this.hideTooltip));
		$(".agario-loggedout-panel").hover($bind(this,this.showTooltip),$bind(this,this.hideTooltip));
	}
	,showTooltip: function(_) {
		this._tooltipCounter++;
		this.checkTooltip();
	}
	,hideTooltip: function(_) {
		this._tooltipCounter--;
		this.checkTooltip();
	}
	,checkTooltip: function() {
		if(this._tooltipCounter > 0) {
			clearTimeout(this._checkTimer);
			$(".btn-login-play").tooltip("show");
		} else this._checkTimer = setTimeout(function() {
			$(".btn-login-play").tooltip("hide");
		},200);
	}
	,handleGPlusClick: function(pEvent) {
		pEvent.stopPropagation();
		pEvent.preventDefault();
		window.gPlusShare();
	}
	,isChromeBrowser: function() {
		return /chrome/.test( navigator.userAgent.toLowerCase() );
	}
	,showInstructionsPanel: function(pForce) {
		if(pForce == null) pForce = false;
		var areSettingsHidden = $("#settings").css("display") == "none";
		var isSocialLoginHidden = $("#socialLoginContainer").css("display") == "none";
		if(pForce || areSettingsHidden && isSocialLoginHidden) $("#instructions").show();
	}
	,showNickDialog: function(time) {
		var _g = this;
		if(this._manager.state.dialogOpen || this._manager.state.statsOpen) return;
		if (window.core) window.core.setFadeout(true);
		this._manager.state.dialogOpen = true;
		$(".btn-spectate").prop("disabled",this._manager.state.isPlayerAlive);
		window.onkeydown = function(e) {
			var isInMainScreen = Core.get_states().isTopState("state_main_screen");
			if(e.keyCode == 13 && isInMainScreen) {
				var item = window.document.getElementById("nick");
				_g.setNick(item.value);
			}
			var targetId = e.target.id;
			if(e.keyCode == 32 && targetId != "nick") e.preventDefault();
		};
		this._manager.state.inGame = false;
		if(!this._manager.state.firstNickDialog) {
			$("#adsBottom").show();
			$("#g300x250").hide();
			$("#a300x250").show();
			$("#g728x90").hide();
			$("#a728x90").show();
			window.refreshAd(window.adSlots.aa);
		} else window.refreshAd(window.adSlots.ac);
		this._manager.state.firstNickDialog = false;
		$("#mainPanel").show();
		if(time > 0) $("#overlays").fadeIn(time); else $("#overlays").show();
	}
	,hideMetaUI: function() {
		$("#adsBottom").hide();
		$("#overlays").hide();
		$("#stats").hide();
		$("#mainPanel").hide();
		this._manager.state.dialogOpen = false;
		this._manager.state.statsOpen = false;
		this._manager.network.checkRegion();
		window.destroyAd(window.adSlots.aa);
		window.destroyAd(window.adSlots.ac);
	}
	,setNick: function(nick) {
		this._manager.analytics.sendEvent("Nick",nick.toLowerCase());
		this.hideMetaUI();
		this._manager.state.pendingNick = nick;
		if (window.core) window.core.sendNick(nick);
		this._manager.settings.storeSettings();
		window.addKeyListeners();
		this._manager.state.pendingNick = null;
		if (window.core) window.core.setFadeout(false);
	}
	,spectate: function() {
		this.hideMetaUI();
		window.addKeyListeners();
		if (window.core) window.core.setFadeout(false);
		if (window.core) window.core.sendSpectate();
	}
	,applyGameMode: function(pMode) {
		$("#helloContainer").attr("data-gamemode",pMode);
		this._manager.state.gameMode = pMode;
		$("#gamemode").val(pMode);
	}
	,setGameMode: function(pMode,pReconnect) {
		if(pReconnect == null) pReconnect = true;
		if(pMode == this._manager.state.gameMode) return;
		if(this._manager.state.gameMode == ":party") $("#helloContainer").attr("data-party-state","0");
		this.applyGameMode(pMode);
		if(pReconnect && pMode != ":party") this._manager.network.reconnect();
	}
	,__class__: agario_module_dom_MainUI
};
var agario_module_dom_NetworkUI = function(pManager) {
	this._backoffPeriod = 5000;
	this._regionsNames = null;
	this._curValidFindServer = 0;
	this._manager = pManager;
	this.initialize();
};
$hxClasses["agario.module.dom.NetworkUI"] = agario_module_dom_NetworkUI;
agario_module_dom_NetworkUI.__name__ = ["agario","module","dom","NetworkUI"];
agario_module_dom_NetworkUI.prototype = {
	_masterUrl: null
	,_curValidFindServer: null
	,_isSecure: null
	,_regionsNames: null
	,_backoffPeriod: null
	,_manager: null
	,initialize: function() {
		var protocol = window.location.protocol;
		this._isSecure = protocol == "https:";
		var tempMaster = agario_config_Configs.getProperty("master_url");
		if(Core.environment.webEnv.hasParameter("master")) tempMaster = Core.environment.webEnv.getParameter("master");
		this._masterUrl = "" + protocol + "//" + tempMaster + "/";
	}
	,findServer: function(pRegion,pGameMode) {
		if(pGameMode == null) pGameMode = "";
		if(pRegion == null) pRegion = "";
		var _g = this;
		var myFindID = ++this._curValidFindServer;
		haxe_Log.trace("d / networkui / " + ("Find " + pRegion + pGameMode),{ fileName : "NetworkUI.hx", lineNumber : 53, className : "agario.module.dom.NetworkUI", methodName : "findServer"});
		var requestData = pRegion + pGameMode;
		if(requestData == "") requestData = "?";
		$.ajax(this._masterUrl + "findServer",{ error : function() {
			_g._backoffPeriod *= 2;
			haxe_Log.trace("d / networkui / " + ("Failed to get server. Will retry in " + _g._backoffPeriod / 1000 + " seconds"),{ fileName : "NetworkUI.hx", lineNumber : 64, className : "agario.module.dom.NetworkUI", methodName : "findServer"});
			setTimeout(function() {
				var tReg = pRegion;
				var tMode = pGameMode;
				_g.findServer(tReg,tMode);
			},_g._backoffPeriod);
		}, success : function(pResponse) {
			if(myFindID != _g._curValidFindServer) return;
			if(pResponse.alert != null) alert(pResponse.alert);
			var serverIP = pResponse.ip;
			if(Core.environment.webEnv.hasParameter("ip")) serverIP = Core.environment.webEnv.getParameter("ip");
			_g.connect(serverIP,_g._isSecure);
			Core.ui.state.partyToken = pResponse.token;
			_g._backoffPeriod = 5000;
		}, 'dataType' : "json", 'method' : "POST", 'cache' : false, 'crossDomain' : true, 'data' : requestData});
	}
	,connect: function(pServerUrl,pIsSecure) {
		if(pIsSecure == null) pIsSecure = false;
		var isDevelopment;
		if(Core.environment.webEnv.hasParameter("env_development")) isDevelopment = Core.environment.webEnv.getParameter("env_development") == "true"; else isDevelopment = false;
		var isLocal;
		if(Core.environment.webEnv.hasParameter("env_local")) isLocal = Core.environment.webEnv.getParameter("env_local") == "true"; else isLocal = false;
		var url = "ws://" + pServerUrl;
		if(pIsSecure && (!isDevelopment && !isLocal)) {
			var tmp = pServerUrl.split(":");
			var dotRegex = new EReg("\\.","g");
			var slashRegex = new EReg("/","g");
			var ipPart = dotRegex.replace(tmp[0],"-");
			ipPart = slashRegex.replace(ipPart,"");
			url = "wss://ip-" + ipPart + ".tech.agar.io:" + tmp[1];
		}
		if (window.core) window.core.connect(url);
	}
	,getLatestConfigurationId: function() {
		var _g = this;
		if(Core.environment.webEnv.hasParameter("configID")) {
			this.setConfiguration(Core.environment.webEnv.getParameter("configID"));
			return;
		}
		$.ajax(this._masterUrl + "getLatestID",{ success : function(data) {
			var configId = data.split("\n")[0];
			_g.setConfiguration(configId);
			window.localStorage.setItem("last_config_id",configId);
		}, error : function() {
			var lasConfigAvailable = !oaktree_utils_StringUtility.isBlank(window.localStorage.getItem("last_config_id"));
			if(lasConfigAvailable) {
				var configId1 = window.localStorage.getItem("last_config_id");
				haxe_Log.trace("Fallback to stored configID: " + configId1,{ fileName : "NetworkUI.hx", lineNumber : 138, className : "agario.module.dom.NetworkUI", methodName : "getLatestConfigurationId"});
				_g.setConfiguration(configId1);
			}
		}, 'method' : "GET", 'cache' : false, 'crossDomain' : true});
	}
	,setConfiguration: function(pConfigId) {
		var isLocal = agario_config_Configs.getProperty("env_local") != agario_config_Configs.NOT_FOUND;
		var loadLocalConfiguration = agario_config_Configs.getProperty("load_local_configuration") == "true";
		if(isLocal) {
			if(loadLocalConfiguration) pConfigId = "base"; else pConfigId = agario_config_Configs.getProperty("configID");
		}
		MiniclipAPI.instance.updateConfigurationID(pConfigId);
	}
	,reconnect: function() {
		var _g = this;
		if(!this._manager.state.isInitialized) return;
		if(this._manager.state.region == "" || this._manager.state.region == null) return;
		if(this._manager.state.doCoreReload) this._manager.reloadAgarioCore(function() {
			_g.findServer(_g._manager.state.region,_g._manager.state.gameMode);
		}); else this.findServer(this._manager.state.region,this._manager.state.gameMode);
	}
	,setRegion: function(pRegion) {
		if(pRegion == null || pRegion == "") return;
		if(pRegion == this._manager.state.region) {
			$(".btn-needs-server").prop("disabled",false);
			return;
		}
		if($("#region").val() != pRegion) $("#region").val(pRegion);
		window.localStorage.setItem("location",pRegion);
		this._manager.state.region = pRegion;
		$(".region-message").hide();
		$(".region-message." + pRegion).show();
		$(".btn-needs-server").prop("disabled",false);
		if(this._manager.state.isInitialized) this.reconnect();
	}
	,checkRegion: function() {
		var regionElm = $("#region");
		var selectedRegion = regionElm.val();
		if(selectedRegion != null && selectedRegion != "") window.localStorage.setItem("location",selectedRegion); else {
			var savedRegion = window.localStorage.getItem("location");
			if(savedRegion != null && savedRegion != "") $("#region").val(savedRegion);
		}
		selectedRegion = regionElm.val();
		if(selectedRegion != null && selectedRegion != "") $("#locationKnown").append(regionElm); else $("#locationUnknown").append(regionElm);
	}
	,refreshRegionInfo: function() {
		this.initializeRegionNames();
		$.getJSON(this._masterUrl + "info",$bind(this,this.handleRegionInfo));
	}
	,handleRegionInfo: function(response,_) {
		var counter = new haxe_ds_StringMap();
		var regions = Reflect.fields(response.regions);
		var _g = 0;
		while(_g < regions.length) {
			var region = regions[_g];
			++_g;
			var ii = region.split(":")[0];
			if(!(__map_reserved[ii] != null?counter.existsReserved(ii):counter.h.hasOwnProperty(ii))) {
				if(__map_reserved[ii] != null) counter.setReserved(ii,0); else counter.h[ii] = 0;
			}
			var regionObj = Reflect.field(response.regions,region);
			counter.set(ii,(__map_reserved[ii] != null?counter.getReserved(ii):counter.h[ii]) + regionObj.numPlayers);
		}
		var $it0 = counter.keys();
		while( $it0.hasNext() ) {
			var elm = $it0.next();
			$("#region option[value=\"" + elm + "\"]").text(this._regionsNames.get(elm) + (" (" + (__map_reserved[elm] != null?counter.getReserved(elm):counter.h[elm]) + ")"));
		}
	}
	,initializeRegionNames: function() {
		var _g = this;
		if(this._regionsNames == null) {
			this._regionsNames = new haxe_ds_StringMap();
			$("#region").children().each(function(idx,node) {
				var elm = $(node);
				var code = elm.val();
				if(code == null || code == "") return;
				var value = elm.text();
				_g._regionsNames.set(code,value);
			});
		}
	}
	,getPartyToken: function(pToken,errorCallback,successCallback) {
		$.ajax(this._masterUrl + "getToken",{ 'error' : function() {
			errorCallback();
		}, 'success' : function(data) {
			successCallback(data);
		}, 'dataType' : "text", 'method' : "POST", 'cache' : false, 'crossDomain' : true, 'data' : pToken});
	}
	,__class__: agario_module_dom_NetworkUI
};
var agario_module_dom_PartyModeUI = function(pManager) {
	this.justCreatedParty = false;
	this._manager = pManager;
	this.initialize();
};
$hxClasses["agario.module.dom.PartyModeUI"] = agario_module_dom_PartyModeUI;
agario_module_dom_PartyModeUI.__name__ = ["agario","module","dom","PartyModeUI"];
agario_module_dom_PartyModeUI.prototype = {
	_manager: null
	,initialize: function() {
		var _g = this;
		$(".copy-party-token").click(function(_) {
			var i = $(".partyToken:visible")[0];
			i.setSelectionRange(0,i.value.length);
			i.select();
			var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
			if(!isSafari) try {
				window.document.execCommand("copy");
			} catch( _1 ) {
				haxe_CallStack.lastException = _1;
				if (_1 instanceof js__$Boot_HaxeError) _1 = _1.val;
			} else {
				$(".copy-party-token").tooltip("show");
				setTimeout(function(_2) {
					$(".copy-party-token").tooltip("hide");
				},1200);
			}
		});
		$("#create-party-btn").click(function(_3) {
			_g.createParty();
		});
		$("#pre-join-party-btn").click(function(_4) {
			$("#joinPartyToken").val("");
			$("#helloContainer").attr("data-party-state","2");
			$("#helloContainer").attr("data-party-state","2");
		});
		$("#join-party-btn").click(function(_5) {
			var token = $("#joinPartyToken").val();
			_g.joinParty(token);
		});
		$("#cancel-party-btn").click(function(_6) {
			_g.cancelParty();
		});
	}
	,justCreatedParty: null
	,createParty: function() {
		$("#helloContainer").attr("data-party-state","3");
		this._manager.mainUI.applyGameMode(":party");
		this._manager.network.reconnect();
		this.justCreatedParty = true;
	}
	,joinParty: function(pToken) {
		var _g = this;
		Core.ui.state.partyToken = pToken;
		this._manager.mainUI.applyGameMode(":party");
		$("#helloContainer").attr("data-party-state","4");
		pToken = window.decodeURIComponent( pToken ).replace(/.*#/gim, "");
		var encodedToken = "#" + window.encodeURIComponent(pToken);
		this.replaceHistoryState(encodedToken);
		this._manager.network.getPartyToken(pToken,function() {
			$("#helloContainer").attr("data-party-state","6");
		},function(pTokenData) {
			var parts = pTokenData.split("\n");
			var encodedToken1 = "agar.io/#" + window.encodeURIComponent(pToken);
			$(".partyToken").val(encodedToken1);
			$("#helloContainer").attr("data-party-state","5");
			_g._manager.mainUI.applyGameMode(":party");
			_g._manager.network.connect("ws://" + parts[0]);
		});
	}
	,cancelParty: function() {
		this.replaceHistoryState("/");
		$("#helloContainer").attr("data-party-state","0");
		this._manager.mainUI.applyGameMode("");
		this._manager.network.reconnect();
	}
	,replaceHistoryState: function(path) {
		if(window.history && window.history.replaceState) window.history.replaceState({ },window.document.title,path);
	}
	,receivedPartyToken: function(pToken) {
		var encodedToken = window.encodeURIComponent(pToken);
		this.replaceHistoryState("/#" + encodedToken);
		$(".partyToken").val("agar.io/#" + encodedToken);
		$("#helloContainer").attr("data-party-state","1");
	}
	,setPartyState: function(pState) {
		$("#helloContainer").attr("data-party-state",pState);
	}
	,connectCallback: function() {
		if(!this.justCreatedParty) return;
		this.receivedPartyToken(this._manager.state.partyToken);
		this.justCreatedParty = false;
	}
	,isSafariBrowser: function() {
		return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
	}
	,encodeURI: function(pData) {
		return window.encodeURIComponent(pToken);
	}
	,decodeURI: function(pData) {
		return window.decodeURIComponent(pData);
	}
	,__class__: agario_module_dom_PartyModeUI
};
var agario_module_dom_SettingsPanel = function(pManager) {
	this._defaultSettings = { skinsEnabled : true, namesEnabled : true, noColors : false, blackTheme : false, showMass : false, statsEnabled : true};
	this._manager = pManager;
	this._settings = Reflect.copy(this._defaultSettings);
};
$hxClasses["agario.module.dom.SettingsPanel"] = agario_module_dom_SettingsPanel;
agario_module_dom_SettingsPanel.__name__ = ["agario","module","dom","SettingsPanel"];
agario_module_dom_SettingsPanel.prototype = {
	_defaultSettings: null
	,_manager: null
	,_settings: null
	,initialize: function() {
		var _g = this;
		$("#noSkins").on("change",null,function(e) {
			_g.set_skinsEnabled(!$(e.currentTarget)["is"](":checked"));
		});
		$("#noNames").on("change",null,function(e1) {
			_g.set_namesEnabled(!$(e1.currentTarget)["is"](":checked"));
		});
		$("#noColors").on("change",null,function(e2) {
			_g.set_noColors($(e2.currentTarget)["is"](":checked"));
		});
		$("#showMass").on("change",null,function(e3) {
			_g.set_showMass($(e3.currentTarget)["is"](":checked"));
		});
		$("#darkTheme").on("change",null,function(e4) {
			_g.set_blackTheme($(e4.currentTarget)["is"](":checked"));
		});
		$("#skipStats").on("change",null,function(e5) {
			_g.set_statsEnabled(!$(e5.currentTarget)["is"](":checked"));
		});
		this.readStorageSettings();
		this.applyStorageSettings();
	}
	,storeSettings: function() {
		var obj = haxe_format_JsonPrinter.print(this._settings,null,null);
		window.localStorage.setItem("settings",obj);
	}
	,hasStoredSettings: function() {
		return window.localStorage.settings != null;
	}
	,getBoolValue: function(obj,fieldName,def) {
		if(def == null) def = false;
		if(Object.prototype.hasOwnProperty.call(obj,fieldName)) return Reflect.field(obj,fieldName); else return def;
	}
	,readStorageSettings: function() {
		var settingsObj = Reflect.copy(this._defaultSettings);
		if(window.localStorage.settings != null) settingsObj = haxe_Json.parse(window.localStorage.getItem("settings"));
		this.set_showMass(this.getBoolValue(settingsObj,"showMass",this._defaultSettings.showMass));
		this.set_blackTheme(this.getBoolValue(settingsObj,"blackTheme",this._defaultSettings.blackTheme));
		this.set_namesEnabled(this.getBoolValue(settingsObj,"namesEnabled",this._defaultSettings.namesEnabled));
		this.set_noColors(this.getBoolValue(settingsObj,"noColors",this._defaultSettings.noColors));
		this.set_statsEnabled(this.getBoolValue(settingsObj,"statsEnabled",this._defaultSettings.statsEnabled));
		this.set_skinsEnabled(this.getBoolValue(settingsObj,"skinsEnabled",this._defaultSettings.skinsEnabled));
	}
	,applyStorageSettings: function() {
		$("#showMass").prop("checked",this._settings.showMass);
		$("#noSkins").prop("checked",!this._settings.skinsEnabled);
		$("#skipStats").prop("checked",!this._settings.statsEnabled);
		$("#noColors").prop("checked",this._settings.noColors);
		$("#noNames").prop("checked",!this._settings.namesEnabled);
		$("#darkTheme").prop("checked",this._settings.blackTheme);
	}
	,get_skinsEnabled: function() {
		return this._settings.skinsEnabled;
	}
	,set_skinsEnabled: function(v) {
		this._settings.skinsEnabled = v;
		if (window.core) window.core.setSkins(v);
		return v;
	}
	,get_namesEnabled: function() {
		return this._settings.namesEnabled;
	}
	,set_namesEnabled: function(v) {
		this._settings.namesEnabled = v;
		if (window.core) window.core.setNames(v);
		return v;
	}
	,get_blackTheme: function() {
		return this._settings.blackTheme;
	}
	,set_blackTheme: function(v) {
		this._settings.blackTheme = v;
		if (window.core) window.core.setDarkTheme(v);
		return v;
	}
	,get_noColors: function() {
		return this._settings.noColors;
	}
	,set_noColors: function(v) {
		this._settings.noColors = v;
		if (window.core) window.core.setColors(!v);
		return v;
	}
	,get_showMass: function() {
		return this._settings.showMass;
	}
	,set_showMass: function(v) {
		this._settings.showMass = v;
		if (window.core) window.core.setShowMass(v);
		return v;
	}
	,get_statsEnabled: function() {
		return this._settings.statsEnabled;
	}
	,set_statsEnabled: function(v) {
		this._settings.statsEnabled = v;
		return v;
	}
	,toggleSettings: function() {
		$("#settings").toggle();
		$("#socialLoginContainer").hide();
		$("#instructions").hide();
		this._manager.mainUI.showInstructionsPanel();
	}
	,__class__: agario_module_dom_SettingsPanel
	,__properties__: {set_statsEnabled:"set_statsEnabled",get_statsEnabled:"get_statsEnabled",set_showMass:"set_showMass",get_showMass:"get_showMass",set_blackTheme:"set_blackTheme",get_blackTheme:"get_blackTheme",set_noColors:"set_noColors",get_noColors:"get_noColors",set_namesEnabled:"set_namesEnabled",get_namesEnabled:"get_namesEnabled",set_skinsEnabled:"set_skinsEnabled",get_skinsEnabled:"get_skinsEnabled"}
};
var agario_module_dom_StatsUI = function(pManager) {
	this._manager = pManager;
	this.initialize();
};
$hxClasses["agario.module.dom.StatsUI"] = agario_module_dom_StatsUI;
agario_module_dom_StatsUI.__name__ = ["agario","module","dom","StatsUI"];
agario_module_dom_StatsUI.prototype = {
	_manager: null
	,initialize: function() {
	}
	,updateStatsTexts: function() {
		var stats = this._manager.state.lastGameResults;
		$(".stats-food-eaten").text(stats.foodEaten);
		$(".stats-time-alive").text(this.formatSeconds(Math.max(0,stats.timeAlive / 1000)));
		$(".stats-leaderboard-time").text(this.formatSeconds(stats.leaderboardTime));
		$(".stats-highest-mass").text(Math.floor(stats.highestMass / 100));
		$(".stats-cells-eaten").text(stats.cellsEaten);
		$(".stats-top-position").text(stats.topPosition == 0?":(":stats.topPosition);
	}
	,closeStats: function() {
		this._manager.state.statsOpen = false;
		$("#stats").hide();
		window.destroyAd(window.adSlots.ab);
		this._manager.mainUI.showNickDialog(0);
	}
	,showStatsDialog: function() {
		var _g = this;
		if(this._manager.state.dialogOpen || this._manager.state.statsOpen) return;
		var fadeoutTime = 500;
		if(!this._manager.settings.get_statsEnabled()) {
			this._manager.mainUI.showNickDialog(fadeoutTime);
			return;
		}
		window.refreshAd(window.adSlots.ab);
		this.updateStatsTexts();
		this._manager.state.statsOpen = true;
		haxe_Timer.delay(function() {
			$("#overlays").fadeIn(fadeoutTime,null,function() {
				window.animateAccountData();
			});
			$("#stats").show();
			var socialText = _g.getStatsString("g_plus_share_stats");
			window.fillSocialValues(socialText,"gPlusShare");
		},1500);
	}
	,onPlayerSpawn: function() {
		$("#overlays").hide();
	}
	,onPlayerDeath: function() {
		if(window.storageInfo == null) window.createDefaultStorage();
		this.showStatsDialog();
	}
	,getStatsString: function(tag) {
		var timeAlive = $(".stats-time-alive").text();
		var parts = timeAlive.split(":");
		var minAlive = parts[0];
		var secsAlive = parts[1];
		return oaktree_ext_localization_I18n.text(tag,[minAlive,secsAlive,this._manager.state.lastGameResults.highestMass]);
	}
	,formatSeconds: function(s) {
		s = Math.floor(s);
		var sec = "" + s % 60;
		var min = "" + Math.ceil(s / 60);
		if(sec.length < 2) sec = "0" + sec;
		return min + ":" + sec;
	}
	,__class__: agario_module_dom_StatsUI
};
var agario_module_dom_JSUIManager = function() {
	this._coreLoadedCallback = null;
	this._coreReady = false;
	this.initialize();
};
$hxClasses["agario.module.dom.JSUIManager"] = agario_module_dom_JSUIManager;
agario_module_dom_JSUIManager.__name__ = ["agario","module","dom","JSUIManager"];
agario_module_dom_JSUIManager.prototype = {
	_coreReady: null
	,state: null
	,mainUI: null
	,partyMode: null
	,network: null
	,stats: null
	,ads: null
	,analytics: null
	,canvas: null
	,settings: null
	,_coreLoadedCallback: null
	,initialize: function() {
		Core.onReady.addOnce($bind(this,this.onCoreReady));
		this.state = new agario_module_dom_GameState();
		this.canvas = new agario_module_dom_CanvasManager(this);
		this.mainUI = new agario_module_dom_MainUI(this);
		this.partyMode = new agario_module_dom_PartyModeUI(this);
		this.network = new agario_module_dom_NetworkUI(this);
		this.stats = new agario_module_dom_StatsUI(this);
		this.ads = new agario_module_dom_AdsManager(this);
		this.analytics = new agario_module_dom_GAnalytics(this);
		this.settings = new agario_module_dom_SettingsPanel(this);
	}
	,onCoreReady: function() {
		var mc = MiniclipAPI.instance;
		if(Core.environment.webEnv.hasParameter("gamepad") && mc != null) {
			haxe_Log.trace("activated gamepad support",{ fileName : "UIManager.hx", lineNumber : 53, className : "agario.module.dom.JSUIManager", methodName : "onCoreReady"});
			mc.activateGamepadSupport();
			mc.onGamepadUpdate(($_=this.canvas,$bind($_,$_.gamepadAxisUpdate)));
			mc.registerSplitFunction(function() {
				if (window.core) window.core.split();
			});
			mc.registerEjectFunction(function() {
				if (window.core) window.core.eject();
			});
		}
		mc.hideContainer();
		this._coreReady = true;
		this.initAgario();
	}
	,initAgario: function() {
		var mc = MiniclipAPI.instance;
		if(!mc.coreWasLoaded || !this._coreReady) return;
		haxe_Log.trace("d / uimanager / " + "running initAgario",{ fileName : "UIManager.hx", lineNumber : 72, className : "agario.module.dom.JSUIManager", methodName : "initAgario"});
		if(!this.state.isInitialized) {
			this.settings.initialize();
			window.agarioInit();
			var server = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		}
		if(this._coreLoadedCallback != null) {
			haxe_Log.trace("d / uimanager / " + "call coreLoadedCallback",{ fileName : "UIManager.hx", lineNumber : 80, className : "agario.module.dom.JSUIManager", methodName : "initAgario"});
			this._coreLoadedCallback();
		}
	}
	,onDisconnect: function() {
		this.state.isPlayerAlive = false;
		var gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		gameServer.onDisconnect.dispatch(false);
	}
	,doLogin: function() {
		var gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		gameServer.onConnect.dispatch();
		this.partyMode.connectCallback();
		if(this.state.pendingNick == null) {
			this.state.isPlayerAlive = false;
			return;
		}
		if (window.core) window.core.sendNick();
	}
	,reloadAgarioCore: function(onComplete) {
		if(!this.state.doCoreReload) return;
		this._coreLoadedCallback = onComplete;
		var prefix = window.ASSETS_ROOT;
		if(prefix == undefined) prefix = "";
		haxe_Log.trace("d / uimanager / " + "Reloading agar.io core",{ fileName : "UIManager.hx", lineNumber : 125, className : "agario.module.dom.JSUIManager", methodName : "reloadAgarioCore"});
		if (window.core) window.core.destroy();
		var imported = window.document.createElement("script");
		imported.setAttribute("src","" + prefix + "agario.core.js");
		window.document.head.appendChild(imported);
		this.state.doCoreReload = false;
	}
	,handleAgarioCoreReload: function() {
		this.state.doCoreReload = true;
		haxe_Log.trace("d / uimanager / " + "Should reload agario.core",{ fileName : "UIManager.hx", lineNumber : 140, className : "agario.module.dom.JSUIManager", methodName : "handleAgarioCoreReload"});
	}
	,__class__: agario_module_dom_JSUIManager
};
var oaktree_ext_ui_controls_TabItem = function(_id) {
	openfl_display_Sprite.call(this);
	this.onClick = new msignal_Signal1();
	this.id = _id;
};
$hxClasses["oaktree.ext.ui.controls.TabItem"] = oaktree_ext_ui_controls_TabItem;
oaktree_ext_ui_controls_TabItem.__name__ = ["oaktree","ext","ui","controls","TabItem"];
oaktree_ext_ui_controls_TabItem.__super__ = openfl_display_Sprite;
oaktree_ext_ui_controls_TabItem.prototype = $extend(openfl_display_Sprite.prototype,{
	id: null
	,onVisual: null
	,offVisual: null
	,selected: null
	,onClick: null
	,reset: function() {
		this.set_selected(false);
		if(this.contains(this.onVisual)) this.removeChild(this.onVisual);
	}
	,handleItemClick: function(e) {
		if(this.contains(this.offVisual) && !this.selected) this.onClick.dispatch(this);
	}
	,set_onVisual: function(_visual) {
		if(this.onVisual != null && this.contains(this.onVisual)) this.removeChild(this.onVisual);
		if(_visual != null) {
			this.onVisual = _visual;
			this.addChild(this.onVisual);
		}
		this.set_selected(this.selected);
		return _visual;
	}
	,set_offVisual: function(_visual) {
		if(this.offVisual != null && this.contains(this.offVisual)) {
			this.offVisual.removeEventListener("click",$bind(this,this.handleItemClick));
			this.removeChild(this.offVisual);
		}
		if(_visual != null) {
			this.offVisual = _visual;
			this.addChild(this.offVisual);
			this.offVisual.addEventListener("click",$bind(this,this.handleItemClick));
		}
		this.set_selected(this.selected);
		return _visual;
	}
	,set_selected: function(_selected) {
		this.selected = _selected;
		if(this.onVisual != null) this.onVisual.set_visible(this.selected);
		if(this.offVisual != null) this.offVisual.set_visible(!this.selected);
		return this.selected;
	}
	,__class__: oaktree_ext_ui_controls_TabItem
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_selected:"set_selected",set_offVisual:"set_offVisual",set_onVisual:"set_onVisual"})
});
var agario_module_shop_components_CategoryTab = function(_id,name) {
	oaktree_ext_ui_controls_TabItem.call(this,_id);
	var offButtonConfig = { labelUp : { text : name, fontSize : 14, align : 3, color : 5329233}, labelOver : { text : name, fontSize : 14, align : 3, color : 5329233}, colorUp : 16777215, colorOver : 16777215, colorDown : 16777215, width : 140.0, height : 32.0, bottomRightRadius : 0.0, bottomLeftRadius : 0.0};
	var offVisualBtn = new agario_views_controls_FlatButton(offButtonConfig);
	var unselectedTab = new openfl_display_Sprite();
	var outline = new openfl_display_Shape();
	outline.get_graphics().lineStyle(2,12566463,1);
	oaktree_utils_MCGraphics.drawRoundRectComplex(outline.get_graphics(),0,0,142,30,4,4,0,0);
	offVisualBtn.set_y(offVisualBtn.set_x(1));
	unselectedTab.addChild(outline);
	unselectedTab.addChild(offVisualBtn);
	this.set_onVisual(unselectedTab);
	offButtonConfig.colorUp = 5685472;
	offButtonConfig.colorOver = 5685472;
	offButtonConfig.colorDown = 5685472;
	offButtonConfig.height = 28;
	offButtonConfig.labelUp = { text : name, fontSize : 13, align : 3, color : 16777215};
	offButtonConfig.labelOver = { text : name, fontSize : 13, align : 3, color : 16777215};
	this.set_offVisual(new agario_views_controls_FlatButton(offButtonConfig));
};
$hxClasses["agario.module.shop.components.CategoryTab"] = agario_module_shop_components_CategoryTab;
agario_module_shop_components_CategoryTab.__name__ = ["agario","module","shop","components","CategoryTab"];
agario_module_shop_components_CategoryTab.__super__ = oaktree_ext_ui_controls_TabItem;
agario_module_shop_components_CategoryTab.prototype = $extend(oaktree_ext_ui_controls_TabItem.prototype,{
	__class__: agario_module_shop_components_CategoryTab
});
var oaktree_ext_ui_controls_Button = function() {
	this._rotation = 0;
	this.rotationAnchorY = 0;
	this.rotationAnchorX = 0;
	openfl_display_Sprite.call(this);
	this.mouseChildren = false;
	this.hasFocus = false;
	this.buttonMode = this.mouseEnabled = true;
	this.statesContainer = new openfl_display_Sprite();
	this.statesContainer.set_name("button_container");
	this.addChild(this.statesContainer);
	this.initializeState(this.upState);
	this.initializeState(this.overState);
	this.initializeState(this.downState);
	this.initializeState(this.disabledState);
	this.updateState();
	this.resize();
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["oaktree.ext.ui.controls.Button"] = oaktree_ext_ui_controls_Button;
oaktree_ext_ui_controls_Button.__name__ = ["oaktree","ext","ui","controls","Button"];
oaktree_ext_ui_controls_Button.__super__ = openfl_display_Sprite;
oaktree_ext_ui_controls_Button.prototype = $extend(openfl_display_Sprite.prototype,{
	rotationAnchorX: null
	,rotationAnchorY: null
	,_rotation: null
	,statesContainer: null
	,upState: null
	,downState: null
	,overState: null
	,disabledState: null
	,data: null
	,_currentState: null
	,get_currentState: function() {
		return this._currentState;
	}
	,set_currentState: function(value) {
		if(this._currentState != value) {
			if(this._currentState != null) this.statesContainer.removeChild(this._currentState);
			this._currentState = value;
			if(value != null) this.statesContainer.addChild(value);
		}
		this.update_layout();
		return value;
	}
	,get_enabled: function() {
		return this.mouseEnabled;
	}
	,set_enabled: function(value) {
		this.mouseEnabled = value;
		this.updateState();
		return value;
	}
	,selected: null
	,set_selected: function(value) {
		this.selected = value;
		this.updateState();
		return value;
	}
	,hasFocus: null
	,mouseIsDown: null
	,mouseIsOver: null
	,upOnMouseOut: null
	,initializeState: function(state) {
		if(state != null && state.parent != null && state != this._currentState) state.parent.removeChild(state);
	}
	,updateState: function() {
		var state = null;
		if(!this.get_enabled()) state = this.disabledState; else if(this.selected) state = this.downState; else if(this.mouseIsDown && (this.mouseIsOver || !this.upOnMouseOut)) state = this.downState; else if(this.hasFocus && this.mouseIsDown) state = this.overState; else if(this.mouseIsOver) state = this.overState;
		if(state == null) state = this.upState;
		this.set_currentState(state);
	}
	,resize: function() {
		if(this.upState != this.get_currentState()) this.statesContainer.addChild(this.upState);
		var bounds = this.upState.getBounds(this);
		if(this.upState != this.get_currentState()) this.statesContainer.removeChild(this.upState);
		this.update_layout();
	}
	,setRotation: function(value) {
		this._rotation = value;
		openfl_display_Sprite.prototype.set_rotation.call(this,0);
		this.statesContainer.set_rotation(value);
		this.update_layout();
		return value;
	}
	,set_rotation: function(value) {
		return this.setRotation(value);
	}
	,set_rotationAnchorX: function(value) {
		this.rotationAnchorX = value;
		this.update_layout();
		return value;
	}
	,set_rotationAnchorY: function(value) {
		this.rotationAnchorY = value;
		this.update_layout();
		return value;
	}
	,setRotationAnchor: function(_x,_y) {
		this.set_rotationAnchorX(_x);
		this.set_rotationAnchorY(_y);
		this.update_layout();
	}
	,anchorCenter: function() {
		this.setRotationAnchor(this.get_width() / 2,this.get_height() / 2);
	}
	,update_layout: function() {
		if(this.upState != null) {
			this.upState.set_x(-this.rotationAnchorX);
			this.upState.set_y(-this.rotationAnchorY);
		}
		if(this.overState != null) {
			this.overState.set_x(-this.rotationAnchorX);
			this.overState.set_y(-this.rotationAnchorY);
		}
		if(this.downState != null) {
			this.downState.set_x(-this.rotationAnchorX);
			this.downState.set_y(-this.rotationAnchorY);
		}
		if(this.disabledState != null) {
			this.disabledState.set_x(-this.rotationAnchorX);
			this.disabledState.set_y(-this.rotationAnchorY);
		}
		this.statesContainer.set_x(this.rotationAnchorX);
		this.statesContainer.set_y(this.rotationAnchorY);
	}
	,onRollOver: function(e) {
		this.mouseIsOver = !e.buttonDown || this.mouseIsDown;
		this.updateState();
	}
	,onRollOut: function(e) {
		this.mouseIsOver = false;
		this.updateState();
	}
	,onMouseDown: function(e) {
		this.mouseIsDown = true;
		this.updateState();
		this.stage.addEventListener("mouseUp",$bind(this,this.onStageMouseUp));
	}
	,onFocusIn: function(e) {
		this.hasFocus = true;
		this.updateState();
	}
	,onFocusOut: function(e) {
		this.hasFocus = false;
		this.updateState();
	}
	,onStageMouseUp: function(e) {
		this.mouseIsDown = false;
		this.updateState();
		this.stage.removeEventListener("mouseUp",$bind(this,this.onStageMouseUp));
	}
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.addEventListener("mouseOver",$bind(this,this.onRollOver));
		this.addEventListener("mouseOut",$bind(this,this.onRollOut));
		this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.addEventListener("focusIn",$bind(this,this.onFocusIn));
		this.addEventListener("focusOut",$bind(this,this.onFocusOut));
		this.mouseIsDown = this.mouseIsOver = this.hasFocus = false;
		this.updateState();
	}
	,onRemovedFromStage: function(e) {
		this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.removeEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.removeEventListener("rollOver",$bind(this,this.onRollOver));
		this.removeEventListener("rollOut",$bind(this,this.onRollOut));
		this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.addEventListener("focusIn",$bind(this,this.onFocusIn));
		this.addEventListener("focusOut",$bind(this,this.onFocusOut));
		this.stage.removeEventListener("mouseUp",$bind(this,this.onStageMouseUp));
	}
	,dispose: function() {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.removeEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.removeEventListener("rollOver",$bind(this,this.onRollOver));
		this.removeEventListener("rollOut",$bind(this,this.onRollOut));
		this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.removeEventListener("focusIn",$bind(this,this.onFocusIn));
		this.removeEventListener("focusOut",$bind(this,this.onFocusOut));
		if(this.stage != null) this.stage.removeEventListener("mouseUp",$bind(this,this.onStageMouseUp));
	}
	,delayedEnable: function(pTime) {
		if(pTime == null) pTime = 1.0;
		var _g = this;
		motion_Actuate.timer(pTime).onComplete(function() {
			_g.set_enabled(true);
		});
	}
	,__class__: oaktree_ext_ui_controls_Button
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_selected:"set_selected",set_enabled:"set_enabled",get_enabled:"get_enabled",set_currentState:"set_currentState",get_currentState:"get_currentState",set_rotationAnchorY:"set_rotationAnchorY",set_rotationAnchorX:"set_rotationAnchorX"})
});
var agario_module_shop_components_PaginationGotoButton = function(asset_id) {
	var assetBitmapData = Core.get_assets().getTexture(asset_id).get_bitmapData();
	var assetOverData = assetBitmapData.clone();
	var assetDisabledData = assetBitmapData.clone();
	var rc = 0.333333333333333315;
	var gc = 0.333333333333333315;
	var bc = 0.333333333333333315;
	assetDisabledData.applyFilter(assetDisabledData,assetDisabledData.rect,new openfl_geom_Point(),new openfl_filters_ColorMatrixFilter([rc,gc,bc,0,0,rc,gc,bc,0,0,rc,gc,bc,0,0,0,0,0,1,0]));
	this.upState = new openfl_display_Bitmap(assetBitmapData);
	this.overState = new openfl_display_Bitmap(assetOverData);
	this.downState = new openfl_display_Bitmap(assetBitmapData);
	this.disabledState = new openfl_display_Bitmap(assetDisabledData);
	this.upState.set_alpha(this.downState.set_alpha(0.8));
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.module.shop.components.PaginationGotoButton"] = agario_module_shop_components_PaginationGotoButton;
agario_module_shop_components_PaginationGotoButton.__name__ = ["agario","module","shop","components","PaginationGotoButton"];
agario_module_shop_components_PaginationGotoButton.__super__ = oaktree_ext_ui_controls_Button;
agario_module_shop_components_PaginationGotoButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_module_shop_components_PaginationGotoButton
});
var agario_module_shop_components_PaginationGotoFirstButton = function() {
	agario_module_shop_components_PaginationGotoButton.call(this,"fast_play");
};
$hxClasses["agario.module.shop.components.PaginationGotoFirstButton"] = agario_module_shop_components_PaginationGotoFirstButton;
agario_module_shop_components_PaginationGotoFirstButton.__name__ = ["agario","module","shop","components","PaginationGotoFirstButton"];
agario_module_shop_components_PaginationGotoFirstButton.__super__ = agario_module_shop_components_PaginationGotoButton;
agario_module_shop_components_PaginationGotoFirstButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype,{
	__class__: agario_module_shop_components_PaginationGotoFirstButton
});
var agario_module_shop_components_PaginationGotoLastButton = function() {
	agario_module_shop_components_PaginationGotoButton.call(this,"fast_play");
	this.set_rotationAnchorX(this.get_width() / 2);
	this.set_rotationAnchorY(this.get_height() / 2);
	this.set_rotation(180);
};
$hxClasses["agario.module.shop.components.PaginationGotoLastButton"] = agario_module_shop_components_PaginationGotoLastButton;
agario_module_shop_components_PaginationGotoLastButton.__name__ = ["agario","module","shop","components","PaginationGotoLastButton"];
agario_module_shop_components_PaginationGotoLastButton.__super__ = agario_module_shop_components_PaginationGotoButton;
agario_module_shop_components_PaginationGotoLastButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype,{
	__class__: agario_module_shop_components_PaginationGotoLastButton
});
var agario_module_shop_components_PaginationGotoPreviousButton = function() {
	agario_module_shop_components_PaginationGotoButton.call(this,"play");
};
$hxClasses["agario.module.shop.components.PaginationGotoPreviousButton"] = agario_module_shop_components_PaginationGotoPreviousButton;
agario_module_shop_components_PaginationGotoPreviousButton.__name__ = ["agario","module","shop","components","PaginationGotoPreviousButton"];
agario_module_shop_components_PaginationGotoPreviousButton.__super__ = agario_module_shop_components_PaginationGotoButton;
agario_module_shop_components_PaginationGotoPreviousButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype,{
	__class__: agario_module_shop_components_PaginationGotoPreviousButton
});
var agario_module_shop_components_PaginationGotoNextButton = function() {
	agario_module_shop_components_PaginationGotoButton.call(this,"play");
	this.set_rotationAnchorX(this.get_width() / 2);
	this.set_rotationAnchorY(this.get_height() / 2);
	this.set_rotation(180);
};
$hxClasses["agario.module.shop.components.PaginationGotoNextButton"] = agario_module_shop_components_PaginationGotoNextButton;
agario_module_shop_components_PaginationGotoNextButton.__name__ = ["agario","module","shop","components","PaginationGotoNextButton"];
agario_module_shop_components_PaginationGotoNextButton.__super__ = agario_module_shop_components_PaginationGotoButton;
agario_module_shop_components_PaginationGotoNextButton.prototype = $extend(agario_module_shop_components_PaginationGotoButton.prototype,{
	__class__: agario_module_shop_components_PaginationGotoNextButton
});
var agario_views_controls_FlatButton = function(_opts) {
	if(_opts.labelOver == null) _opts.labelOver = _opts.labelUp;
	_opts.labelOver;
	if(_opts.labelDown == null) _opts.labelDown = _opts.labelUp;
	_opts.labelDown;
	if(_opts.labelDown.text == null) _opts.labelDown.text = _opts.labelUp.text;
	_opts.labelDown.text;
	if(_opts.labelOver.text == null) _opts.labelOver.text = _opts.labelUp.text;
	_opts.labelOver.text;
	if(_opts.topLeftRadius == null) _opts.topLeftRadius = 4.0;
	_opts.topLeftRadius;
	if(_opts.topRightRadius == null) _opts.topRightRadius = 4.0;
	_opts.topRightRadius;
	if(_opts.bottomLeftRadius == null) _opts.bottomLeftRadius = 4.0;
	_opts.bottomLeftRadius;
	if(_opts.bottomRightRadius == null) _opts.bottomRightRadius = 4.0;
	_opts.bottomRightRadius;
	if(_opts.colorUp == null) _opts.colorUp = 6349312;
	_opts.colorUp;
	if(_opts.colorDown == null) _opts.colorDown = 4760069;
	_opts.colorDown;
	if(_opts.colorOver == null) _opts.colorOver = 2446594;
	_opts.colorOver;
	if(_opts.borderWeight == null) _opts.borderWeight = 0;
	_opts.borderWeight;
	if(_opts.borderColor == null) _opts.borderColor = 0;
	_opts.borderColor;
	if(_opts.borderWeightOver == null) _opts.borderWeightOver = 0;
	_opts.borderWeightOver;
	if(_opts.borderColorOver == null) _opts.borderColorOver = 0;
	_opts.borderColorOver;
	if(_opts.borderWeightDown == null) _opts.borderWeightDown = 0;
	_opts.borderWeightDown;
	if(_opts.borderColorDown == null) _opts.borderColorDown = 0;
	_opts.borderColorDown;
	var stateUp = new openfl_display_Sprite();
	var stateOver = new openfl_display_Sprite();
	var stateDown = new openfl_display_Sprite();
	if(_opts.radius != null) _opts.topLeftRadius = _opts.topRightRadius = _opts.bottomLeftRadius = _opts.bottomRightRadius = _opts.radius;
	this.labelUp = new oaktree_ext_ui_Label(_opts.labelUp);
	this.labelOver = new oaktree_ext_ui_Label(_opts.labelOver);
	this.labelDown = new oaktree_ext_ui_Label(_opts.labelDown);
	if(this.labelUp.get_textWidth() > _opts.width) this.labelUp.set_width(this.labelOver.set_width(this.labelDown.set_width(_opts.width)));
	var upBackground = new openfl_display_Shape();
	if(_opts.borderWeight > 0) upBackground.get_graphics().lineStyle(_opts.borderWeight,_opts.borderColor,1);
	upBackground.get_graphics().beginFill(_opts.colorUp);
	oaktree_utils_MCGraphics.drawRoundRectComplex(upBackground.get_graphics(),0,0,_opts.width,_opts.height,_opts.topLeftRadius,_opts.topRightRadius,_opts.bottomLeftRadius,_opts.bottomRightRadius);
	upBackground.get_graphics().endFill();
	stateUp.addChild(upBackground);
	stateUp.addChild(this.labelUp);
	var overBackground = new openfl_display_Shape();
	if(_opts.borderWeightOver > 0) overBackground.get_graphics().lineStyle(_opts.borderWeightOver,_opts.borderColor,1);
	overBackground.get_graphics().beginFill(_opts.colorOver);
	oaktree_utils_MCGraphics.drawRoundRectComplex(overBackground.get_graphics(),0,0,_opts.width,_opts.height,_opts.topLeftRadius,_opts.topRightRadius,_opts.bottomLeftRadius,_opts.bottomRightRadius);
	overBackground.get_graphics().endFill();
	stateOver.addChild(overBackground);
	stateOver.addChild(this.labelOver);
	var downBackground = new openfl_display_Shape();
	if(_opts.borderWeightDown > 0) downBackground.get_graphics().lineStyle(_opts.borderWeightDown,_opts.borderColorDown,1);
	downBackground.get_graphics().beginFill(_opts.colorDown);
	oaktree_utils_MCGraphics.drawRoundRectComplex(downBackground.get_graphics(),0,0,_opts.width,_opts.height,_opts.topLeftRadius,_opts.topRightRadius,_opts.bottomLeftRadius,_opts.bottomRightRadius);
	downBackground.get_graphics().endFill();
	stateDown.addChild(downBackground);
	stateDown.addChild(this.labelDown);
	this.upState = this.disabledState = stateUp;
	this.overState = stateOver;
	this.downState = stateDown;
	this.labelOver.set_y(this.labelUp.set_y(this.labelDown.set_y((_opts.height - this.labelUp.get_height()) / 2)));
	this.labelOver.set_x(this.labelUp.set_x(this.labelDown.set_x((_opts.width - this.labelUp.get_width()) / 2)));
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.views.controls.FlatButton"] = agario_views_controls_FlatButton;
agario_views_controls_FlatButton.__name__ = ["agario","views","controls","FlatButton"];
agario_views_controls_FlatButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_FlatButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	labelUp: null
	,labelOver: null
	,labelDown: null
	,__class__: agario_views_controls_FlatButton
});
var oaktree_ext_ui_controls_IPaginationControl = function() { };
$hxClasses["oaktree.ext.ui.controls.IPaginationControl"] = oaktree_ext_ui_controls_IPaginationControl;
oaktree_ext_ui_controls_IPaginationControl.__name__ = ["oaktree","ext","ui","controls","IPaginationControl"];
oaktree_ext_ui_controls_IPaginationControl.prototype = {
	set_selected: null
	,selected: null
	,setText: null
	,__class__: oaktree_ext_ui_controls_IPaginationControl
	,__properties__: {set_selected:"set_selected"}
};
var agario_module_shop_components_PaginationPageButton = function() {
	var pageButtonConfig = { labelUp : { text : "0", fontSize : 12, align : 0, color : 16777215}, labelDown : { text : "0", fontSize : 12, align : 0, color : 2400453}, colorUp : 5685472, colorOver : 2400453, colorDown : 16777215, width : 24.0, height : 20.0, radius : 5, borderWeightDown : 2, borderColorDown : 5685472};
	agario_views_controls_FlatButton.call(this,pageButtonConfig);
};
$hxClasses["agario.module.shop.components.PaginationPageButton"] = agario_module_shop_components_PaginationPageButton;
agario_module_shop_components_PaginationPageButton.__name__ = ["agario","module","shop","components","PaginationPageButton"];
agario_module_shop_components_PaginationPageButton.__interfaces__ = [oaktree_ext_ui_controls_IPaginationControl];
agario_module_shop_components_PaginationPageButton.__super__ = agario_views_controls_FlatButton;
agario_module_shop_components_PaginationPageButton.prototype = $extend(agario_views_controls_FlatButton.prototype,{
	setText: function(value) {
		this.labelUp.set_text(this.labelOver.set_text(this.labelDown.set_text(value)));
		this.labelUp.set_width(this.labelOver.set_width(this.labelDown.set_width(25)));
		this.labelUp.set_x(this.labelOver.set_x(this.labelDown.set_x(0)));
		this.labelUp.set_y(this.labelOver.set_y(this.labelDown.set_y(1)));
		this.labelUp.set_x(this.labelOver.set_x(this.labelDown.set_x(-1)));
		return value;
	}
	,__class__: agario_module_shop_components_PaginationPageButton
});
var agario_module_shop_components_ShopNextArrow = function() {
	var arrowBitmapData = Core.get_assets().getTexture("arrow").get_bitmapData();
	var arrowOverData = arrowBitmapData.clone();
	var arrowDisabledData = arrowBitmapData.clone();
	var rc = 0.333333333333333315;
	var gc = 0.333333333333333315;
	var bc = 0.333333333333333315;
	arrowDisabledData.applyFilter(arrowDisabledData,arrowDisabledData.rect,new openfl_geom_Point(),new openfl_filters_ColorMatrixFilter([rc,gc,bc,0,0,rc,gc,bc,0,0,rc,gc,bc,0,0,0,0,0,1,0]));
	this.upState = new openfl_display_Bitmap(arrowBitmapData);
	this.overState = new openfl_display_Bitmap(arrowOverData);
	this.downState = new openfl_display_Bitmap(arrowBitmapData);
	this.disabledState = new openfl_display_Bitmap(arrowDisabledData);
	this.upState.set_alpha(this.downState.set_alpha(0.8));
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.module.shop.components.ShopNextArrow"] = agario_module_shop_components_ShopNextArrow;
agario_module_shop_components_ShopNextArrow.__name__ = ["agario","module","shop","components","ShopNextArrow"];
agario_module_shop_components_ShopNextArrow.__super__ = oaktree_ext_ui_controls_Button;
agario_module_shop_components_ShopNextArrow.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_module_shop_components_ShopNextArrow
});
var oaktree_ext_ui_Control = function(_opts) {
	this.updating = false;
	this.maxHeight = 0;
	this.minHeight = 0;
	this.maxWidth = 0;
	this.minWidth = 0;
	openfl_display_Sprite.call(this);
	this._options = _opts;
	this.onCreate = new msignal_Signal0();
	this.onBounds = new msignal_Signal0();
	this.set_name((function($this) {
		var $r;
		if($this._options.name == null) $this._options.name = "control";
		$r = $this._options.name;
		return $r;
	}(this)));
	this.set_minWidth((function($this) {
		var $r;
		if($this._options.minWidth == null) $this._options.minWidth = 0;
		$r = $this._options.minWidth;
		return $r;
	}(this)));
	this.set_maxWidth((function($this) {
		var $r;
		if($this._options.maxWidth == null) $this._options.maxWidth = 0;
		$r = $this._options.maxWidth;
		return $r;
	}(this)));
	this.set_minHeight((function($this) {
		var $r;
		if($this._options.minHeight == null) $this._options.minHeight = 0;
		$r = $this._options.minHeight;
		return $r;
	}(this)));
	this.set_maxHeight((function($this) {
		var $r;
		if($this._options.maxHeight == null) $this._options.maxHeight = 0;
		$r = $this._options.maxHeight;
		return $r;
	}(this)));
	this.set_x((function($this) {
		var $r;
		if($this._options.x == null) $this._options.x = 0;
		$r = $this._options.x;
		return $r;
	}(this)));
	this.set_y((function($this) {
		var $r;
		if($this._options.y == null) $this._options.y = 0;
		$r = $this._options.y;
		return $r;
	}(this)));
	this.set_w((function($this) {
		var $r;
		if($this._options.w == null) $this._options.w = 0;
		$r = $this._options.w;
		return $r;
	}(this)));
	this.set_h((function($this) {
		var $r;
		if($this._options.h == null) $this._options.h = 0;
		$r = $this._options.h;
		return $r;
	}(this)));
	this.children_bounds = { x : 0, y : 0, right : 0, bottom : 0, real_x : 0, real_y : 0, real_w : 0, real_h : 0};
	this.onCreate.dispatch();
};
$hxClasses["oaktree.ext.ui.Control"] = oaktree_ext_ui_Control;
oaktree_ext_ui_Control.__name__ = ["oaktree","ext","ui","Control"];
oaktree_ext_ui_Control.__super__ = openfl_display_Sprite;
oaktree_ext_ui_Control.prototype = $extend(openfl_display_Sprite.prototype,{
	w: null
	,h: null
	,minWidth: null
	,maxWidth: null
	,minHeight: null
	,maxHeight: null
	,children_bounds: null
	,updating: null
	,onCreate: null
	,onBounds: null
	,_options: null
	,set_size: function(_w,_h) {
		this.updating = true;
		var _dw = _w - this.get_x();
		var _dh = _h - this.h;
		this.set_w(_w);
		this.set_h(_h);
		this.updating = false;
		this.bounds_changed(0,0,_dw,_dh);
	}
	,get_right: function() {
		return this.get_x() + this.w;
	}
	,get_bottom: function() {
		return this.get_y() + this.h;
	}
	,set_minWidth: function(value) {
		this.minWidth = value;
		if(this.w < this.minWidth) this.set_w(this.minWidth);
		return this.minWidth;
	}
	,set_minHeight: function(value) {
		this.minHeight = value;
		if(this.h < this.minHeight) this.set_h(this.minHeight);
		return this.minHeight;
	}
	,set_maxWidth: function(value) {
		this.maxWidth = value;
		if(this.w > this.maxWidth) this.set_w(this.maxWidth);
		return this.maxWidth;
	}
	,set_maxHeight: function(value) {
		this.maxHeight = value;
		if(this.h > this.maxHeight) this.set_h(this.maxHeight);
		return this.maxHeight;
	}
	,set_w: function(_w) {
		if(_w < this.minWidth) _w = this.minWidth;
		if(_w > this.maxWidth && this.maxWidth != 0) _w = this.maxWidth;
		var _dw = _w - this.w;
		this.w = _w;
		this.bounds_changed(0,0,_dw);
		return this.w;
	}
	,set_h: function(_h) {
		if(_h < this.minHeight) _h = this.minHeight;
		if(_h > this.maxHeight && this.maxHeight != 0) _h = this.maxHeight;
		var _dh = _h - this.h;
		this.h = _h;
		this.bounds_changed(0,0,0,_dh);
		return this.h;
	}
	,get_children_bounds: function() {
		if(this.get_numChildren() == 0) {
			this.children_bounds.x = 0;
			this.children_bounds.y = 0;
			this.children_bounds.right = 0;
			this.children_bounds.bottom = 0;
			this.children_bounds.real_x = 0;
			this.children_bounds.real_y = 0;
			this.children_bounds.real_w = 0;
			this.children_bounds.real_h = 0;
			return this.children_bounds;
		}
		var _first_child = this.getChildAt(0);
		var _current_x = _first_child.get_x();
		var _current_y = _first_child.get_y();
		var _current_r = _first_child.get_x() + _first_child.get_width();
		var _current_b = _first_child.get_y() + _first_child.get_height();
		var _real_x = _first_child.get_x();
		var _real_y = _first_child.get_y();
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var idx = _g1++;
			var child = this.getChildAt(idx);
			_current_x = Math.min(child.get_x(),_current_x);
			_current_y = Math.min(child.get_y(),_current_y);
			_current_r = Math.max(_current_r,child.get_x() + child.get_width());
			_current_b = Math.max(_current_b,child.get_y() + child.get_height());
			_real_x = Math.min(child.get_x(),_real_x);
			_real_y = Math.min(child.get_y(),_real_y);
		}
		this.children_bounds.x = _current_x;
		this.children_bounds.y = _current_y;
		this.children_bounds.right = _current_r;
		this.children_bounds.bottom = _current_b;
		this.children_bounds.real_x = _real_x;
		this.children_bounds.real_y = _real_y;
		this.children_bounds.real_w = _current_r;
		this.children_bounds.real_h = _current_b;
		return this.children_bounds;
	}
	,update_bounds: function() {
		var tBounds = this.get_children_bounds();
		this.set_w(tBounds.real_w);
		this.set_h(tBounds.real_h);
	}
	,bounds_changed: function(_dx,_dy,_dw,_dh) {
		if(_dh == null) _dh = 0.0;
		if(_dw == null) _dw = 0.0;
		if(_dy == null) _dy = 0.0;
		if(_dx == null) _dx = 0.0;
		if(this.updating) return;
		this.onBounds.dispatch();
	}
	,__class__: oaktree_ext_ui_Control
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_bottom:"get_bottom",get_right:"get_right",get_children_bounds:"get_children_bounds",set_maxHeight:"set_maxHeight",set_minHeight:"set_minHeight",set_maxWidth:"set_maxWidth",set_minWidth:"set_minWidth",set_h:"set_h",set_w:"set_w"})
});
var agario_module_shop_components_SkinElement = function(_opts) {
	this.showPrice = true;
	if(_opts.name == null) _opts.name = "skin_element." + _opts.model.purchaseId;
	_opts.name;
	_opts.w = 150;
	_opts.h = 360;
	this.item = _opts.model;
	this.options = _opts;
	oaktree_ext_ui_Control.call(this,_opts);
	this.addEventListener("addedToStage",$bind(this,this.initialize));
};
$hxClasses["agario.module.shop.components.SkinElement"] = agario_module_shop_components_SkinElement;
agario_module_shop_components_SkinElement.__name__ = ["agario","module","shop","components","SkinElement"];
agario_module_shop_components_SkinElement.__super__ = oaktree_ext_ui_Control;
agario_module_shop_components_SkinElement.prototype = $extend(oaktree_ext_ui_Control.prototype,{
	showPrice: null
	,options: null
	,title: null
	,item: null
	,data: null
	,skinCell: null
	,tooltipSpr: null
	,priceButton: null
	,initialize: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.initialize));
		this.data = this.item;
		var background = new openfl_display_Shape();
		background.set_y(2);
		if(this.options.model.get_inUse()) {
			background.get_graphics().lineStyle(2,12907007,1);
			background.get_graphics().beginFill(12907007,1);
		} else {
			background.get_graphics().lineStyle(2,12566463,1);
			background.get_graphics().beginFill(16777215,1);
		}
		background.get_graphics().drawRoundRect(0,0,this.w,this.h - 80,15,15);
		background.get_graphics().endFill();
		this.addChild(background);
		this.title = new oaktree_ext_ui_Label({ text : this.options.model.get_title(), fontSize : 14});
		this.addChild(this.title);
		this.title.set_x((this.w - this.title.get_width()) * 0.5);
		this.title.set_y(10);
		var skinImage = this.options.model.gamePlayInfo.image;
		this.skinCell = new agario_module_shop_components_SkinnedCell({ bitmap : skinImage, w : this.options.w - 20, h : this.options.w - 20, borderColor : this.options.model.gamePlayInfo.get_cellColor()});
		this.addChild(this.skinCell);
		this.skinCell.set_x((this.w - this.skinCell.get_width()) * 0.5);
		this.skinCell.set_y((background.get_height() - this.skinCell.get_height()) / 2);
		var icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
		var btnColors = [6349312,16777215,5685472,12961221];
		var btnOverColors = [5622016,16777215,4096417,12961221];
		var textColors = [16777215,5685472,16777215,10066329];
		var textOverColors = [16777215,5685472,16777215,10066329];
		var colorIndex = 0;
		var btnLabel = Std.string(this.options.model.price);
		var showIcon = true;
		var showOutline = false;
		if(this.options.model.get_owned() == true) {
			showIcon = false;
			colorIndex = 2;
			btnLabel = oaktree_ext_localization_I18n.text("menu_shop_use");
			if(this.options.model.get_inUse() == true) {
				colorIndex = 1;
				showOutline = true;
				btnLabel = oaktree_ext_localization_I18n.text("menu_shop_cancel");
			}
			if(Core.ui.state.isPlayerAlive) colorIndex = 3;
		}
		if(this.options.model.purchaseId == "") {
			showIcon = false;
			colorIndex = 2;
			btnLabel = oaktree_ext_localization_I18n.text("menu_shop_skins_node_placeholder");
		}
		if(this.showPrice) {
			this.priceButton = new agario_views_controls_ColorButton({ color : btnColors[colorIndex], overColor : btnOverColors[colorIndex], text : btnLabel, textColorOver : textOverColors[colorIndex], textColor : textColors[colorIndex], icon : showIcon?icon:null, w : background.get_width() - 1, h : 40, fontSize : 14, bold : true, showOutline : showOutline, outlineColor : textColors[colorIndex]});
			this.priceButton.buttonMode = true;
			this.priceButton.data = this.item;
			if(Core.ui.state.isPlayerAlive && this.options.model.get_owned()) this.priceButton.set_alpha(0.5); else this.priceButton.addEventListener("click",$bind(this,this.onClick));
			this.addChild(this.priceButton);
			this.priceButton.set_y(background.get_y() + background.get_height() + 10);
			this.priceButton.addEventListener("mouseOver",$bind(this,this.onOver));
			this.priceButton.addEventListener("mouseOut",$bind(this,this.onOut));
			this.addChild(this.priceButton);
		} else {
			var icon1 = new openfl_display_Bitmap(Core.get_assets().getTexture("locket").get_bitmapData());
			var txtOptions = { text : "LEVEL " + this.options.model.availableAtLevel, fontSize : 16, align : 3, color : 0, bold : true};
			var iconLabel = new oaktree_ext_ui_controls_IconLabel(txtOptions,icon1,"left",5,-2);
			this.addChild(iconLabel);
			iconLabel.set_y(background.get_y() + background.get_height() + 20);
			iconLabel.set_x((background.get_width() - iconLabel.get_width()) / 2);
			this.skinCell.set_alpha(0.5);
			this.title.set_alpha(0.5);
			this.title.set_alpha(0.5);
		}
		this.update_bounds();
	}
	,onOver: function(e) {
		if(Core.ui.state.isPlayerAlive && this.item.get_owned()) this.showTooltip(); else this.skinCell.set_alpha(0.8);
	}
	,onOut: function(e) {
		if(Core.ui.state.isPlayerAlive && this.item.get_owned()) this.hideTooltip(); else this.skinCell.set_alpha(1);
	}
	,showTooltip: function() {
		this.tooltipSpr = new openfl_display_Sprite();
		var lbl = new oaktree_ext_ui_Label({ text : "Finish the match to change skin.", fontSize : 12, width : 120, align : 0, color : 16777215});
		this.tooltipSpr.addChild(lbl);
		lbl.set_x((this.tooltipSpr.get_width() - lbl.get_width()) / 2);
		lbl.set_y(10);
		this.tooltipSpr.get_graphics().beginFill(7851238);
		this.tooltipSpr.get_graphics().drawRoundRect(0,0,120,50,15,15);
		this.tooltipSpr.get_graphics().endFill();
		this.addChild(this.tooltipSpr);
		var triangle = new openfl_display_Sprite();
		triangle.get_graphics().beginFill(7851238);
		triangle.get_graphics().moveTo(0,0);
		triangle.get_graphics().lineTo(20,0);
		triangle.get_graphics().lineTo(10,15);
		triangle.get_graphics().lineTo(0,0);
		triangle.get_graphics().endFill();
		triangle.set_x((this.tooltipSpr.get_width() - triangle.get_width()) / 2);
		triangle.set_y(this.tooltipSpr.get_height() - 2);
		this.tooltipSpr.addChild(triangle);
		this.tooltipSpr.set_x((this.priceButton.get_width() - this.tooltipSpr.get_width()) / 2);
		this.tooltipSpr.set_y(this.priceButton.get_y() - this.tooltipSpr.get_height() - 10);
	}
	,hideTooltip: function() {
		this.removeChild(this.tooltipSpr);
	}
	,onClick: function(e) {
		var btn = e.currentTarget;
		btn.set_enabled(false);
		if(Core.user.isGuest) btn.delayedEnable();
		var data = e.currentTarget.data;
		if(data != null) {
			if(data.get_owned() == true && data.get_inUse() == false) this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::USE",data)); else if(data.get_owned() == false) this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY",data)); else if(data.get_owned() == true && data.get_inUse() == true) this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::UNEQUIP",data));
		}
	}
	,__class__: agario_module_shop_components_SkinElement
});
var agario_module_shop_components_SkinnedCell = function(_opts) {
	openfl_display_Sprite.call(this);
	if(_opts.borderSize == null) _opts.borderSize = 4;
	_opts.borderSize;
	this.options = _opts;
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["agario.module.shop.components.SkinnedCell"] = agario_module_shop_components_SkinnedCell;
agario_module_shop_components_SkinnedCell.__name__ = ["agario","module","shop","components","SkinnedCell"];
agario_module_shop_components_SkinnedCell.__super__ = openfl_display_Sprite;
agario_module_shop_components_SkinnedCell.prototype = $extend(openfl_display_Sprite.prototype,{
	options: null
	,container: null
	,cellMask: null
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.container = new openfl_display_Sprite();
		this.addChild(this.container);
		var filler = new openfl_display_Sprite();
		filler.get_graphics().beginFill(16777215);
		filler.get_graphics().drawRect(0,0,this.options.w,this.options.h);
		filler.get_graphics().endFill();
		this.container.addChild(filler);
		this.cellMask = new openfl_display_Shape();
		this.cellMask.get_graphics().beginFill(16777215,1);
		this.cellMask.get_graphics().drawCircle(1,0,this.get_width() / 2);
		this.cellMask.get_graphics().endFill();
		this.cellMask.set_x(this.options.w / 2);
		this.cellMask.set_y(this.options.h / 2);
		this.drawOutline(Std.parseInt(this.options.borderColor),this.options.borderSize);
		if(this.options.bitmap != null) {
			var configService = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
			var idx = this.options.bitmap.lastIndexOf(".png");
			if(idx != -1) this.options.bitmap = HxOverrides.substr(this.options.bitmap,0,idx);
			var imageUrl = configService.getConfigUrl("" + this.options.bitmap + ".png");
			var skinImage = new agario_views_components_ImageWrap({ url : imageUrl, w : this.options.w, h : this.options.h});
			this.container.addChild(skinImage);
			this.container.addChild(this.cellMask);
			this.container.set_mask(this.cellMask);
			skinImage.addEventListener("complete",function(e1) {
				motion_Actuate.tween(e1.currentTarget,0.6,{ alpha : 1});
			});
		}
	}
	,drawOutline: function(color,borderSize) {
		var outline = new openfl_display_Shape();
		outline.get_graphics().lineStyle(this.options.borderSize,color,1);
		outline.get_graphics().drawCircle(1,0,this.get_width() / 2);
		outline.get_graphics().endFill();
		outline.set_x(this.options.w / 2);
		outline.set_y(this.options.h / 2);
		this.addChild(outline);
	}
	,__class__: agario_module_shop_components_SkinnedCell
});
var agario_module_shop_components_SlotControl = function(totalSlots,filled) {
	this.S_slotFilled = new msignal_Signal1();
	this.S_slotsFull = new msignal_Signal0();
	this.paused = false;
	this.slotQueue = 0;
	this.highlightColor = 16777215;
	this.filledColor = 16507144;
	this.emptyColor = 14079702;
	oaktree_ext_ui_Control.call(this,{ w : 150, h : 360});
	this.filledArray = [];
	this.highlightArray = [];
	this.filled = filled;
	this.totalSlots = totalSlots;
	this.addEventListener("addedToStage",$bind(this,this.initialize));
};
$hxClasses["agario.module.shop.components.SlotControl"] = agario_module_shop_components_SlotControl;
agario_module_shop_components_SlotControl.__name__ = ["agario","module","shop","components","SlotControl"];
agario_module_shop_components_SlotControl.__super__ = oaktree_ext_ui_Control;
agario_module_shop_components_SlotControl.prototype = $extend(oaktree_ext_ui_Control.prototype,{
	totalSlots: null
	,filled: null
	,emptyColor: null
	,filledColor: null
	,highlightColor: null
	,filledArray: null
	,slotQueue: null
	,paused: null
	,highlightArray: null
	,hasFinished: null
	,get_hasFinished: function() {
		return this.slotQueue <= 0;
	}
	,S_slotsFull: null
	,S_slotFilled: null
	,setSlotActive: function() {
		this.filledArray[this.filled].set_visible(true);
		this.filledArray[this.filled].set_alpha(1);
		this.filled++;
	}
	,addSlotToQueue: function() {
		this.slotQueue++;
	}
	,pauseProcess: function() {
		this.paused = true;
	}
	,resumeProcess: function() {
		this.paused = false;
		this.process();
	}
	,process: function() {
		if(!this.paused) this.fillSlot();
	}
	,initialize: function(e) {
		this.slotQueue = 0;
		this.removeEventListener("addedToStage",$bind(this,this.initialize));
		this.drawEmptySlots();
		this.drawHighlightSlots();
		this.drawFilledSlots();
	}
	,fillSlot: function(delay) {
		if(delay == null) delay = 0;
		if(this.slotQueue > 0) {
			this.S_slotFilled.dispatch(this.filled);
			this.filledArray[this.filled].set_visible(true);
			this.filledArray[this.filled].set_alpha(0);
			motion_Actuate.tween(this.highlightArray[this.filled],.5,{ alpha : 1}).delay(delay).onComplete($bind(this,this.fillSlotResult));
			motion_Actuate.tween(this.filledArray[this.filled],.5,{ alpha : 1}).delay(delay + 0.3);
		}
	}
	,drawEmptySlots: function() {
		var _g1 = 0;
		var _g = this.totalSlots;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.createSlot(this.emptyColor);
			s.set_x(20 * i);
			this.addChild(s);
		}
	}
	,drawFilledSlots: function() {
		var _g1 = 0;
		var _g = this.totalSlots;
		while(_g1 < _g) {
			var i = _g1++;
			var s = this.createSlot(this.filledColor);
			s.set_x(20 * i);
			this.addChild(s);
			s.set_visible(false);
			this.filledArray.push(s);
		}
	}
	,drawHighlightSlots: function() {
		var _g1 = 0;
		var _g = this.totalSlots;
		while(_g1 < _g) {
			var i = _g1++;
			var highlight = this.createSlot(this.highlightColor);
			highlight.set_x(20 * i);
			this.addChild(highlight);
			highlight.set_alpha(0);
			this.highlightArray.push(highlight);
		}
	}
	,createSlot: function(color) {
		var spr = new openfl_display_Sprite();
		spr.get_graphics().beginFill(color);
		spr.get_graphics().drawRoundRect(0,0,13,20,4,4);
		spr.get_graphics().endFill();
		return spr;
	}
	,fillSlotResult: function() {
		if(!this.paused) {
			this.slotQueue--;
			this.filled++;
			if(this.filled > this.totalSlots - 1) {
				this.S_slotsFull.dispatch();
				this.clearAllSlots();
				this.filled = 0;
			}
			if(this.slotQueue > 0) this.process(); else this.slotQueue = 0;
		}
	}
	,clearAllSlots: function() {
		var _g1 = 0;
		var _g = this.totalSlots;
		while(_g1 < _g) {
			var i = _g1++;
			this.filledArray[i].set_alpha(0);
			this.filledArray[i].set_visible(false);
			this.highlightArray[i].set_alpha(0);
		}
		this.filled = 0;
	}
	,__class__: agario_module_shop_components_SlotControl
	,__properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__,{get_hasFinished:"get_hasFinished"})
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) parameters.push(p1);
		if(p2 != null) parameters.push(p2);
		if(p3 != null) parameters.push(p3);
		if(p4 != null) parameters.push(p4);
		if(p5 != null) parameters.push(p5);
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\""; else output += " " + param + "=" + Std.string(arg);
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var oaktree_core_events_GameEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.data = data;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["oaktree.core.events.GameEvent"] = oaktree_core_events_GameEvent;
oaktree_core_events_GameEvent.__name__ = ["oaktree","core","events","GameEvent"];
oaktree_core_events_GameEvent.__super__ = openfl_events_Event;
oaktree_core_events_GameEvent.prototype = $extend(openfl_events_Event.prototype,{
	data: null
	,__class__: oaktree_core_events_GameEvent
});
var agario_module_shop_events_HintTooltipEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	oaktree_core_events_GameEvent.call(this,type,data,bubbles,cancelable);
};
$hxClasses["agario.module.shop.events.HintTooltipEvent"] = agario_module_shop_events_HintTooltipEvent;
agario_module_shop_events_HintTooltipEvent.__name__ = ["agario","module","shop","events","HintTooltipEvent"];
agario_module_shop_events_HintTooltipEvent.__super__ = oaktree_core_events_GameEvent;
agario_module_shop_events_HintTooltipEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype,{
	__class__: agario_module_shop_events_HintTooltipEvent
});
var agario_module_shop_events_ShopEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	oaktree_core_events_GameEvent.call(this,type,data,bubbles,cancelable);
};
$hxClasses["agario.module.shop.events.ShopEvent"] = agario_module_shop_events_ShopEvent;
agario_module_shop_events_ShopEvent.__name__ = ["agario","module","shop","events","ShopEvent"];
agario_module_shop_events_ShopEvent.__super__ = oaktree_core_events_GameEvent;
agario_module_shop_events_ShopEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype,{
	__class__: agario_module_shop_events_ShopEvent
});
var agario_module_shop_events_WalletEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	oaktree_core_events_GameEvent.call(this,type,data,bubbles,cancelable);
};
$hxClasses["agario.module.shop.events.WalletEvent"] = agario_module_shop_events_WalletEvent;
agario_module_shop_events_WalletEvent.__name__ = ["agario","module","shop","events","WalletEvent"];
agario_module_shop_events_WalletEvent.__super__ = oaktree_core_events_GameEvent;
agario_module_shop_events_WalletEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype,{
	__class__: agario_module_shop_events_WalletEvent
});
var oaktree_ext_security_IUser = function() { };
$hxClasses["oaktree.ext.security.IUser"] = oaktree_ext_security_IUser;
oaktree_ext_security_IUser.__name__ = ["oaktree","ext","security","IUser"];
oaktree_ext_security_IUser.prototype = {
	id: null
	,name: null
	,__class__: oaktree_ext_security_IUser
};
var oaktree_ext_security_User = function(id,name) {
	this.id = id;
	this.name = name;
};
$hxClasses["oaktree.ext.security.User"] = oaktree_ext_security_User;
oaktree_ext_security_User.__name__ = ["oaktree","ext","security","User"];
oaktree_ext_security_User.__interfaces__ = [oaktree_ext_security_IUser];
oaktree_ext_security_User.prototype = {
	id: null
	,name: null
	,__class__: oaktree_ext_security_User
};
var agario_module_shop_models_GameUser = function(id,name) {
	this.massBoostAmount = 0;
	this.xpBoostAmount = 0;
	this.socialId = "";
	this.realm = agario_services_WebAuthProvider.Guest;
	this.currencyCode = "";
	this.selectedLanguage = "";
	this.defaultSkin = "";
	this.isConnecting = false;
	this.isGuest = true;
	this.loggedIn = false;
	this.onUserDataUpdate = new msignal_Signal0();
	oaktree_ext_security_User.call(this,id,name);
	this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
	this._serverModel.register(62,$bind(this,this.onGameOver));
	this.avatarUrl = Core.services.config.getRootUrl("mc/img/profilepic_guest.png");
};
$hxClasses["agario.module.shop.models.GameUser"] = agario_module_shop_models_GameUser;
agario_module_shop_models_GameUser.__name__ = ["agario","module","shop","models","GameUser"];
agario_module_shop_models_GameUser.__super__ = oaktree_ext_security_User;
agario_module_shop_models_GameUser.prototype = $extend(oaktree_ext_security_User.prototype,{
	loggedIn: null
	,isGuest: null
	,isConnecting: null
	,stats: null
	,userInfo: null
	,serverInfo: null
	,userSettings: null
	,userWallet: null
	,userBoosts: null
	,wallet: null
	,facebookId: null
	,avatarUrl: null
	,defaultSkin: null
	,selectedLanguage: null
	,currencyCode: null
	,realm: null
	,socialId: null
	,selectedSkin: null
	,coins: null
	,onUserDataUpdate: null
	,xpBoostAmount: null
	,massBoostAmount: null
	,_serverModel: null
	,destroy: function() {
		if(this._serverModel != null) this._serverModel.unregister(62,$bind(this,this.onGameOver));
		this.set_realm(agario_services_WebAuthProvider.Guest);
	}
	,onGameOver: function(type,msg) {
		if(type != 62) return;
		var message = msg;
		this.setUserStats(message.get_userStats());
		this.handleUserUpdates(message.get_userDataUpdates());
	}
	,handleUserData: function(data) {
		if(this.userInfo == null) this.userInfo = new agario_module_shop_models_vo_UserInfoVO();
		this.wallet = [];
		this.id = data.get_userInfo().get_id();
		this.name = data.get_userInfo().get_displayName();
		this.stats = new agario_module_shop_models_vo_UserStatsVO(data.get_userStats());
		this.userInfo.setValues(data.get_userInfo());
		this.serverInfo = new agario_module_shop_models_vo_ServerInfoVO(data.get_serverInfo());
		this.userInfo.id = data.get_userInfo().get_id();
		this.userInfo.displayName = data.get_userInfo().get_displayName();
		this.userInfo.level = data.get_userInfo().get_level();
		this.userInfo.xp = data.get_userInfo().get_xp();
		this.userInfo.hasLoggedIntoMobile = data.get_userInfo().get_hasLoggedIntoMobile();
		this.userInfo.userTimedEvents = [];
		this.setUserStats(data.get_userStats());
		if(data.get_userTimedEvents() == null || data.get_userTimedEvents().length == 0) {
			this.userInfo.userTimedEvents = [];
			var firstTime = new agario_proto_User_$timed_$event();
			firstTime.set_nextAvailableInSeconds(0);
			firstTime.set_eventId("hourlyBonus");
			this.userInfo.userTimedEvents.push(new agario_module_shop_models_vo_TimedEventVO(firstTime));
		}
		var _g = 0;
		var _g1 = data.get_userTimedEvents();
		while(_g < _g1.length) {
			var timedEvent = _g1[_g];
			++_g;
			this.userInfo.userTimedEvents.push(new agario_module_shop_models_vo_TimedEventVO(timedEvent));
		}
		this.userSettings = data.get_userSettings();
		if(this.userSettings != null && this.userSettings.length > 0) {
			var selectedSkinsArr = this.userSettings.filter(function(item) {
				return item.get_key() == 1;
			});
			if(selectedSkinsArr != null && selectedSkinsArr.length > 0) this.set_selectedSkin(selectedSkinsArr[0].get_valueString());
		}
		this.userWallet = data.get_userWallet();
		var _g11 = 0;
		var _g2 = this.userWallet.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var walletItem = new agario_module_shop_models_vo_WalletItemVO({ productId : this.userWallet[i].get_productId(), balance : this.userWallet[i].get_quantity()});
			this.wallet.push(walletItem);
		}
		this.userBoosts = data.get_userBoosts();
		var _g3 = data.get_realm();
		switch(_g3) {
		case 2:
			this.set_realm(agario_services_WebAuthProvider.Facebook);
			break;
		case 3:
			this.set_realm(agario_services_WebAuthProvider.Google);
			break;
		default:
			haxe_Log.trace("Weird value in login response",{ fileName : "GameUser.hx", lineNumber : 171, className : "agario.module.shop.models.GameUser", methodName : "handleUserData"});
		}
		this.evaluateWallet();
		this.loggedIn = true;
		this.isGuest = false;
		this.onUserDataUpdate.dispatch();
	}
	,checkUsingBoosts: function() {
		var indexesToRemove = [];
		var _g1 = 0;
		var _g = this.userBoosts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var boostItem = Core.models.shopBoostItems.getItemByProductId(this.userBoosts[i].get_productId());
			if(boostItem == null) {
				haxe_Log.trace(" d / gameuser / " + (" Missing BoostItem: " + this.userBoosts[i].get_productId()),{ fileName : "GameUser.hx", lineNumber : 196, className : "agario.module.shop.models.GameUser", methodName : "checkUsingBoosts"});
				continue;
			}
			var boosts = Core.models.shopBoostItems.getItemsByType(boostItem.categoryShopId);
			var _g3 = 0;
			var _g2 = boosts.length;
			while(_g3 < _g2) {
				var j = _g3++;
				boosts[j].set_inUse(true);
			}
			if(_$UInt_UInt_$Impl_$.gt(this.userBoosts[i].get_expiresInSeconds(),0)) {
				Core.services.gameui.setTimerForBoost(boostItem.categoryShopId,this.userBoosts[i].get_expiresInSeconds(),$bind(this,this.onBoostEnded),this.userBoosts[i].get_productId());
				Core.services.gameui.setIcon(boostItem.categoryShopId,"img/" + boostItem.category.image);
			} else indexesToRemove.push(this.userBoosts[i]);
		}
		var _g11 = 0;
		var _g4 = indexesToRemove.length;
		while(_g11 < _g4) {
			var i1 = _g11++;
			HxOverrides.remove(this.userBoosts,indexesToRemove[i1]);
		}
	}
	,getWalletItemById: function(id) {
		return this.wallet.filter(function(item) {
			return item.productId == id;
		})[0];
	}
	,handleUserUpdates: function(userUpdates) {
		var update;
		var _g = 0;
		while(_g < userUpdates.length) {
			var update1 = userUpdates[_g];
			++_g;
			if(update1.get_type() == 20) this.handleProductUpdate(update1.get_productField()); else if(update1.get_type() == 10) this.handleXpLevelUpdate(update1.get_xpLevelField());
		}
	}
	,handleXpLevelUpdate: function(update) {
		if(this.userInfo == null) this.userInfo = new agario_module_shop_models_vo_UserInfoVO();
		if(_$UInt_UInt_$Impl_$.gt(update.get_deltaLevel(),0)) window.MC.showLevelUp((function($this) {
			var $r;
			var a = update.get_deltaLevel();
			$r = a * 50;
			return $r;
		}(this)),this.userInfo.level,update.get_finalLevel());
		this.userInfo.level = update.get_finalLevel();
		this.userInfo.xp = update.get_finalXpForLevel();
		if(this.userInfo.level >= Core.models.xpModel.xpList.length) this.userInfo.xp = this.userInfo.xpNeeded;
		Core.services.gameui.setAccountData({ 'level' : this.userInfo.level, 'xp' : this.userInfo.xp, 'xpNeeded' : Core.models.xpModel.getMaxXpForLevel(this.userInfo.level)},true);
	}
	,evaluateWallet: function() {
		if(!Core.models.shopLoaded) return;
		this.checkUserSkin();
		this.checkWalletBoosts();
		this.checkUsingBoosts();
	}
	,setUserStats: function(user_stats) {
		if(this.stats == null) this.stats = new agario_module_shop_models_vo_UserStatsVO();
		this.stats.gamesPlayed = user_stats.get_gamesPlayed();
		this.stats.massConsumed = user_stats.get_massConsumed();
		this.stats.highestMass = user_stats.get_highestMass();
		this.stats.longestTimeAlive = user_stats.get_longestTimeAlive();
		this.stats.mostCellsEaten = user_stats.get_mostCellsEaten();
		if((function($this) {
			var $r;
			var a = user_stats.get_gamesPlayed();
			$r = a == 0;
			return $r;
		}(this))) this.stats.averageScore = 0; else this.stats.averageScore = Math.floor((function($this) {
			var $r;
			var a1 = user_stats.get_allTimeScore();
			var b = user_stats.get_gamesPlayed();
			$r = _$UInt_UInt_$Impl_$.toFloat(a1) / _$UInt_UInt_$Impl_$.toFloat(b);
			return $r;
		}(this)));
	}
	,checkWalletBoosts: function() {
		this.xpBoostAmount = 0;
		this.massBoostAmount = 0;
		var _g1 = 0;
		var _g = Core.models.shopBoostItems.boostList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var shopItem = Core.models.shopBoostItems.boostList[i];
			var _g3 = 0;
			var _g2 = this.wallet.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(this.wallet[j].productId == shopItem.productIdToQuantify && this.wallet[j].get_balance() > 0) {
					if(shopItem.gameplayInfo.multiplier == 2) Core.services.gameui.setIcon(shopItem.categoryShopId,"img/" + shopItem.category.image);
					if(shopItem.categoryShopId == agario_module_shop_models_types_BoostType.XP_BOOST) this.xpBoostAmount += this.wallet[j].get_balance(); else if(shopItem.categoryShopId == agario_module_shop_models_types_BoostType.MASS_BOOST) this.massBoostAmount += this.wallet[j].get_balance();
				}
			}
		}
		Core.services.gameui.setUserXPBoost(Std.string(this.xpBoostAmount));
		Core.services.gameui.setUserMassBoost(Std.string(this.massBoostAmount));
	}
	,checkUserSkin: function() {
		if(this.wallet.length > 0) {
			var _g1 = 0;
			var _g = this.wallet.length;
			while(_g1 < _g) {
				var i = _g1++;
				var item = Core.models.shopSkinsModel.getItemById(this.wallet[i].productId);
				if(item != null) {
					item.set_inUse(false);
					if(item.productIdToQuantify == this.get_selectedSkin()) item.set_inUse(true);
					item.set_owned(true);
				}
			}
		}
	}
	,handleProductUpdate: function(productUpdate) {
		if(productUpdate.get_productId() == "coin") {
			Core.user.set_coins(productUpdate.get_finalAmount());
			Core.get_events().dispatchEventWith(agario_module_shop_events_WalletEvent.WALLET_UPDATED);
			Core.services.gameui.setUserCoins(Core.user.get_coins());
			return;
		}
		var walletItem = Core.user.getWalletItemById(productUpdate.get_productId());
		if(walletItem == null) this.wallet.push(new agario_module_shop_models_vo_WalletItemVO({ productId : productUpdate.get_productId(), balance : productUpdate.get_finalAmount()})); else walletItem.set_balance(productUpdate.get_finalAmount());
		this.evaluateWallet();
	}
	,onBoostEnded: function(pid) {
		var endedType = "";
		var _g1 = 0;
		var _g = this.wallet.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.wallet[i].productId == pid) {
				endedType = Core.models.shopBoostItems.getItemByProductId(pid).categoryShopId;
				var _g2 = this.wallet[i];
				var _g3 = _g2.get_balance();
				_g2.set_balance(_g3 - 1);
				_g3;
			}
		}
		var _g11 = 0;
		var _g4 = this.userBoosts.length;
		while(_g11 < _g4) {
			var i1 = _g11++;
			if(this.userBoosts[i1].get_productId() == pid) this.userBoosts[i1].set_expiresInSeconds(0);
		}
		var allBoosts = Core.models.shopBoostItems.getItemsByType(endedType);
		var _g12 = 0;
		var _g5 = allBoosts.length;
		while(_g12 < _g5) {
			var i2 = _g12++;
			var bItem = allBoosts[i2];
			bItem.set_inUse(false);
		}
		this.checkWalletBoosts();
	}
	,freeCoinTimeLeft: function() {
		var timedEvent = this.userInfo.getTimedEvent("hourlyBonus");
		if(timedEvent != null) {
			var delta = timedEvent.finalTimer - new Date().getTime();
			if(delta < 0) delta = 0;
			return delta;
		}
		return 0;
	}
	,get_realm: function() {
		return this.realm;
	}
	,set_realm: function(value) {
		this.realm = value;
		this.onUserDataUpdate.dispatch();
		return value;
	}
	,get_socialId: function() {
		return this.socialId;
	}
	,set_socialId: function(value) {
		this.socialId = value;
		this.onUserDataUpdate.dispatch();
		return value;
	}
	,get_selectedSkin: function() {
		return this.selectedSkin;
	}
	,set_selectedSkin: function(value) {
		return this.selectedSkin = value;
	}
	,get_coins: function() {
		if(this.isGuest) return 100;
		if(this.userWallet == null) return 0;
		var _g1 = 0;
		var _g = this.userWallet.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.userWallet[i].get_productId() == "coin") return this.userWallet[i].get_quantity();
		}
		return 0;
	}
	,set_coins: function(value) {
		var _g1 = 0;
		var _g = this.userWallet.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.userWallet[i].get_productId() == "coin") this.userWallet[i].set_quantity(value);
		}
		return value;
	}
	,__class__: agario_module_shop_models_GameUser
	,__properties__: {set_coins:"set_coins",get_coins:"get_coins",set_selectedSkin:"set_selectedSkin",get_selectedSkin:"get_selectedSkin",set_socialId:"set_socialId",get_socialId:"get_socialId",set_realm:"set_realm",get_realm:"get_realm"}
});
var agario_module_shop_models_PriceMatrixModel = function() {
	this.currencyList = [];
};
$hxClasses["agario.module.shop.models.PriceMatrixModel"] = agario_module_shop_models_PriceMatrixModel;
agario_module_shop_models_PriceMatrixModel.__name__ = ["agario","module","shop","models","PriceMatrixModel"];
agario_module_shop_models_PriceMatrixModel.prototype = {
	currencyList: null
	,add: function(p) {
		this.currencyList.push(p);
	}
	,hasCurrency: function(currency_code) {
		if(this.currencyList.length > 0) return this.currencyList[0].currencies.exists(currency_code);
		return false;
	}
	,getPriceForTier: function(priceTier,currency) {
		if(currency == null) currency = "USD";
		var _g1 = 0;
		var _g = this.currencyList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.currencyList[i].tier == priceTier) return this.currencyList[i].getPriceByCurrency(currency);
		}
		return 0.0;
	}
	,__class__: agario_module_shop_models_PriceMatrixModel
};
var agario_module_shop_models_SettingsModel = function() {
};
$hxClasses["agario.module.shop.models.SettingsModel"] = agario_module_shop_models_SettingsModel;
agario_module_shop_models_SettingsModel.__name__ = ["agario","module","shop","models","SettingsModel"];
agario_module_shop_models_SettingsModel.createMap = function(settings) {
	var result = new haxe_ds_StringMap();
	if(settings != null) {
		var _g = 0;
		while(_g < settings.length) {
			var setting = settings[_g];
			++_g;
			if(result.exists(setting.key)) haxe_Log.trace("d / settingsmodel / " + ("[WARNING] Duplicate user setting <" + setting.key + "> " + result.get(setting.key) + ":" + setting.value),{ fileName : "SettingsModel.hx", lineNumber : 33, className : "agario.module.shop.models.SettingsModel", methodName : "createMap"});
			result.set(setting.key,setting.value);
		}
	}
	return result;
};
agario_module_shop_models_SettingsModel.prototype = {
	settingList: null
	,getSettingByKey: function(k) {
		return this.settingList.filter(function(item) {
			return item.key == k;
		})[0].value;
	}
	,__class__: agario_module_shop_models_SettingsModel
};
var agario_module_shop_models_ShopBoostsModel = function() {
	this.itemsByType = new haxe_ds_StringMap();
	this.boostList = [];
};
$hxClasses["agario.module.shop.models.ShopBoostsModel"] = agario_module_shop_models_ShopBoostsModel;
agario_module_shop_models_ShopBoostsModel.__name__ = ["agario","module","shop","models","ShopBoostsModel"];
agario_module_shop_models_ShopBoostsModel.prototype = {
	boostList: null
	,itemsByType: null
	,add: function(bi) {
		this.boostList.push(bi);
		if(!this.itemsByType.exists(bi.categoryShopId)) {
			var value = [];
			this.itemsByType.set(bi.categoryShopId,value);
		}
		this.itemsByType.get(bi.categoryShopId).push(bi);
	}
	,getItemByPurchaseId: function(id) {
		var _g1 = 0;
		var _g = this.boostList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.boostList[i].purchaseId == id) return this.boostList[i];
		}
		return null;
	}
	,getItemByProductId: function(id) {
		var _g1 = 0;
		var _g = this.boostList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.boostList[i].productIdToQuantify == id) return this.boostList[i];
		}
		return null;
	}
	,getItemsByType: function(itemType) {
		if(this.itemsByType.exists(itemType)) return this.itemsByType.get(itemType); else return [];
	}
	,__class__: agario_module_shop_models_ShopBoostsModel
};
var agario_module_shop_models_ShopCoinModel = function() {
	this.shopCoinsList = [];
};
$hxClasses["agario.module.shop.models.ShopCoinModel"] = agario_module_shop_models_ShopCoinModel;
agario_module_shop_models_ShopCoinModel.__name__ = ["agario","module","shop","models","ShopCoinModel"];
agario_module_shop_models_ShopCoinModel.prototype = {
	shopCoinsList: null
	,instance: null
	,add: function(item) {
		this.shopCoinsList.push(item);
	}
	,getItemById: function(itemId) {
		var _g1 = 0;
		var _g = this.shopCoinsList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.shopCoinsList[i].purchaseId == itemId) return this.shopCoinsList[i];
		}
		return null;
	}
	,__class__: agario_module_shop_models_ShopCoinModel
};
var agario_module_shop_models_ShopItemsCollection = function() {
	this.shopItemsList = [];
	this.itemsByType = new haxe_ds_StringMap();
};
$hxClasses["agario.module.shop.models.ShopItemsCollection"] = agario_module_shop_models_ShopItemsCollection;
agario_module_shop_models_ShopItemsCollection.__name__ = ["agario","module","shop","models","ShopItemsCollection"];
agario_module_shop_models_ShopItemsCollection.prototype = {
	shopItemsList: null
	,itemsByType: null
	,instance: null
	,add: function(item) {
		this.shopItemsList.push(item);
		if(!this.itemsByType.exists(item.type)) {
			var value = [];
			this.itemsByType.set(item.type,value);
		}
		this.itemsByType.get(item.type).push(item);
	}
	,getItemByPurchaseId: function(itemId) {
		var _g1 = 0;
		var _g = this.shopItemsList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.shopItemsList[i].purchaseId == itemId) return this.shopItemsList[i];
		}
		return null;
	}
	,getItemsByType: function(itemType) {
		if(this.itemsByType.exists(itemType)) return this.itemsByType.get(itemType); else return [];
	}
	,setSkinUse: function(itemId) {
		var _g1 = 0;
		var _g = Core.models.shopSkinsModel.skinList.length;
		while(_g1 < _g) {
			var i = _g1++;
			Core.models.shopSkinsModel.skinList[i].set_inUse(false);
			if(Core.models.shopSkinsModel.skinList[i].productIdToQuantify == itemId) {
				Core.models.shopSkinsModel.skinList[i].set_inUse(true);
				Core.user.set_selectedSkin(itemId);
			}
		}
	}
	,__class__: agario_module_shop_models_ShopItemsCollection
};
var oaktree_core_VO = function(obj) {
	if(obj != null) this.setValues(obj);
};
$hxClasses["oaktree.core.VO"] = oaktree_core_VO;
oaktree_core_VO.__name__ = ["oaktree","core","VO"];
oaktree_core_VO.addFieldDeclaration = function(className,fieldName,fieldType) {
	if(!oaktree_core_VO.classCache.exists(className)) {
		var value = new haxe_ds_StringMap();
		oaktree_core_VO.classCache.set(className,value);
	}
	var this1 = oaktree_core_VO.classCache.get(className);
	this1.set(fieldName,fieldType);
};
oaktree_core_VO.classHasField = function(className,fieldName) {
	if(oaktree_core_VO.classCache.exists(className)) {
		var tmpList = oaktree_core_VO.classCache.get(className);
		if(__map_reserved[fieldName] != null?tmpList.existsReserved(fieldName):tmpList.h.hasOwnProperty(fieldName)) return true;
	}
	return false;
};
oaktree_core_VO.prototype = {
	handleSpecialTypes: function(key,obj) {
		return false;
	}
	,hasField: function(fieldToFind) {
		var fields = Type.getInstanceFields(js_Boot.getClass(this));
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(field == fieldToFind) return true;
		}
		return false;
	}
	,setValues: function(obj) {
		var classObj = js_Boot.getClass(this);
		var className = Type.getClassName(classObj);
		this.loadFieldInfo(true,className,classObj);
		var metafields = haxe_rtti_Meta.getFields(classObj);
		var fieldNameMapping = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(metafields);
		while(_g < _g1.length) {
			var fieldName = _g1[_g];
			++_g;
			var mfield = Reflect.field(metafields,fieldName);
			if(Object.prototype.hasOwnProperty.call(mfield,"name")) {
				var key = Reflect.field(mfield,"name")[0];
				if(__map_reserved[key] != null) fieldNameMapping.setReserved(key,fieldName); else fieldNameMapping.h[key] = fieldName;
			}
		}
		var _g2 = 0;
		var _g11 = Reflect.fields(obj);
		while(_g2 < _g11.length) {
			var field = _g11[_g2];
			++_g2;
			var targetField = field;
			if(__map_reserved[field] != null?fieldNameMapping.existsReserved(field):fieldNameMapping.h.hasOwnProperty(field)) targetField = __map_reserved[field] != null?fieldNameMapping.getReserved(field):fieldNameMapping.h[field];
			if(this.handleSpecialTypes(field,obj)) {
			} else if(oaktree_core_VO.classHasField(className,targetField)) {
				var voType = this.getDeclaredTypeOfField(className,targetField);
				var fieldObject = this._parse(voType,Reflect.getProperty(obj,field));
				if(fieldObject == "YES") fieldObject = true; else if(fieldObject == "NO") fieldObject = false;
				Reflect.setProperty(this,targetField,fieldObject);
			} else {
			}
		}
	}
	,_parse: function(type,v) {
		switch(type[1]) {
		case 0:
			return v;
		case 3:
			var valueType = type[2];
			var vClass = this.resolveVOType(valueType);
			return this._parseArray(vClass,valueType,v);
		case 1:
			var name = type[2];
			return this._parseClass(name,v);
		default:
			return null;
		}
	}
	,_parseClass: function(name,v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var d = Reflect.getProperty(v,n);
			if(d != null) {
				var isDefaultType = typeof(d) == "string" || ((d | 0) === d) || typeof(d) == "number";
				if(!isDefaultType) {
					if(d._value != null) Reflect.setProperty(v,n,d._value); else Reflect.setProperty(v,n,d._key);
				}
			}
		}
		return Type.createInstance(Type.resolveClass(name),[v]);
	}
	,resolveVOType: function(type) {
		switch(type[1]) {
		case 0:
			var name = type[2];
			var resuClass = Type.resolveClass(name);
			return resuClass;
		case 1:
			var name1 = type[2];
			var resuClass1 = Type.resolveClass(name1);
			return resuClass1;
		default:
			return null;
		}
		return null;
	}
	,_parseArray: function(valueClass,valueType,v) {
		var result = [];
		var arr = v;
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var ii = _g1++;
			result.push(this._parse(valueType,arr[ii]));
		}
		return result;
	}
	,parseRTTIFields: function(type) {
		switch(type[1]) {
		case 7:
			var params = type[3];
			var name = type[2];
			return this.parseFieldType(name,params);
		case 2:
			var params1 = type[3];
			var name1 = type[2];
			return this.parseFieldType(name1,params1);
		default:
		}
		return oaktree_core_VOTypes.VT_Unknown;
	}
	,parseFieldType: function(name,params) {
		switch(name) {
		case "String":case "Int":case "Float":case "Bool":case "Date":
			return oaktree_core_VOTypes.VT_Native(name);
		case "Array":
			var firstField = this.parseRTTIFields(params.pop());
			if(firstField != null) return oaktree_core_VOTypes.VT_Array(firstField);
			break;
		default:
		}
		return oaktree_core_VOTypes.VT_Class(name);
	}
	,loadFieldInfo: function(rootCall,className,classObj) {
		if(rootCall == null) rootCall = false;
		if(rootCall && oaktree_core_VO.classCache.exists(className)) return;
		var rtti = haxe_rtti_Rtti.getRtti(classObj);
		var _g_head = rtti.fields.h;
		var _g_val = null;
		while(_g_head != null) {
			var field;
			field = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(field.isPublic) {
				var _g = field.type;
				switch(_g[1]) {
				case 7:
					var params = _g[3];
					var name = _g[2];
					oaktree_core_VO.addFieldDeclaration(className,field.name,this.parseFieldType(name,params));
					break;
				case 2:
					var params1 = _g[3];
					var name1 = _g[2];
					oaktree_core_VO.addFieldDeclaration(className,field.name,this.parseFieldType(name1,params1));
					break;
				default:
				}
			}
		}
		if(rtti.superClass != null) this.loadFieldInfo(false,className,Type.resolveClass(rtti.superClass.path));
	}
	,getDeclaredTypeOfField: function(className,field) {
		if(oaktree_core_VO.classCache.exists(className)) {
			var tmpList = oaktree_core_VO.classCache.get(className);
			if(__map_reserved[field] != null?tmpList.existsReserved(field):tmpList.h.hasOwnProperty(field)) return __map_reserved[field] != null?tmpList.getReserved(field):tmpList.h[field];
		}
		return oaktree_core_VOTypes.VT_Unknown;
	}
	,get_DEBUG: function() {
		return true;
	}
	,__class__: oaktree_core_VO
	,__properties__: {get_DEBUG:"get_DEBUG"}
};
var agario_module_shop_models_ShopModel = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.ShopModel"] = agario_module_shop_models_ShopModel;
agario_module_shop_models_ShopModel.__name__ = ["agario","module","shop","models","ShopModel"];
agario_module_shop_models_ShopModel.__super__ = oaktree_core_VO;
agario_module_shop_models_ShopModel.prototype = $extend(oaktree_core_VO.prototype,{
	countr_code: null
	,currency: null
	,userSettings: null
	,localizationSettings: null
	,defaultCommunicationSettings: null
	,shopCoins: null
	,shopBoostCategories: null
	,shopBoostItems: null
	,shopSkins: null
	,shopPriceCurrency: null
	,shopPriceMatrix: null
	,shopSkinTabs: null
	,walletInappPurchases: null
	,walletSoftPurchases: null
	,walletProductBundles: null
	,walletProducts: null
	,externalSocialStories: null
	,gamePlayBoosts: null
	,gamePlaySkins: null
	,freeSkins: null
	,xpList: null
	,walletBonusRewards: null
	,__class__: agario_module_shop_models_ShopModel
});
var agario_module_shop_models_ShopPurchasesModel = function() {
	this.walletInappPurchases = [];
};
$hxClasses["agario.module.shop.models.ShopPurchasesModel"] = agario_module_shop_models_ShopPurchasesModel;
agario_module_shop_models_ShopPurchasesModel.__name__ = ["agario","module","shop","models","ShopPurchasesModel"];
agario_module_shop_models_ShopPurchasesModel.prototype = {
	walletInappPurchases: null
	,walletSoftPurchases: null
	,getInappPurchaseByBundleId: function(bundleId) {
		return this.walletInappPurchases.filter(function(item) {
			return item.bundleId == bundleId;
		})[0];
	}
	,getSoftPurchaseByBundleId: function(bundleId) {
		return this.walletSoftPurchases.filter(function(item) {
			return item.bundleId == bundleId;
		})[0];
	}
	,getInappPurchaseByPurchaseId: function(purchaseId) {
		return this.walletInappPurchases.filter(function(item) {
			return item.id == purchaseId;
		})[0];
	}
	,getSoftPurchaseByPurchaseId: function(purchaseId) {
		return this.walletSoftPurchases.filter(function(item) {
			return item.id == purchaseId;
		})[0];
	}
	,getPurchaseByPurchaseId: function(purchaseId) {
		var soft = this.walletSoftPurchases.filter(function(item) {
			return item.id == purchaseId;
		});
		var inapp = this.walletInappPurchases.filter(function(item1) {
			return item1.id == purchaseId;
		});
		if(soft.length > 0) return soft[0]; else if(inapp.length > 0) return inapp[0]; else return null;
	}
	,getPurchaseByBundleId: function(bundleId) {
		var soft = this.walletSoftPurchases.filter(function(item) {
			return item.bundleId == bundleId;
		});
		var inapp = this.walletInappPurchases.filter(function(item1) {
			return item1.bundleId == bundleId;
		});
		if(soft.length > 0) return soft[0]; else if(inapp.length > 0) return inapp[0]; else return null;
	}
	,__class__: agario_module_shop_models_ShopPurchasesModel
};
var agario_module_shop_models_ShopSkinModel = function() {
	this.skinList = [];
	this.skinTabs = [];
};
$hxClasses["agario.module.shop.models.ShopSkinModel"] = agario_module_shop_models_ShopSkinModel;
agario_module_shop_models_ShopSkinModel.__name__ = ["agario","module","shop","models","ShopSkinModel"];
agario_module_shop_models_ShopSkinModel.prototype = {
	skinList: null
	,skinTabs: null
	,getItemById: function(id) {
		var _g1 = 0;
		var _g = this.skinList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.skinList[i].productIdToQuantify == id) return this.skinList[i];
		}
		return null;
	}
	,getLastRewardSkin: function(lvl) {
		var returnSkin = null;
		var _g1 = 0;
		var _g = this.skinList.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.skinList[i].availableAtLevel <= lvl && this.skinList[i].isReward) returnSkin = this.skinList[i];
		}
		return returnSkin;
	}
	,getNextRewardSkin: function(lvl) {
		var _g = 0;
		var _g1 = this.skinList;
		while(_g < _g1.length) {
			var skinItem = _g1[_g];
			++_g;
			if(skinItem.availableAtLevel > lvl) return skinItem;
		}
		return null;
	}
	,getTabs: function() {
		return this.skinTabs;
	}
	,addSkin: function(s) {
		this.skinList.push(s);
	}
	,addTab: function(t) {
		this.skinTabs.push(t);
	}
	,__class__: agario_module_shop_models_ShopSkinModel
};
var agario_module_shop_models_WalletProductBundlesModel = function() {
	this.products = [];
};
$hxClasses["agario.module.shop.models.WalletProductBundlesModel"] = agario_module_shop_models_WalletProductBundlesModel;
agario_module_shop_models_WalletProductBundlesModel.__name__ = ["agario","module","shop","models","WalletProductBundlesModel"];
agario_module_shop_models_WalletProductBundlesModel.prototype = {
	products: null
	,add: function(item) {
		this.products.push(item);
	}
	,getBundleByProductId: function(id) {
		var _g = 0;
		var _g1 = this.products;
		while(_g < _g1.length) {
			var productBundle = _g1[_g];
			++_g;
			if(productBundle.productId == id) return productBundle;
		}
		return null;
	}
	,getBundleByBundleId: function(id) {
		var _g = 0;
		var _g1 = this.products;
		while(_g < _g1.length) {
			var productBundle = _g1[_g];
			++_g;
			if(productBundle.id == id) return productBundle;
		}
		return null;
	}
	,__class__: agario_module_shop_models_WalletProductBundlesModel
};
var agario_module_shop_models_WalletProductsModel = function() {
	this.walletProducts = [];
};
$hxClasses["agario.module.shop.models.WalletProductsModel"] = agario_module_shop_models_WalletProductsModel;
agario_module_shop_models_WalletProductsModel.__name__ = ["agario","module","shop","models","WalletProductsModel"];
agario_module_shop_models_WalletProductsModel.prototype = {
	walletProducts: null
	,add: function(item) {
		this.walletProducts.push(item);
	}
	,getProductById: function(productId) {
		return this.walletProducts.filter(function(item) {
			return item.id == productId;
		})[0];
	}
	,__class__: agario_module_shop_models_WalletProductsModel
};
var agario_module_shop_models_XPModel = function() {
};
$hxClasses["agario.module.shop.models.XPModel"] = agario_module_shop_models_XPModel;
agario_module_shop_models_XPModel.__name__ = ["agario","module","shop","models","XPModel"];
agario_module_shop_models_XPModel.prototype = {
	xpList: null
	,getMaxXpForLevel: function(level) {
		if(level >= this.xpList.length) return this.xpList[this.xpList.length - 1].xpToNextLevel; else {
			var _g = 0;
			var _g1 = this.xpList;
			while(_g < _g1.length) {
				var xpItem = _g1[_g];
				++_g;
				if(xpItem.level == level) return xpItem.xpToNextLevel;
			}
		}
		return 0;
	}
	,getPercentage: function(xp,level) {
		var targetXP = this.getMaxXpForLevel(level);
		return xp / targetXP;
	}
	,getLevelForReward: function(rewardId) {
		return this.xpList.filter(function(item) {
			return item.levelUpBonusId == rewardId;
		})[0];
	}
	,__class__: agario_module_shop_models_XPModel
};
var agario_module_shop_models_types_BoostType = function() { };
$hxClasses["agario.module.shop.models.types.BoostType"] = agario_module_shop_models_types_BoostType;
agario_module_shop_models_types_BoostType.__name__ = ["agario","module","shop","models","types","BoostType"];
var agario_module_shop_models_types_ShopItemType = function() { };
$hxClasses["agario.module.shop.models.types.ShopItemType"] = agario_module_shop_models_types_ShopItemType;
agario_module_shop_models_types_ShopItemType.__name__ = ["agario","module","shop","models","types","ShopItemType"];
var agario_module_shop_models_vo_BonusRewardVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.BonusRewardVO"] = agario_module_shop_models_vo_BonusRewardVO;
agario_module_shop_models_vo_BonusRewardVO.__name__ = ["agario","module","shop","models","vo","BonusRewardVO"];
agario_module_shop_models_vo_BonusRewardVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_BonusRewardVO.prototype = $extend(oaktree_core_VO.prototype,{
	bonusId: null
	,bonusQty: null
	,bonusProductId: null
	,productUpdateOrigin: null
	,__class__: agario_module_shop_models_vo_BonusRewardVO
});
var agario_module_shop_models_vo_ShopItemVO = function(obj) {
	this.inUse = false;
	this.owned = false;
	this.isReward = false;
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ShopItemVO"] = agario_module_shop_models_vo_ShopItemVO;
agario_module_shop_models_vo_ShopItemVO.__name__ = ["agario","module","shop","models","vo","ShopItemVO"];
agario_module_shop_models_vo_ShopItemVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_ShopItemVO.prototype = $extend(oaktree_core_VO.prototype,{
	purchaseId: null
	,price: null
	,purchaseType: null
	,type: null
	,isReward: null
	,purchaseInfo: null
	,owned: null
	,get_owned: function() {
		return this.owned;
	}
	,set_owned: function(value) {
		return this.owned = value;
	}
	,inUse: null
	,get_inUse: function() {
		return this.inUse;
	}
	,set_inUse: function(value) {
		return this.inUse = value;
	}
	,name: null
	,description: null
	,__class__: agario_module_shop_models_vo_ShopItemVO
	,__properties__: $extend(oaktree_core_VO.prototype.__properties__,{set_inUse:"set_inUse",get_inUse:"get_inUse",set_owned:"set_owned",get_owned:"get_owned"})
});
var agario_module_shop_models_vo_CurrencyItemVO = function(obj) {
	agario_module_shop_models_vo_ShopItemVO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.CurrencyItemVO"] = agario_module_shop_models_vo_CurrencyItemVO;
agario_module_shop_models_vo_CurrencyItemVO.__name__ = ["agario","module","shop","models","vo","CurrencyItemVO"];
agario_module_shop_models_vo_CurrencyItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
agario_module_shop_models_vo_CurrencyItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype,{
	preAmount: null
	,finalAmount: null
	,banner: null
	,visibility: null
	,currency_code: null
	,percentage: null
	,__class__: agario_module_shop_models_vo_CurrencyItemVO
});
var agario_module_shop_models_vo_ExchangeRateVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ExchangeRateVO"] = agario_module_shop_models_vo_ExchangeRateVO;
agario_module_shop_models_vo_ExchangeRateVO.__name__ = ["agario","module","shop","models","vo","ExchangeRateVO"];
agario_module_shop_models_vo_ExchangeRateVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_ExchangeRateVO.prototype = $extend(oaktree_core_VO.prototype,{
	currency_offset: null
	,usd_exchange: null
	,usd_exchange_inverse: null
	,user_currency: null
	,__class__: agario_module_shop_models_vo_ExchangeRateVO
});
var agario_module_shop_models_vo_GamePlayBoostVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.GamePlayBoostVO"] = agario_module_shop_models_vo_GamePlayBoostVO;
agario_module_shop_models_vo_GamePlayBoostVO.__name__ = ["agario","module","shop","models","vo","GamePlayBoostVO"];
agario_module_shop_models_vo_GamePlayBoostVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_GamePlayBoostVO.prototype = $extend(oaktree_core_VO.prototype,{
	productId: null
	,type: null
	,multiplier: null
	,duration: null
	,__class__: agario_module_shop_models_vo_GamePlayBoostVO
});
var agario_module_shop_models_vo_GamePlaySkinVO = function(obj) {
	oaktree_core_VO.call(this,obj);
	this.set_shopImage(this.image);
};
$hxClasses["agario.module.shop.models.vo.GamePlaySkinVO"] = agario_module_shop_models_vo_GamePlaySkinVO;
agario_module_shop_models_vo_GamePlaySkinVO.__name__ = ["agario","module","shop","models","vo","GamePlaySkinVO"];
agario_module_shop_models_vo_GamePlaySkinVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_GamePlaySkinVO.prototype = $extend(oaktree_core_VO.prototype,{
	gameplayId: null
	,image: null
	,shopImage: null
	,get_shopImage: function() {
		var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(this.image);
		return path;
	}
	,set_shopImage: function(value) {
		return this.shopImage = value;
	}
	,gamePlayImage: null
	,get_gamePlayImage: function() {
		var fileName = this.image.substring(0,this.image.lastIndexOf("."));
		var extension = this.image.substring(this.image.lastIndexOf("."),this.image.length);
		var finalFileName = fileName + "_hi" + extension;
		var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(finalFileName);
		return path;
	}
	,set_gamePlayImage: function(value) {
		return this.gamePlayImage = value;
	}
	,cellColor: null
	,get_cellColor: function() {
		return this.cellColor;
	}
	,set_cellColor: function(value) {
		return this.cellColor = value.substring(0,8);
	}
	,productId: null
	,__class__: agario_module_shop_models_vo_GamePlaySkinVO
	,__properties__: $extend(oaktree_core_VO.prototype.__properties__,{set_cellColor:"set_cellColor",get_cellColor:"get_cellColor",set_gamePlayImage:"set_gamePlayImage",get_gamePlayImage:"get_gamePlayImage",set_shopImage:"set_shopImage",get_shopImage:"get_shopImage"})
});
var agario_module_shop_models_vo_FreeSkinVO = function(obj) {
	this.showName = false;
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.FreeSkinVO"] = agario_module_shop_models_vo_FreeSkinVO;
agario_module_shop_models_vo_FreeSkinVO.__name__ = ["agario","module","shop","models","vo","FreeSkinVO"];
agario_module_shop_models_vo_FreeSkinVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_FreeSkinVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,image: null
	,showName: null
	,gamePlayImage: null
	,get_gamePlayImage: function() {
		var fileName = this.image.substring(0,this.image.lastIndexOf("."));
		var extension = this.image.substring(this.image.lastIndexOf("."),this.image.length);
		var finalFileName = fileName + "_hi" + extension;
		var path = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService).getConfigUrl(finalFileName);
		return path;
	}
	,__class__: agario_module_shop_models_vo_FreeSkinVO
	,__properties__: $extend(oaktree_core_VO.prototype.__properties__,{get_gamePlayImage:"get_gamePlayImage"})
});
var agario_module_shop_models_vo_PlayerInfoVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.PlayerInfoVO"] = agario_module_shop_models_vo_PlayerInfoVO;
agario_module_shop_models_vo_PlayerInfoVO.__name__ = ["agario","module","shop","models","vo","PlayerInfoVO"];
agario_module_shop_models_vo_PlayerInfoVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_PlayerInfoVO.prototype = $extend(oaktree_core_VO.prototype,{
	currentSkin: null
	,wallet: null
	,coinAmount: null
	,getWalletItemById: function(id) {
		return this.wallet.filter(function(item) {
			return item.productId == id;
		})[0];
	}
	,__class__: agario_module_shop_models_vo_PlayerInfoVO
});
var agario_module_shop_models_vo_PriceCurrencyVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.PriceCurrencyVO"] = agario_module_shop_models_vo_PriceCurrencyVO;
agario_module_shop_models_vo_PriceCurrencyVO.__name__ = ["agario","module","shop","models","vo","PriceCurrencyVO"];
agario_module_shop_models_vo_PriceCurrencyVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_PriceCurrencyVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,__class__: agario_module_shop_models_vo_PriceCurrencyVO
});
var agario_module_shop_models_vo_PriceTierVO = function(obj) {
	oaktree_core_VO.call(this,null);
	this.currencies = new haxe_ds_StringMap();
	var fields = Reflect.fields(obj);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		var value = Reflect.getProperty(obj,field);
		this.currencies.set(field,value);
	}
	this.tier = obj.tier;
};
$hxClasses["agario.module.shop.models.vo.PriceTierVO"] = agario_module_shop_models_vo_PriceTierVO;
agario_module_shop_models_vo_PriceTierVO.__name__ = ["agario","module","shop","models","vo","PriceTierVO"];
agario_module_shop_models_vo_PriceTierVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_PriceTierVO.prototype = $extend(oaktree_core_VO.prototype,{
	tier: null
	,currencies: null
	,getPriceByCurrency: function(currency) {
		if(this.currencies.exists(currency)) return this.currencies.get(currency); else return this.currencies.get("USD");
	}
	,__class__: agario_module_shop_models_vo_PriceTierVO
});
var agario_module_shop_models_vo_ServerInfoVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ServerInfoVO"] = agario_module_shop_models_vo_ServerInfoVO;
agario_module_shop_models_vo_ServerInfoVO.__name__ = ["agario","module","shop","models","vo","ServerInfoVO"];
agario_module_shop_models_vo_ServerInfoVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_ServerInfoVO.prototype = $extend(oaktree_core_VO.prototype,{
	host: null
	,tcpPort: null
	,udpPort: null
	,__class__: agario_module_shop_models_vo_ServerInfoVO
});
var agario_module_shop_models_vo_ShopBoostCategoryVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ShopBoostCategoryVO"] = agario_module_shop_models_vo_ShopBoostCategoryVO;
agario_module_shop_models_vo_ShopBoostCategoryVO.__name__ = ["agario","module","shop","models","vo","ShopBoostCategoryVO"];
agario_module_shop_models_vo_ShopBoostCategoryVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_ShopBoostCategoryVO.prototype = $extend(oaktree_core_VO.prototype,{
	shopId: null
	,position: null
	,title: null
	,description: null
	,image: null
	,spritesheet: null
	,__class__: agario_module_shop_models_vo_ShopBoostCategoryVO
});
var agario_module_shop_models_vo_ShopBoostItemVO = function(obj) {
	agario_module_shop_models_vo_ShopItemVO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ShopBoostItemVO"] = agario_module_shop_models_vo_ShopBoostItemVO;
agario_module_shop_models_vo_ShopBoostItemVO.__name__ = ["agario","module","shop","models","vo","ShopBoostItemVO"];
agario_module_shop_models_vo_ShopBoostItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
agario_module_shop_models_vo_ShopBoostItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype,{
	categoryShopId: null
	,title: null
	,bestDealSticker: null
	,position: null
	,categoryPosition: null
	,productIdToQuantify: null
	,category: null
	,gameplayInfo: null
	,__class__: agario_module_shop_models_vo_ShopBoostItemVO
});
var agario_module_shop_models_vo_ShopSkinItemVO = function(obj) {
	this.availableAtLevel = -1;
	this.tab = "";
	agario_module_shop_models_vo_ShopItemVO.call(this,obj);
	this.isVisible = this.visibility == "default";
};
$hxClasses["agario.module.shop.models.vo.ShopSkinItemVO"] = agario_module_shop_models_vo_ShopSkinItemVO;
agario_module_shop_models_vo_ShopSkinItemVO.__name__ = ["agario","module","shop","models","vo","ShopSkinItemVO"];
agario_module_shop_models_vo_ShopSkinItemVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
agario_module_shop_models_vo_ShopSkinItemVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype,{
	originId: null
	,productIdToQuantify: null
	,image: null
	,tab: null
	,title: null
	,get_title: function() {
		if(oaktree_ext_localization_I18n.exists(this.title)) return oaktree_ext_localization_I18n.text(this.title);
		return this.title;
	}
	,set_title: function(value) {
		return this.title = value;
	}
	,visibility: null
	,isVisible: null
	,gamePlayInfo: null
	,availableAtLevel: null
	,__class__: agario_module_shop_models_vo_ShopSkinItemVO
	,__properties__: $extend(agario_module_shop_models_vo_ShopItemVO.prototype.__properties__,{set_title:"set_title",get_title:"get_title"})
});
var agario_module_shop_models_vo_ShopSkinTabVO = function(obj) {
	agario_module_shop_models_vo_ShopItemVO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.ShopSkinTabVO"] = agario_module_shop_models_vo_ShopSkinTabVO;
agario_module_shop_models_vo_ShopSkinTabVO.__name__ = ["agario","module","shop","models","vo","ShopSkinTabVO"];
agario_module_shop_models_vo_ShopSkinTabVO.__super__ = agario_module_shop_models_vo_ShopItemVO;
agario_module_shop_models_vo_ShopSkinTabVO.prototype = $extend(agario_module_shop_models_vo_ShopItemVO.prototype,{
	tabName: null
	,isNormalSort: null
	,tabDescription: null
	,__class__: agario_module_shop_models_vo_ShopSkinTabVO
});
var agario_module_shop_models_vo_SocialStoryVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.SocialStoryVO"] = agario_module_shop_models_vo_SocialStoryVO;
agario_module_shop_models_vo_SocialStoryVO.__name__ = ["agario","module","shop","models","vo","SocialStoryVO"];
agario_module_shop_models_vo_SocialStoryVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_SocialStoryVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,icon: null
	,iconURL: null
	,titleTag: null
	,subtitleTag: null
	,descriptionTag: null
	,descriptionAndroidTag: null
	,twitterTitleTag: null
	,twitterSubtitleTag: null
	,twitterDescriptionTag: null
	,twitterDescriptionAndroidTag: null
	,__class__: agario_module_shop_models_vo_SocialStoryVO
});
var agario_module_shop_models_vo_TimedEventVO = function(data) {
	var initialTimer = new Date().getTime();
	if(data != null) {
		this.eventId = data.get_eventId();
		this.nextAvailableInSeconds = data.get_nextAvailableInSeconds();
		if(this.nextAvailableInSeconds == 0) this.finalTimer = 0; else this.finalTimer = initialTimer + this.nextAvailableInSeconds * 1000.0;
	}
};
$hxClasses["agario.module.shop.models.vo.TimedEventVO"] = agario_module_shop_models_vo_TimedEventVO;
agario_module_shop_models_vo_TimedEventVO.__name__ = ["agario","module","shop","models","vo","TimedEventVO"];
agario_module_shop_models_vo_TimedEventVO.prototype = {
	eventId: null
	,nextAvailableInSeconds: null
	,finalTimer: null
	,__class__: agario_module_shop_models_vo_TimedEventVO
};
var agario_module_shop_models_vo_UserInfoVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.UserInfoVO"] = agario_module_shop_models_vo_UserInfoVO;
agario_module_shop_models_vo_UserInfoVO.__name__ = ["agario","module","shop","models","vo","UserInfoVO"];
agario_module_shop_models_vo_UserInfoVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_UserInfoVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,displayName: null
	,xp: null
	,level: null
	,hasLoggedIntoMobile: null
	,xpNeeded: null
	,userTimedEvents: null
	,setTimedEvent: function(te) {
		if(this.userTimedEvents.length > 0) this.userTimedEvents.splice(0,this.userTimedEvents.length);
		this.userTimedEvents.push(te);
	}
	,getTimedEvent: function(eventId) {
		var results = this.userTimedEvents.filter(function(item) {
			return item.eventId == eventId;
		});
		if(results.length == 0) return null;
		return results[0];
	}
	,__class__: agario_module_shop_models_vo_UserInfoVO
});
var agario_module_shop_models_vo_UserSettingVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.UserSettingVO"] = agario_module_shop_models_vo_UserSettingVO;
agario_module_shop_models_vo_UserSettingVO.__name__ = ["agario","module","shop","models","vo","UserSettingVO"];
agario_module_shop_models_vo_UserSettingVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_UserSettingVO.prototype = $extend(oaktree_core_VO.prototype,{
	key: null
	,value: null
	,__class__: agario_module_shop_models_vo_UserSettingVO
});
var agario_module_shop_models_vo_UserStatsVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.UserStatsVO"] = agario_module_shop_models_vo_UserStatsVO;
agario_module_shop_models_vo_UserStatsVO.__name__ = ["agario","module","shop","models","vo","UserStatsVO"];
agario_module_shop_models_vo_UserStatsVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_UserStatsVO.prototype = $extend(oaktree_core_VO.prototype,{
	gamesPlayed: null
	,massConsumed: null
	,averageScore: null
	,highestMass: null
	,longestTimeAlive: null
	,mostCellsEaten: null
	,__class__: agario_module_shop_models_vo_UserStatsVO
});
var agario_module_shop_models_vo_WalletInappPurchaseVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.WalletInappPurchaseVO"] = agario_module_shop_models_vo_WalletInappPurchaseVO;
agario_module_shop_models_vo_WalletInappPurchaseVO.__name__ = ["agario","module","shop","models","vo","WalletInappPurchaseVO"];
agario_module_shop_models_vo_WalletInappPurchaseVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_WalletInappPurchaseVO.prototype = $extend(oaktree_core_VO.prototype,{
	bundleId: null
	,id: null
	,priceTier: null
	,localizedName: null
	,localizedDescription: null
	,__class__: agario_module_shop_models_vo_WalletInappPurchaseVO
});
var agario_module_shop_models_vo_WalletItemVO = function(obj) {
	this.inUse = false;
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.WalletItemVO"] = agario_module_shop_models_vo_WalletItemVO;
agario_module_shop_models_vo_WalletItemVO.__name__ = ["agario","module","shop","models","vo","WalletItemVO"];
agario_module_shop_models_vo_WalletItemVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_WalletItemVO.prototype = $extend(oaktree_core_VO.prototype,{
	productId: null
	,_balance: null
	,balance: null
	,get_balance: function() {
		return this._balance;
	}
	,set_balance: function(value) {
		if(value < 0) value = 0;
		return this._balance = value;
	}
	,inUse: null
	,__class__: agario_module_shop_models_vo_WalletItemVO
	,__properties__: $extend(oaktree_core_VO.prototype.__properties__,{set_balance:"set_balance",get_balance:"get_balance"})
});
var agario_module_shop_models_vo_WalletProductBundleVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.WalletProductBundleVO"] = agario_module_shop_models_vo_WalletProductBundleVO;
agario_module_shop_models_vo_WalletProductBundleVO.__name__ = ["agario","module","shop","models","vo","WalletProductBundleVO"];
agario_module_shop_models_vo_WalletProductBundleVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_WalletProductBundleVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,productId: null
	,quantity: null
	,__class__: agario_module_shop_models_vo_WalletProductBundleVO
});
var agario_module_shop_models_vo_WalletProductVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.WalletProductVO"] = agario_module_shop_models_vo_WalletProductVO;
agario_module_shop_models_vo_WalletProductVO.__name__ = ["agario","module","shop","models","vo","WalletProductVO"];
agario_module_shop_models_vo_WalletProductVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_WalletProductVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,type: null
	,consumable: null
	,__class__: agario_module_shop_models_vo_WalletProductVO
});
var agario_module_shop_models_vo_WalletSoftPurchaseVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.WalletSoftPurchaseVO"] = agario_module_shop_models_vo_WalletSoftPurchaseVO;
agario_module_shop_models_vo_WalletSoftPurchaseVO.__name__ = ["agario","module","shop","models","vo","WalletSoftPurchaseVO"];
agario_module_shop_models_vo_WalletSoftPurchaseVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_WalletSoftPurchaseVO.prototype = $extend(oaktree_core_VO.prototype,{
	bundleId: null
	,currencyAmount: null
	,currencyProductId: null
	,id: null
	,__class__: agario_module_shop_models_vo_WalletSoftPurchaseVO
});
var agario_module_shop_models_vo_XPItemVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.XPItemVO"] = agario_module_shop_models_vo_XPItemVO;
agario_module_shop_models_vo_XPItemVO.__name__ = ["agario","module","shop","models","vo","XPItemVO"];
agario_module_shop_models_vo_XPItemVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_XPItemVO.prototype = $extend(oaktree_core_VO.prototype,{
	level: null
	,xpToNextLevel: null
	,levelUpBonusId: null
	,__class__: agario_module_shop_models_vo_XPItemVO
});
var agario_module_shop_models_vo_XsollaShopItemsVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.XsollaShopItemsVO"] = agario_module_shop_models_vo_XsollaShopItemsVO;
agario_module_shop_models_vo_XsollaShopItemsVO.__name__ = ["agario","module","shop","models","vo","XsollaShopItemsVO"];
agario_module_shop_models_vo_XsollaShopItemsVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_XsollaShopItemsVO.prototype = $extend(oaktree_core_VO.prototype,{
	items: null
	,currency_code: null
	,__class__: agario_module_shop_models_vo_XsollaShopItemsVO
});
var agario_module_shop_models_vo_XsollaShopItemVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["agario.module.shop.models.vo.XsollaShopItemVO"] = agario_module_shop_models_vo_XsollaShopItemVO;
agario_module_shop_models_vo_XsollaShopItemVO.__name__ = ["agario","module","shop","models","vo","XsollaShopItemVO"];
agario_module_shop_models_vo_XsollaShopItemVO.__super__ = oaktree_core_VO;
agario_module_shop_models_vo_XsollaShopItemVO.prototype = $extend(oaktree_core_VO.prototype,{
	sku: null
	,description: null
	,price: null
	,__class__: agario_module_shop_models_vo_XsollaShopItemVO
});
var agario_module_shop_renderers_CurrencyShopItem = function(item) {
	this.maxHeight = 65;
	this.maxWidth = 800;
	openfl_display_Sprite.call(this);
	this.item = item;
	this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
};
$hxClasses["agario.module.shop.renderers.CurrencyShopItem"] = agario_module_shop_renderers_CurrencyShopItem;
agario_module_shop_renderers_CurrencyShopItem.__name__ = ["agario","module","shop","renderers","CurrencyShopItem"];
agario_module_shop_renderers_CurrencyShopItem.__super__ = openfl_display_Sprite;
agario_module_shop_renderers_CurrencyShopItem.prototype = $extend(openfl_display_Sprite.prototype,{
	maxWidth: null
	,maxHeight: null
	,background: null
	,plusLabel: null
	,stampIcon: null
	,item: null
	,percentage: null
	,price: null
	,amountLabel: null
	,multiplierLabel: null
	,finalAmountLabel: null
	,equalLabel: null
	,buy: null
	,currencyIcon: null
	,_payModel: null
	,onClick: function(e) {
		this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY"));
	}
	,render: function() {
		this.drawItem();
		this.doLayout();
	}
	,drawItem: function() {
		var bgColor = 16768658;
		var percentageBg = 16742656;
		var priceBackground = 16775095;
		if(this.item.banner.toLowerCase() == "none") {
			bgColor = 16775095;
			percentageBg = 16769024;
			priceBackground = 16768658;
		}
		this.background = new openfl_display_Sprite();
		this.background.get_graphics().beginFill(bgColor,1);
		this.background.get_graphics().drawRoundRect(0,0,this.maxWidth,this.maxHeight,5,5);
		this.background.get_graphics().endFill();
		this.addChild(this.background);
		this.amountLabel = new oaktree_ext_ui_Label({ text : Std.string(this.item.preAmount), fontSize : 18, align : 3});
		this.amountLabel.set_autoSize(1);
		this.disableTextField(this.amountLabel);
		this.addChild(this.amountLabel);
		if(this.item.banner != "none") {
			this.stampIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("multiplier_stamp").get_bitmapData());
			this.addChild(this.stampIcon);
			this.multiplierLabel = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text(this.item.banner), fontSize : 14, color : 16777215, wordWrap : true, maxWidth : 65});
			this.addChild(this.multiplierLabel);
		}
		this.plusLabel = new oaktree_ext_ui_Label({ text : "+", fontSize : 16, align : 3});
		this.plusLabel.set_autoSize(1);
		this.disableTextField(this.plusLabel);
		this.addChild(this.plusLabel);
		var baseRectOptions = { labelOptions : { text : Std.string(this.item.percentage) + "%", fontSize : 16, align : 3, color : 16777215}, labelWidth : 90, labelHeight : this.maxHeight - 10, radius : 5, backgroundColor : percentageBg};
		this.percentage = new oaktree_ext_ui_controls_LabelRectangle(baseRectOptions);
		this.addChild(this.percentage);
		this.equalLabel = new oaktree_ext_ui_Label({ text : "=", fontSize : 16, align : 3, color : 16742656});
		this.equalLabel.set_autoSize(1);
		this.disableTextField(this.equalLabel);
		this.addChild(this.equalLabel);
		this.finalAmountLabel = new oaktree_ext_ui_Label({ text : Std.string(this.item.finalAmount), fontSize : 18, align : 4, color : 16742656});
		this.finalAmountLabel.set_autoSize(3);
		this.finalAmountLabel.set_selectable(false);
		this.finalAmountLabel.mouseEnabled = false;
		this.addChild(this.finalAmountLabel);
		baseRectOptions.labelOptions.fontSize = 14;
		baseRectOptions.labelWidth = 100;
		baseRectOptions.labelOptions.color = 0;
		baseRectOptions.labelOptions.text = this._payModel.getCurrencyCode() + " " + Std.string(this.item.price);
		baseRectOptions.backgroundColor = priceBackground;
		this.price = new oaktree_ext_ui_controls_LabelRectangle(baseRectOptions);
		this.addChild(this.price);
		this.currencyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
		this.addChild(this.currencyIcon);
		this.buy = new agario_views_controls_SemiRoundButton(oaktree_ext_localization_I18n.text("menu_shop_buy"),80,this.maxHeight);
		this.addChild(this.buy);
		this.buttonMode = true;
		this.useHandCursor = true;
		this.addEventListener("click",$bind(this,this.onClick));
		this.addEventListener("mouseOver",$bind(this,this.onRollIOverItem));
		this.addEventListener("mouseOut",$bind(this,this.onRollOutItem));
	}
	,disableTextField: function(input) {
		input.set_selectable(false);
		input.mouseEnabled = false;
	}
	,onRollOutItem: function(e) {
		this.buy.set_currentState(this.buy.upState);
		this.background.set_alpha(1);
	}
	,onRollIOverItem: function(e) {
		this.buy.set_currentState(this.buy.overState);
		this.background.set_alpha(0.5);
	}
	,doLayout: function() {
		if(this.stampIcon != null) {
			while(this.stampIcon.get_height() > this.maxHeight) this.stampIcon.set_scaleX((function($this) {
				var $r;
				var _g = $this.stampIcon;
				$r = _g.set_scaleY(_g.get_scaleY() - 0.001);
				return $r;
			}(this)));
			this.stampIcon.smoothing = true;
			this.stampIcon.set_y((this.maxHeight - this.stampIcon.get_height()) / 2);
			this.stampIcon.set_x(0);
			this.multiplierLabel.set_x((this.stampIcon.get_width() - this.multiplierLabel.get_width()) / 2 + 5);
			this.multiplierLabel.set_y((this.maxHeight - this.multiplierLabel.get_height()) / 2);
		}
		this.background.set_x(70);
		this.background.set_y(0);
		this.amountLabel.set_x(90);
		this.amountLabel.set_y((this.maxHeight - this.amountLabel.get_height()) / 2);
		this.percentage.set_x(this.maxWidth / 3);
		this.percentage.set_y((this.maxHeight - this.percentage.get_height()) / 2);
		this.plusLabel.set_x(this.percentage.get_x() - 40);
		this.plusLabel.set_y((this.maxHeight - this.plusLabel.get_height()) / 2);
		this.equalLabel.set_x(this.percentage.get_x() + this.percentage.get_width() + 20);
		this.equalLabel.set_y((this.maxHeight - this.equalLabel.get_height()) / 2);
		this.buy.set_x(this.background.get_x() + this.maxWidth - this.buy.get_width());
		this.price.set_x(this.buy.get_x() - this.price.get_width() - 50);
		this.price.set_y((this.background.get_height() - this.price.get_height()) / 2);
		this.currencyIcon.set_x(this.price.get_x() - 60);
		this.currencyIcon.set_y((this.maxHeight - this.currencyIcon.get_height()) / 2);
		this.finalAmountLabel.set_x(this.currencyIcon.get_x() - this.finalAmountLabel.get_width() - 5);
		this.finalAmountLabel.set_y((this.maxHeight - this.finalAmountLabel.get_height()) / 2);
	}
	,__class__: agario_module_shop_renderers_CurrencyShopItem
});
var oaktree_core_IEntityContainer = function() { };
$hxClasses["oaktree.core.IEntityContainer"] = oaktree_core_IEntityContainer;
oaktree_core_IEntityContainer.__name__ = ["oaktree","core","IEntityContainer"];
oaktree_core_IEntityContainer.prototype = {
	removeEntity: null
	,addEntity: null
	,__class__: oaktree_core_IEntityContainer
};
var oaktree_core_IEntity = function() { };
$hxClasses["oaktree.core.IEntity"] = oaktree_core_IEntity;
oaktree_core_IEntity.__name__ = ["oaktree","core","IEntity"];
oaktree_core_IEntity.prototype = {
	getId: null
	,onAddedToScene: null
	,onRemovedFromScene: null
	,addComponent: null
	,removeComponent: null
	,removeAllComponents: null
	,update: null
	,dispose: null
	,__class__: oaktree_core_IEntity
};
var oaktree_core_VisualEntity = function(pStandalone) {
	if(pStandalone == null) pStandalone = false;
	openfl_display_Sprite.call(this);
	this._entity = new oaktree_core_Entity(pStandalone);
};
$hxClasses["oaktree.core.VisualEntity"] = oaktree_core_VisualEntity;
oaktree_core_VisualEntity.__name__ = ["oaktree","core","VisualEntity"];
oaktree_core_VisualEntity.__interfaces__ = [oaktree_core_IEntityContainer,oaktree_core_IEntity];
oaktree_core_VisualEntity.__super__ = openfl_display_Sprite;
oaktree_core_VisualEntity.prototype = $extend(openfl_display_Sprite.prototype,{
	_entity: null
	,getId: function() {
		return this._entity.getId();
	}
	,onAddedToScene: function(pScene) {
		this._entity.onAddedToScene(pScene);
	}
	,onRemovedFromScene: function() {
		this._entity.onRemovedFromScene();
	}
	,addComponent: function(pComponent) {
		return this._entity.addComponent(pComponent);
	}
	,removeComponent: function(pComponent) {
		return this._entity.removeComponent(pComponent);
	}
	,removeAllComponents: function() {
		this._entity.removeAllComponents();
	}
	,addEntity: function(pEntity) {
		return this._entity.addEntity(pEntity);
	}
	,removeEntity: function(pEntity) {
		return this._entity.removeEntity(pEntity);
		return pEntity;
	}
	,update: function(pDT) {
		this._entity.update(pDT);
	}
	,dispose: function() {
		this._entity.dispose();
	}
	,get_standalone: function() {
		return this._entity.standalone;
	}
	,set_standalone: function(value) {
		return this._entity.set_standalone(value);
	}
	,__class__: oaktree_core_VisualEntity
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_standalone:"set_standalone",get_standalone:"get_standalone"})
});
var oaktree_core_scene_IScene = function() { };
$hxClasses["oaktree.core.scene.IScene"] = oaktree_core_scene_IScene;
oaktree_core_scene_IScene.__name__ = ["oaktree","core","scene","IScene"];
oaktree_core_scene_IScene.prototype = {
	update: null
	,lateUpdate: null
	,dispose: null
	,onAdded: null
	,onRemoved: null
	,__class__: oaktree_core_scene_IScene
};
var oaktree_core_scene_Scene = function() {
	oaktree_core_VisualEntity.call(this);
	this._entity.scene = this;
};
$hxClasses["oaktree.core.scene.Scene"] = oaktree_core_scene_Scene;
oaktree_core_scene_Scene.__name__ = ["oaktree","core","scene","Scene"];
oaktree_core_scene_Scene.__interfaces__ = [oaktree_core_scene_IScene];
oaktree_core_scene_Scene.__super__ = oaktree_core_VisualEntity;
oaktree_core_scene_Scene.prototype = $extend(oaktree_core_VisualEntity.prototype,{
	dispose: function() {
		oaktree_core_VisualEntity.prototype.dispose.call(this);
	}
	,update: function(dt) {
		oaktree_core_VisualEntity.prototype.update.call(this,dt);
	}
	,lateUpdate: function() {
	}
	,onAdded: function() {
	}
	,onRemoved: function() {
		this.dispose();
	}
	,__class__: oaktree_core_scene_Scene
});
var oaktree_ext_ui_View = function() {
	this.debugui = false;
	this.allowDisableClose = true;
	this.isLoading = false;
	this.maxHeight = 0;
	this.maxWidth = 0;
	this._initialized = false;
	oaktree_core_scene_Scene.call(this);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["oaktree.ext.ui.View"] = oaktree_ext_ui_View;
oaktree_ext_ui_View.__name__ = ["oaktree","ext","ui","View"];
oaktree_ext_ui_View.__super__ = oaktree_core_scene_Scene;
oaktree_ext_ui_View.prototype = $extend(oaktree_core_scene_Scene.prototype,{
	_initialized: null
	,caller: null
	,maxWidth: null
	,maxHeight: null
	,isLoading: null
	,allowDisableClose: null
	,debugui: null
	,disable: function() {
	}
	,enable: function() {
	}
	,resize: function(W,H) {
	}
	,open: function(animate) {
		if(animate == null) animate = false;
	}
	,close: function(animate) {
		if(animate == null) animate = false;
	}
	,removeFromParent: function() {
		this.parent.removeChild(this);
	}
	,updateView: function() {
	}
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		if(!this._initialized) {
			this.initialize();
			this._initialized = true;
		}
	}
	,onRemovedFromStage: function(e) {
		this.removeEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.deinitialize();
	}
	,initialize: function() {
		if(this.debugui) {
			this.get_graphics().beginFill(16711680,0.5);
			this.get_graphics().drawRect(0,0,this.maxWidth,this.maxHeight);
			this.get_graphics().endFill();
		}
	}
	,deinitialize: function() {
	}
	,dispose: function() {
		this.removeEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
	}
	,__class__: oaktree_ext_ui_View
});
var agario_module_shop_renderers_ShopBoostItem = function(itemDataList) {
	oaktree_ext_ui_View.call(this);
	this.itemDataList = itemDataList;
	this.maxWidth = 277;
	this.maxHeight = 331;
	this.pricesContainerWidth = this.maxWidth - 20;
	this.btnColors = [6349312,16742401];
	this.btnOverColors = [5622016,15166464];
	Core.get_events().addEventListener("ShopEvent::DISABLE_CLOSED",$bind(this,this.onTooltipClose));
};
$hxClasses["agario.module.shop.renderers.ShopBoostItem"] = agario_module_shop_renderers_ShopBoostItem;
agario_module_shop_renderers_ShopBoostItem.__name__ = ["agario","module","shop","renderers","ShopBoostItem"];
agario_module_shop_renderers_ShopBoostItem.__super__ = oaktree_ext_ui_View;
agario_module_shop_renderers_ShopBoostItem.prototype = $extend(oaktree_ext_ui_View.prototype,{
	itemIcon: null
	,title: null
	,background: null
	,buyOptionsContainer: null
	,hint: null
	,itemDataList: null
	,pricesContainerWidth: null
	,btnColors: null
	,btnOverColors: null
	,originalPosition: null
	,onTooltipClose: function(e) {
		this.addChild(this.hint);
		this.hint.set_x(this.originalPosition.x);
		this.hint.set_y(this.originalPosition.y);
		this.hint.closeHint();
		Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",false);
	}
	,onRemovedFromStage: function(e) {
		this.onTooltipClose();
		oaktree_ext_ui_View.prototype.onRemovedFromStage.call(this,e);
		this._initialized = false;
	}
	,initialize: function() {
		this.background = new openfl_display_Shape();
		this.background.get_graphics().beginFill(16053492,1);
		this.background.get_graphics().drawRoundRect(0,0,this.maxWidth,this.maxHeight,5,5);
		this.background.get_graphics().endFill();
		this.addChild(this.background);
		this.title = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text(this.itemDataList[0].category.title), fontSize : 18, align : 0, bold : true});
		this.addChild(this.title);
		this.title.set_width(this.maxWidth - 20);
		this.title.mouseEnabled = false;
		var hintText = oaktree_ext_localization_I18n.text(this.itemDataList[0].category.description);
		this.hint = new agario_views_controls_HintTooltip(hintText,this.maxWidth - 10 | 0,50,"left");
		this.addChild(this.hint);
		Core.get_events().addEventListener("ShopEvent::SHOP_ENABLED",$bind(this,this.handleShopEnabled));
		this.hint.addEventListener(agario_module_shop_events_HintTooltipEvent.CLOSED,$bind(this,this.onHintClosed));
		this.hint.addEventListener(agario_module_shop_events_HintTooltipEvent.OPENED,$bind(this,this.onHintOpened));
		var atlas = Core.get_assets().getAtlas("main_shop");
		var imgName = StringTools.replace(this.itemDataList[0].category.image,".png","");
		this.itemIcon = new openfl_display_Bitmap(atlas.getTexture(imgName).get_bitmapData());
		this.addChild(this.itemIcon);
		this.drawDynamicContent();
	}
	,handleShopEnabled: function(e) {
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",false);
		this.addChild(this.hint);
		this.hint.set_x(this.originalPosition.x);
		this.hint.set_y(this.originalPosition.y);
		this.hint.closeHint();
	}
	,onHintOpened: function(e) {
		Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",true);
		var mousePosition = this.localToGlobal(new openfl_geom_Point(this.hint.get_x(),this.hint.get_y()));
		this.hint.set_x(mousePosition.x);
		this.hint.set_y(mousePosition.y);
		this.stage.addChild(this.hint);
	}
	,onHintClosed: function(e) {
		this.addChild(this.hint);
		this.hint.set_x(this.originalPosition.x);
		this.hint.set_y(this.originalPosition.y);
		Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",false);
	}
	,drawDynamicContent: function() {
		this.buyOptionsContainer = new openfl_display_Sprite();
		this.addChild(this.buyOptionsContainer);
		var idx = 0;
		var cursor_y = 0;
		var _g1 = 0;
		var _g = this.itemDataList.length;
		while(_g1 < _g) {
			var i = _g1++;
			var infoData = [this.itemDataList[i]];
			var priceContainer = new openfl_display_Sprite();
			this.buyOptionsContainer.addChild(priceContainer);
			if(idx > 0) {
				var line = new openfl_display_Shape();
				line.get_graphics().lineStyle(1,13421772,1);
				line.get_graphics().lineTo(this.pricesContainerWidth,0);
				priceContainer.addChild(line);
			}
			var priceName = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text(infoData[0].title), align : 0});
			priceName.set_width(this.pricesContainerWidth);
			priceName.set_selectable(false);
			priceContainer.addChild(priceName);
			priceName.set_x((this.pricesContainerWidth - priceName.get_width()) * 0.5);
			priceName.set_y(10);
			var icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
			var priceButton = new agario_views_controls_ColorButton({ color : this.btnColors[idx], overColor : this.btnOverColors[idx], text : "" + infoData[0].price, textColorOver : 16777215, textColor : 16777215, icon : icon, w : 140, h : 40, fontSize : 14, bold : true});
			priceContainer.addChild(priceButton);
			priceButton.set_x((this.pricesContainerWidth - priceButton.get_width()) * 0.5);
			priceButton.set_y(priceName.get_y() + priceName.get_height() + 5);
			priceButton.data = Core.models.shopBoostItems.getItemByPurchaseId(infoData[0].purchaseId);
			var userBoost = null;
			if(!Core.user.isGuest) userBoost = Core.user.wallet.filter((function(infoData) {
				return function(item) {
					return item.productId == infoData[0].gameplayInfo.productId;
				};
			})(infoData))[0];
			if(userBoost != null && userBoost.get_balance() > 0) {
				var quantity = new agario_views_controls_QuantityCircle(userBoost.get_balance());
				priceContainer.addChild(quantity);
				quantity.set_x(priceButton.get_x() + priceButton.get_width());
				quantity.set_y(priceButton.get_y());
				if(this.itemDataList[i].get_inUse() == false) {
					priceButton.hideIcon();
					priceButton.set_text(oaktree_ext_localization_I18n.text("menu_shop_use"));
					priceButton.addEventListener("click",$bind(this,this.onUseClick));
				} else priceButton.addEventListener("click",$bind(this,this.onClick));
			} else priceButton.addEventListener("click",$bind(this,this.onClick));
			if(this.itemDataList[i].bestDealSticker) {
				var sticker = new agario_views_controls_StampSticker(oaktree_ext_localization_I18n.text("menu_shop_coins_best"));
				priceContainer.addChild(sticker);
				sticker.set_x(priceButton.get_x());
				sticker.set_y(priceButton.get_y());
			}
			priceContainer.set_x((this.maxWidth - this.pricesContainerWidth) * 0.5);
			priceContainer.set_y(cursor_y + 20 * idx);
			cursor_y += 25 * idx + priceContainer.get_height();
			idx++;
		}
		this.doLayout();
	}
	,updateView: function() {
		oaktree_ext_ui_View.prototype.updateView.call(this);
		while(this.buyOptionsContainer.get_numChildren() > 0) this.buyOptionsContainer.removeChildAt(0);
		this.removeChild(this.buyOptionsContainer);
		this.drawDynamicContent();
	}
	,onUseClick: function(e) {
		var btn = e.currentTarget;
		btn.set_enabled(false);
		var data = btn.data;
		if(data != null) this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::USE",data));
	}
	,onClick: function(e) {
		var btn = e.currentTarget;
		btn.set_enabled(false);
		if(Core.user.isGuest) btn.delayedEnable();
		var data = btn.data;
		if(data != null) this.dispatchEvent(new agario_module_shop_events_ShopEvent("ShopEvent::BUY",data));
	}
	,doLayout: function() {
		this.hint.set_x(this.maxWidth - this.hint.get_width() - 10);
		this.hint.set_y(10);
		this.originalPosition = new openfl_geom_Point(this.hint.get_x(),this.hint.get_y());
		this.title.set_x(10);
		this.title.set_y(10);
		this.itemIcon.set_x((this.maxWidth - this.itemIcon.get_width()) * 0.5);
		this.itemIcon.set_y(80);
		this.buyOptionsContainer.set_y(this.itemIcon.get_y() + this.itemIcon.get_height() + 10);
	}
	,dispose: function() {
		Core.get_events().removeEventListener("ShopEvent::SHOP_ENABLED",$bind(this,this.handleShopEnabled));
		Core.get_events().removeEventListener("ShopEvent::DISABLE_CLOSED",$bind(this,this.onTooltipClose));
		this.hint.removeEventListener(agario_module_shop_events_HintTooltipEvent.CLOSED,$bind(this,this.onHintClosed));
		this.hint.removeEventListener(agario_module_shop_events_HintTooltipEvent.OPENED,$bind(this,this.onHintOpened));
		oaktree_ext_ui_View.prototype.dispose.call(this);
	}
	,__class__: agario_module_shop_renderers_ShopBoostItem
});
var agario_module_shop_renderers_ShopSectionButton = function(name,face,color,textColor) {
	var state = new openfl_display_Sprite();
	this.sectionFace = new openfl_display_Bitmap(face);
	this.sectionFace.smoothing = true;
	state.addChild(this.sectionFace);
	this.normalSubtitleArea = new openfl_display_Shape();
	this.normalSubtitleArea.get_graphics().beginFill(color,0.8);
	this.normalSubtitleArea.get_graphics().drawRoundRect(0,0,this.sectionFace.get_width(),this.sectionFace.get_height() / 5,5,5);
	this.normalSubtitleArea.get_graphics().endFill();
	state.addChild(this.normalSubtitleArea);
	this.overSubtitleArea = new openfl_display_Shape();
	this.overSubtitleArea.get_graphics().beginFill(color,1);
	this.overSubtitleArea.get_graphics().drawRoundRect(0,0,this.sectionFace.get_width(),this.sectionFace.get_height() / 5,5,5);
	this.overSubtitleArea.get_graphics().endFill();
	state.addChild(this.overSubtitleArea);
	this.overSubtitleArea.set_visible(false);
	this.normalSubtitleArea.set_y(this.overSubtitleArea.set_y(this.sectionFace.get_height() - this.normalSubtitleArea.get_height()));
	var format = new openfl_text_TextFormat(Core.get_fontName(),23,0,true);
	format.align = 3;
	this.subtitleText = new openfl_text_TextField();
	this.subtitleText.set_defaultTextFormat(format);
	this.subtitleText.set_text(name);
	this.subtitleText.set_height(this.subtitleText.get_textHeight() + 5);
	this.subtitleText.set_autoSize(1);
	this.subtitleText.set_textColor(textColor);
	this.subtitleText.set_x((this.sectionFace.get_width() - this.subtitleText.get_textWidth()) * 0.5);
	this.subtitleText.set_y(this.normalSubtitleArea.get_y() + (this.normalSubtitleArea.get_height() - this.subtitleText.get_textHeight()) * 0.5);
	state.addChild(this.subtitleText);
	this.upState = this.downState = this.overState = state;
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.module.shop.renderers.ShopSectionButton"] = agario_module_shop_renderers_ShopSectionButton;
agario_module_shop_renderers_ShopSectionButton.__name__ = ["agario","module","shop","renderers","ShopSectionButton"];
agario_module_shop_renderers_ShopSectionButton.__super__ = oaktree_ext_ui_controls_Button;
agario_module_shop_renderers_ShopSectionButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	sectionFace: null
	,subtitleText: null
	,normalSubtitleArea: null
	,overSubtitleArea: null
	,updateState: function() {
		oaktree_ext_ui_controls_Button.prototype.updateState.call(this);
		if(this.mouseIsOver) {
			this.overSubtitleArea.set_visible(true);
			this.normalSubtitleArea.set_visible(false);
		} else {
			this.overSubtitleArea.set_visible(false);
			this.normalSubtitleArea.set_visible(true);
		}
	}
	,__class__: agario_module_shop_renderers_ShopSectionButton
});
var agario_module_shop_screens_ShopCoinsScreen = function() {
	oaktree_ext_ui_View.call(this);
	this.set_name(oaktree_ext_localization_I18n.text("menu_shop_coins_title"));
};
$hxClasses["agario.module.shop.screens.ShopCoinsScreen"] = agario_module_shop_screens_ShopCoinsScreen;
agario_module_shop_screens_ShopCoinsScreen.__name__ = ["agario","module","shop","screens","ShopCoinsScreen"];
agario_module_shop_screens_ShopCoinsScreen.__super__ = oaktree_ext_ui_View;
agario_module_shop_screens_ShopCoinsScreen.prototype = $extend(oaktree_ext_ui_View.prototype,{
	initialize: function() {
		oaktree_ext_ui_View.prototype.initialize.call(this);
		this.buildCoinShop();
	}
	,sortByAmount: function(a,b) {
		if(a.finalAmount < b.finalAmount) return 1;
		if(a.finalAmount > b.finalAmount) return -1;
		return 0;
	}
	,buildCoinShop: function() {
		var shopWidth = 645;
		var list = new oaktree_ext_ui_View();
		list.set_y(30);
		list.set_x(15);
		this.addChild(list);
		Core.models.shopCoins.shopCoinsList.sort($bind(this,this.sortByAmount));
		var idx = 0;
		var _g = 0;
		var _g1 = Core.models.shopCoins.shopCoinsList;
		while(_g < _g1.length) {
			var shopCoinItem = _g1[_g];
			++_g;
			if(shopCoinItem.visibility == "default") {
				var item = new agario_module_shop_renderers_CurrencyShopItem(shopCoinItem);
				item.addEventListener("ShopEvent::BUY",$bind(this,this.onBuyClick));
				list.addChild(item);
				item.maxWidth = shopWidth;
				item.maxHeight = 60;
				item.set_y(70 * idx);
				item.render();
				idx++;
			}
		}
		var freeBackground = new openfl_display_Shape();
		freeBackground.get_graphics().beginFill(16711680);
		oaktree_utils_MCGraphics.drawRoundRectComplex(freeBackground.get_graphics(),0,0,90,25,5,5,0,0);
		freeBackground.get_graphics().endFill();
		this.addChild(freeBackground);
		freeBackground.set_x(list.get_x() + shopWidth / 3);
		freeBackground.set_y(list.get_y() - freeBackground.get_height());
		var freeLabel = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_shop_coins_free"), fontSize : 16, align : 0, color : 16777215});
		this.addChild(freeLabel);
		freeLabel.set_x(freeBackground.get_x() + (freeBackground.get_width() - freeLabel.get_width()) / 2);
		freeLabel.set_y(freeBackground.get_y());
	}
	,onBuyClick: function(e) {
		Core.get_events().dispatchEventWith("ShopEvent::BUY",e.currentTarget.item.purchaseId);
	}
	,__class__: agario_module_shop_screens_ShopCoinsScreen
});
var agario_module_shop_screens_ShopGenericBoostScreen = function() {
	oaktree_ext_ui_View.call(this);
};
$hxClasses["agario.module.shop.screens.ShopGenericBoostScreen"] = agario_module_shop_screens_ShopGenericBoostScreen;
agario_module_shop_screens_ShopGenericBoostScreen.__name__ = ["agario","module","shop","screens","ShopGenericBoostScreen"];
agario_module_shop_screens_ShopGenericBoostScreen.__super__ = oaktree_ext_ui_View;
agario_module_shop_screens_ShopGenericBoostScreen.prototype = $extend(oaktree_ext_ui_View.prototype,{
	initialize: function() {
		oaktree_ext_ui_View.prototype.initialize.call(this);
	}
	,createBoostItems: function(data) {
		var list = new haxe_ds_IntMap();
		var _g1 = 0;
		var _g = data.length;
		while(_g1 < _g) {
			var i = _g1++;
			var cat = data[i].categoryPosition;
			var arr = list.h[cat];
			if(arr == null) arr = [];
			arr.push(data[i]);
			list.h[cat] = arr;
		}
		var posX = 0;
		var $it0 = list.iterator();
		while( $it0.hasNext() ) {
			var dataList = $it0.next();
			var boostItem = new agario_module_shop_renderers_ShopBoostItem(dataList);
			boostItem.maxWidth = this.maxWidth / 2 - 10;
			boostItem.maxHeight = this.maxHeight - 20;
			boostItem.addEventListener("ShopEvent::BUY",$bind(this,this.onBuy));
			boostItem.addEventListener("ShopEvent::USE",$bind(this,this.onUse));
			this.addChild(boostItem);
			var margin = 0;
			if(posX > 0) margin = 20;
			boostItem.set_x(posX * boostItem.maxWidth + margin);
			posX++;
		}
	}
	,onBuy: function(e) {
		var data = e.data;
		if(data != null) Core.get_events().dispatchEventWith("ShopEvent::BUY",data.purchaseId);
	}
	,onUse: function(e) {
		var data = e.data;
		if(data != null) Core.get_events().dispatchEventWith("ShopEvent::USE",data);
	}
	,updateView: function() {
		oaktree_ext_ui_View.prototype.updateView.call(this);
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(Std["is"](this.getChildAt(i),agario_module_shop_renderers_ShopBoostItem)) (js_Boot.__cast(this.getChildAt(i) , agario_module_shop_renderers_ShopBoostItem)).updateView();
		}
	}
	,onRemovedFromStage: function(e) {
		oaktree_ext_ui_View.prototype.onRemovedFromStage.call(this,e);
		this._initialized = false;
	}
	,__class__: agario_module_shop_screens_ShopGenericBoostScreen
});
var agario_module_shop_screens_ShopMainScreen = function() {
	oaktree_ext_ui_View.call(this);
	this.set_name(oaktree_ext_localization_I18n.text("menu_main_shop"));
};
$hxClasses["agario.module.shop.screens.ShopMainScreen"] = agario_module_shop_screens_ShopMainScreen;
agario_module_shop_screens_ShopMainScreen.__name__ = ["agario","module","shop","screens","ShopMainScreen"];
agario_module_shop_screens_ShopMainScreen.__super__ = oaktree_ext_ui_View;
agario_module_shop_screens_ShopMainScreen.prototype = $extend(oaktree_ext_ui_View.prototype,{
	coinsSectionBtn: null
	,skinsSectionBtn: null
	,massSectionBtn: null
	,xpSectionBtn: null
	,initialize: function() {
		oaktree_ext_ui_View.prototype.initialize.call(this);
		var sectionsContainer = new openfl_display_Sprite();
		this.addChild(sectionsContainer);
		var atlas = Core.get_assets().getAtlas("main_shop");
		this.coinsSectionBtn = this.createSection(0,oaktree_ext_localization_I18n.text("menu_shop_button_coins"),atlas.get("coins_button").get_bitmapData(),6349312,3572736);
		sectionsContainer.addChild(this.coinsSectionBtn);
		this.skinsSectionBtn = this.createSection(1,oaktree_ext_localization_I18n.text("menu_shop_skins_title"),atlas.get("skins_button").get_bitmapData(),16768001,12285696);
		sectionsContainer.addChild(this.skinsSectionBtn);
		this.massSectionBtn = this.createSection(2,oaktree_ext_localization_I18n.text("menu_shop_button_mass"),atlas.get("mass_button").get_bitmapData(),16742401,11286528);
		sectionsContainer.addChild(this.massSectionBtn);
		this.xpSectionBtn = this.createSection(3,oaktree_ext_localization_I18n.text("menu_shop_button_boost"),atlas.get("xp_button").get_bitmapData(),57087,30889);
		sectionsContainer.addChild(this.xpSectionBtn);
		sectionsContainer.set_y(0);
		sectionsContainer.set_x((this.maxWidth - sectionsContainer.get_width()) * 0.5);
	}
	,createSection: function(idx,name,asset,color,textColor) {
		var sectionBtn = new agario_module_shop_renderers_ShopSectionButton(name,asset,color,textColor);
		var fitScale = (this.maxWidth / 2 - 20 - 10) / sectionBtn.get_width();
		sectionBtn.set_scaleX(sectionBtn.set_scaleY(fitScale));
		var idxX = idx % 2;
		var idxY = Math.floor(idx / 2);
		sectionBtn.set_x(idxX * (sectionBtn.get_width() + 10));
		sectionBtn.set_y(idxY * (sectionBtn.get_height() + 10));
		return sectionBtn;
	}
	,dispose: function() {
		oaktree_ext_ui_View.prototype.dispose.call(this);
	}
	,__class__: agario_module_shop_screens_ShopMainScreen
});
var agario_module_shop_screens_ShopMassScreen = function() {
	agario_module_shop_screens_ShopGenericBoostScreen.call(this);
	this.set_name(oaktree_ext_localization_I18n.text("menu_shop_mass_title"));
};
$hxClasses["agario.module.shop.screens.ShopMassScreen"] = agario_module_shop_screens_ShopMassScreen;
agario_module_shop_screens_ShopMassScreen.__name__ = ["agario","module","shop","screens","ShopMassScreen"];
agario_module_shop_screens_ShopMassScreen.__super__ = agario_module_shop_screens_ShopGenericBoostScreen;
agario_module_shop_screens_ShopMassScreen.prototype = $extend(agario_module_shop_screens_ShopGenericBoostScreen.prototype,{
	initialize: function() {
		agario_module_shop_screens_ShopGenericBoostScreen.prototype.initialize.call(this);
		var massBoostsData = Core.models.shopBoostItems.getItemsByType(agario_module_shop_models_types_BoostType.MASS_BOOST);
		this.createBoostItems(massBoostsData);
	}
	,__class__: agario_module_shop_screens_ShopMassScreen
});
var agario_module_shop_screens_ShopSkinsScreen = function() {
	oaktree_ext_ui_View.call(this);
	this.set_name(oaktree_ext_localization_I18n.text("menu_shop_skins_title"));
};
$hxClasses["agario.module.shop.screens.ShopSkinsScreen"] = agario_module_shop_screens_ShopSkinsScreen;
agario_module_shop_screens_ShopSkinsScreen.__name__ = ["agario","module","shop","screens","ShopSkinsScreen"];
agario_module_shop_screens_ShopSkinsScreen.__super__ = oaktree_ext_ui_View;
agario_module_shop_screens_ShopSkinsScreen.prototype = $extend(oaktree_ext_ui_View.prototype,{
	view: null
	,initialize: function() {
		if(this._initialized) return;
		oaktree_ext_ui_View.prototype.initialize.call(this);
		this.view = new agario_module_shop_view_ShopSkinsView();
		this.view.maxWidth = this.maxWidth;
		this.view.maxHeight = this.maxHeight;
		this.addChild(this.view);
	}
	,updateView: function() {
		if(this.view == null) return;
		this.view.updateView();
	}
	,showTab: function(targetTab) {
		if(this.view != null) {
			this.view.openTab(targetTab);
			this.view.resetContent();
		}
	}
	,__class__: agario_module_shop_screens_ShopSkinsScreen
});
var agario_module_shop_screens_ShopXPScreen = function() {
	agario_module_shop_screens_ShopGenericBoostScreen.call(this);
	this.set_name(oaktree_ext_localization_I18n.text("menu_shop_button_boost"));
};
$hxClasses["agario.module.shop.screens.ShopXPScreen"] = agario_module_shop_screens_ShopXPScreen;
agario_module_shop_screens_ShopXPScreen.__name__ = ["agario","module","shop","screens","ShopXPScreen"];
agario_module_shop_screens_ShopXPScreen.__super__ = agario_module_shop_screens_ShopGenericBoostScreen;
agario_module_shop_screens_ShopXPScreen.prototype = $extend(agario_module_shop_screens_ShopGenericBoostScreen.prototype,{
	initialize: function() {
		agario_module_shop_screens_ShopGenericBoostScreen.prototype.initialize.call(this);
		var xpBoostsData = Core.models.shopBoostItems.getItemsByType(agario_module_shop_models_types_BoostType.XP_BOOST);
		this.createBoostItems(xpBoostsData);
	}
	,__class__: agario_module_shop_screens_ShopXPScreen
});
var oaktree_ext_ui_views_GenericDialog = function(pStateName) {
	this.openAsapAnimateParam = false;
	this.openAsap = false;
	this.parentAnchorY = 0.5;
	this.parentAnchorX = 0.5;
	this.anchorY = 0.5;
	this.anchorX = 0.5;
	this.animate = false;
	this.closeOnEscape = false;
	oaktree_ext_ui_View.call(this);
	this._viewState = pStateName;
	this.onClose = new msignal_Signal0();
};
$hxClasses["oaktree.ext.ui.views.GenericDialog"] = oaktree_ext_ui_views_GenericDialog;
oaktree_ext_ui_views_GenericDialog.__name__ = ["oaktree","ext","ui","views","GenericDialog"];
oaktree_ext_ui_views_GenericDialog.__super__ = oaktree_ext_ui_View;
oaktree_ext_ui_views_GenericDialog.prototype = $extend(oaktree_ext_ui_View.prototype,{
	closeOnEscape: null
	,animate: null
	,anchorX: null
	,anchorY: null
	,parentAnchorX: null
	,parentAnchorY: null
	,onClose: null
	,disableShape: null
	,container: null
	,background: null
	,closeButton: null
	,loadingLabel: null
	,openAsap: null
	,openAsapAnimateParam: null
	,_viewState: null
	,initialize: function() {
		this.container = new openfl_display_Sprite();
		this.resizeBackground(this.maxWidth,this.maxHeight);
		this.container.addChild(this.background);
		this.closeButton = new oaktree_ext_ui_controls_CloseButton();
		this.container.addChild(this.closeButton);
		this.closeButton.addEventListener("click",$bind(this,this.onCloseButtonClick));
		this.container.set_visible(false);
		oaktree_ext_ui_View.prototype.addChild.call(this,this.container);
		this.disableShape = new openfl_display_Sprite();
		this.disableShape.addEventListener("click",$bind(this,this.onDisableClick));
		this.disableShape.set_visible(false);
		oaktree_ext_ui_View.prototype.addChild.call(this,this.disableShape);
		this.updateBaseUI();
		if(this.openAsap) this.open(this.openAsapAnimateParam);
		openfl_Lib.current.stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	}
	,onKeyDown: function(e) {
		if(e.keyCode == 27) {
			var consumed = this.onEscapePress();
			if(!consumed && this.closeOnEscape && this.isTopState()) this.close();
		}
	}
	,isTopState: function() {
		return this._viewState == "" || oaktree_OakTree.engine.states.isTopState(this._viewState);
	}
	,onEscapePress: function() {
		return false;
	}
	,updateBaseUI: function() {
		if(this.closeButton != null) {
			this.closeButton.set_x(this.maxWidth - this.closeButton.get_width() - 8);
			this.closeButton.set_y(8);
		}
		if(this.disableShape != null) {
			this.disableShape.get_graphics().clear();
			this.disableShape.get_graphics().beginFill(0,0.4);
			this.disableShape.get_graphics().drawRoundRect(0,0,this.maxWidth,this.maxHeight,20,20);
			this.disableShape.get_graphics().endFill();
		}
	}
	,resizeBackground: function(W,H,animated,callback) {
		if(animated == null) animated = false;
		var _g = this;
		if(this.background == null) this.background = new openfl_display_Sprite();
		if(animated) motion_Actuate.update($bind(this,this.resizeLoop),.5,[this.get_width(),this.get_height()],[W,H]).onComplete(function() {
			_g.maxWidth = W;
			_g.maxHeight = H;
			_g.updateBaseUI();
			if(callback != null) callback();
		}); else {
			this.maxWidth = W;
			this.maxHeight = H;
			this.background.get_graphics().clear();
			this.background.get_graphics().beginFill(16777215,1);
			this.background.get_graphics().drawRoundRect(0,0,W,H,20,20);
			this.background.get_graphics().endFill();
			this.updateBaseUI();
			this.resize(oaktree_OakTree.stage.stageWidth,oaktree_OakTree.stage.stageHeight);
			if(callback != null) callback();
		}
	}
	,resizeLoop: function(w,h) {
		if(this.background == null) this.background = new openfl_display_Sprite();
		this.background.get_graphics().clear();
		this.background.get_graphics().beginFill(16777215,1);
		this.background.get_graphics().drawRoundRect(0,0,w,h,20,20);
		this.background.get_graphics().endFill();
		this.maxWidth = this.background.get_width();
		this.maxHeight = this.background.get_height();
		this.resize(oaktree_OakTree.stage.stageWidth,oaktree_OakTree.stage.stageHeight);
	}
	,dispose: function() {
		openfl_Lib.current.stage.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		this.onClose.removeAll();
		this.closeButton.removeEventListener("click",$bind(this,this.onCloseButtonClick));
		this.disableShape.removeEventListener("click",$bind(this,this.onDisableClick));
		this.closeButton.dispose();
		oaktree_ext_ui_View.prototype.dispose.call(this);
	}
	,enable: function() {
		this.disableShape.set_visible(false);
		oaktree_ext_ui_View.prototype.enable.call(this);
	}
	,disable: function() {
		this.addChild(this.closeButton);
		this.disableShape.set_visible(true);
		oaktree_ext_ui_View.prototype.disable.call(this);
	}
	,onDisableClick: function(e) {
		if(this.allowDisableClose) {
			oaktree_OakTree.events.dispatchEventWith("ShopEvent::DISABLE_CLOSED");
			this.enable();
		}
	}
	,open: function(animate) {
		if(animate == null) animate = false;
		openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
		if(this.container == null) {
			this.openAsap = true;
			this.openAsapAnimateParam = animate;
			return;
		}
		if(animate) {
			this.container.set_y(-this.container.get_height());
			this.container.set_visible(true);
			this.container.set_alpha(0);
			motion_Actuate.tween(this.container,1,{ y : 0, alpha : 1}).onComplete($bind(this,this.dialogReady));
			this.set_visible(true);
		} else {
			this.container.set_visible(true);
			this.dialogReady();
		}
		this.onShow();
		oaktree_ext_ui_View.prototype.open.call(this);
	}
	,dialogReady: function() {
	}
	,onShow: function() {
		if(this._viewState != null) oaktree_OakTree.engine.states.enable(this._viewState);
	}
	,onHide: function() {
		if(this._viewState != null) oaktree_OakTree.engine.states.disable(this._viewState);
	}
	,close: function(animate) {
		if(animate == null) animate = false;
		oaktree_ext_ui_View.prototype.close.call(this);
		this.deinitialize();
		this.onClose.dispatch();
		this.onHide();
		this.dispatchEvent(new oaktree_core_events_GameEvent(oaktree_ext_ui_views_GenericDialog.CLOSE,this));
	}
	,onCloseButtonClick: function(e) {
		this.close();
		openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
	}
	,removeChild: function(child) {
		if(this.container.contains(child)) return this.container.removeChild(child);
		return oaktree_ext_ui_View.prototype.removeChild.call(this,child);
	}
	,contains: function(child) {
		if(this.container != null && this.container.contains(child)) return true;
		return oaktree_ext_ui_View.prototype.contains.call(this,child);
	}
	,addChild: function(child) {
		if(js_Boot.__instanceof(child,oaktree_core_IEntity)) this.addEntity(child);
		return this.container.addChild(child);
	}
	,setChildIndex: function(child,index) {
		this.container.setChildIndex(child,index);
		return;
	}
	,showLoading: function(loadingText) {
		if(loadingText == null) loadingText = "Loading...";
		if(this.loadingLabel == null) {
			this.loadingLabel = new oaktree_ext_ui_Label({ text : loadingText, fontSize : 28, bold : true});
			this.loadingLabel.set_x((this.maxWidth - this.loadingLabel.get_width()) / 2);
			this.loadingLabel.set_y((this.maxHeight - this.loadingLabel.get_height()) / 2);
			this.loadingLabel.set_alpha(0);
		}
		this.loadingLabel.set_visible(true);
		this.addChild(this.loadingLabel);
		motion_Actuate.tween(this.loadingLabel,0.5,{ alpha : 1});
		this.closeButton.set_visible(false);
	}
	,hideLoading: function() {
		var _g = this;
		if(this.loadingLabel != null) motion_Actuate.tween(this.loadingLabel,0.5,{ alpha : 0}).onComplete(function() {
			_g.removeChild(_g.loadingLabel);
		});
		this.closeButton.set_visible(true);
		this.setChildIndex(this.closeButton,this.get_numChildren());
	}
	,resize: function(W,H) {
		this.set_x(W * this.parentAnchorX - this.maxWidth * this.anchorX);
		this.set_y(H * this.parentAnchorY - this.maxHeight * this.anchorY);
	}
	,__class__: oaktree_ext_ui_views_GenericDialog
});
var agario_module_shop_view_TextDialog = function(titleString,descriptionString) {
	oaktree_ext_ui_views_GenericDialog.call(this);
	this.titleString = titleString;
	this.descriptionString = descriptionString;
	this.maxWidth = 420;
	this.maxHeight = 210;
};
$hxClasses["agario.module.shop.view.TextDialog"] = agario_module_shop_view_TextDialog;
agario_module_shop_view_TextDialog.__name__ = ["agario","module","shop","view","TextDialog"];
agario_module_shop_view_TextDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_module_shop_view_TextDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	title: null
	,description: null
	,descriptionString: null
	,titleString: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.title = new oaktree_ext_ui_Label({ text : "+", fontSize : 24, align : 0, bold : true});
		this.title.set_text(this.titleString);
		this.title.set_width(this.maxWidth);
		this.title.mouseEnabled = false;
		this.addChild(this.title);
		this.description = new oaktree_ext_ui_Label({ text : "+", fontSize : 14, align : 0, bold : true});
		this.description.set_text(this.descriptionString);
		this.description.set_width(this.maxWidth);
		this.addChild(this.description);
		this.doLayout();
	}
	,doLayout: function() {
		this.title.set_y(15);
		this.description.set_y((this.maxHeight - this.description.get_height()) / 2);
	}
	,__class__: agario_module_shop_view_TextDialog
});
var agario_module_shop_view_ConnectionLostDialog = function() {
	agario_module_shop_view_TextDialog.call(this,"Connection Lost!","Shop not available at the moment,\n please come back later.");
	this._viewState = "connectionLostDialog";
	this.closeOnEscape = true;
};
$hxClasses["agario.module.shop.view.ConnectionLostDialog"] = agario_module_shop_view_ConnectionLostDialog;
agario_module_shop_view_ConnectionLostDialog.__name__ = ["agario","module","shop","view","ConnectionLostDialog"];
agario_module_shop_view_ConnectionLostDialog.__super__ = agario_module_shop_view_TextDialog;
agario_module_shop_view_ConnectionLostDialog.prototype = $extend(agario_module_shop_view_TextDialog.prototype,{
	__class__: agario_module_shop_view_ConnectionLostDialog
});
var agario_module_shop_view_ProductActionDialog = function(titleText,name,description,subtitleText,bottomText,productImage) {
	if(bottomText == null) bottomText = "";
	if(subtitleText == null) subtitleText = "";
	if(description == null) description = "";
	if(name == null) name = "";
	if(titleText == null) titleText = "";
	oaktree_ext_ui_views_GenericDialog.call(this);
	this.set_bottomText(bottomText);
	this.set_titleText(titleText);
	this.set_subtitleText(subtitleText);
	this.itemName = name;
	this.itemDescription = description;
	this.productImage = productImage;
	this.maxWidth = 420;
	this.maxHeight = 240;
};
$hxClasses["agario.module.shop.view.ProductActionDialog"] = agario_module_shop_view_ProductActionDialog;
agario_module_shop_view_ProductActionDialog.__name__ = ["agario","module","shop","view","ProductActionDialog"];
agario_module_shop_view_ProductActionDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_module_shop_view_ProductActionDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	title: null
	,subtitle: null
	,productImage: null
	,productBackground: null
	,bottomLabel: null
	,productDurationLabel: null
	,itemName: null
	,itemDescription: null
	,subtitleText: null
	,get_subtitleText: function() {
		return this.subtitleText;
	}
	,set_subtitleText: function(value) {
		if(this.subtitle != null) this.subtitle.set_text(value);
		return this.subtitleText = value;
	}
	,titleText: null
	,get_titleText: function() {
		return this.titleText;
	}
	,set_titleText: function(value) {
		if(this.title != null) this.title.set_text(value);
		return this.titleText = value;
	}
	,bottomText: null
	,get_bottomText: function() {
		return this.bottomText;
	}
	,set_bottomText: function(value) {
		if(this.bottomLabel != null) this.bottomLabel.set_text(value);
		return this.bottomText = value;
	}
	,draw: function() {
		if(this.productBackground == null) {
			this.productBackground = new openfl_display_Shape();
			this.addChild(this.productBackground);
		}
		if(this.subtitle == null) {
			this.subtitle = new oaktree_ext_ui_Label({ text : "+", fontSize : 18, align : 0, bold : true});
			this.subtitle.set_autoSize(0);
			this.addChild(this.subtitle);
		}
		this.subtitle.set_text(this.get_subtitleText());
		if(this.productImage != null) {
			var productImageContainer = new openfl_display_Sprite();
			productImageContainer.addChild(this.productImage);
			this.addChild(productImageContainer);
		}
		if(this.productDurationLabel == null) {
			this.productDurationLabel = new oaktree_ext_ui_Label({ text : this.itemDescription, fontSize : 16, align : 0});
			this.productDurationLabel.set_autoSize(0);
			this.addChild(this.productDurationLabel);
		}
		this.productDurationLabel.set_text(this.itemDescription);
		if(this.bottomLabel == null) {
			this.bottomLabel = new oaktree_ext_ui_Label({ text : "+", fontSize : 14, align : 0});
			this.bottomLabel.set_multiline(true);
			this.bottomLabel.set_height(50);
			this.addChild(this.bottomLabel);
		}
		this.bottomLabel.set_text(this.get_bottomText());
		this.doLayout();
	}
	,onData: function(e) {
		this.closeButton.set_enabled(true);
		this.resizeBackground(this.maxWidth,this.maxHeight,true,$bind(this,this.onDataReady));
	}
	,onDataReady: function() {
	}
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.title = new oaktree_ext_ui_Label({ text : "+", fontSize : 28, align : 0, bold : true});
		this.title.set_text(this.get_titleText());
		this.title.set_autoSize(0);
		this.addChild(this.title);
		this.closeButton.set_enabled(false);
	}
	,doLayout: function() {
		this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
		this.title.set_y(20);
		this.subtitle.set_x((this.maxWidth - this.subtitle.get_width()) / 2);
		this.subtitle.set_y(this.title.get_y() + this.title.get_height() + 10);
		if(this.productImage != null) {
			this.productBackground.get_graphics().beginFill(16053492,1);
			this.productBackground.get_graphics().drawRoundRect(0,0,this.maxWidth - 40,this.productImage.get_height() + 70,5,5);
			this.productBackground.get_graphics().endFill();
			this.productBackground.set_x((this.maxWidth - this.productBackground.get_width()) / 2);
			this.productBackground.set_y(this.subtitle.get_y() + this.subtitle.get_height() + 20);
			this.productImage.set_y(this.productBackground.get_y() + 20);
			this.productImage.set_x((this.maxWidth - this.productImage.get_width()) / 2);
			this.productDurationLabel.set_x((this.maxWidth - this.productDurationLabel.get_width()) / 2);
			this.productDurationLabel.set_y(this.productImage.get_y() + this.productImage.get_height() + 10);
		}
		this.bottomLabel.set_x((this.maxWidth - this.bottomLabel.get_width()) / 2);
		this.bottomLabel.set_y(this.productBackground.get_y() + this.productBackground.get_height() + 10);
	}
	,resize: function(W,H) {
		this.set_x((W - this.maxWidth) * 0.5);
		this.set_y((H - this.maxHeight) * 0.5);
	}
	,__class__: agario_module_shop_view_ProductActionDialog
	,__properties__: $extend(oaktree_ext_ui_views_GenericDialog.prototype.__properties__,{set_bottomText:"set_bottomText",get_bottomText:"get_bottomText",set_titleText:"set_titleText",get_titleText:"get_titleText",set_subtitleText:"set_subtitleText",get_subtitleText:"get_subtitleText"})
});
var agario_module_shop_view_ProductUseDialog = function(titleText) {
	agario_module_shop_view_ProductActionDialog.call(this);
};
$hxClasses["agario.module.shop.view.ProductUseDialog"] = agario_module_shop_view_ProductUseDialog;
agario_module_shop_view_ProductUseDialog.__name__ = ["agario","module","shop","view","ProductUseDialog"];
agario_module_shop_view_ProductUseDialog.__super__ = agario_module_shop_view_ProductActionDialog;
agario_module_shop_view_ProductUseDialog.prototype = $extend(agario_module_shop_view_ProductActionDialog.prototype,{
	item: null
	,initialize: function() {
		agario_module_shop_view_ProductActionDialog.prototype.initialize.call(this);
		this.isLoading = true;
		this.showLoading("Processing Transaction...");
		this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
		this.title.set_y((this.maxHeight - this.title.get_height()) / 2);
		Core.get_events().addEventListener("ShopEvent::useProductResponse",$bind(this,this.onData));
		Core.get_events().addEventListener("ShopEvent::useProductFailed",$bind(this,this.onError));
		Core.get_events().addEventListener("ShopEvent::DISABLE_CLOSED",$bind(this,this.onCloseButtonClick));
	}
	,onError: function(e) {
		this.hideLoading();
		this.closeButton.set_enabled(true);
		this.set_titleText(oaktree_ext_localization_I18n.text("transaction_error"));
	}
	,onData: function(e) {
		this.maxWidth = 420;
		this.maxHeight = 400;
		agario_module_shop_view_ProductActionDialog.prototype.onData.call(this,e);
		this.item = e.data;
		this.itemName = this.item.name;
		this.itemDescription = this.item.description;
		this.hideLoading();
	}
	,onDataReady: function() {
		this.isLoading = false;
		agario_module_shop_view_ProductActionDialog.prototype.onDataReady.call(this);
		this.set_titleText(oaktree_ext_localization_I18n.text("menu_level_up_title"));
		this.drawData();
		this.doLayout();
	}
	,drawData: function() {
		if(js_Boot.__instanceof(this.item,agario_module_shop_models_vo_ShopSkinItemVO)) {
			this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_skin_activation_subtitle"));
			this.set_bottomText(oaktree_ext_localization_I18n.text("menu_skin_activation_info"));
			this.productImage = new agario_module_shop_components_SkinnedCell({ bitmap : (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image, w : 140, h : 140, borderColor : (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor()});
		} else if(js_Boot.__instanceof(this.item,agario_module_shop_models_vo_ShopBoostItemVO)) {
			this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_boost_activation_subtitle"));
			this.set_bottomText(oaktree_ext_localization_I18n.text("menu_boost_activation_info"));
			var imgString;
			imgString = (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopBoostItemVO)).category.image;
			imgString = StringTools.replace(imgString,".png","");
			this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture(imgString).get_bitmapData());
			var hours;
			hours = (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.duration / 60 / 60;
			if(hours <= 1) this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_1_hour"); else this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_n_hour",{ hours_value : hours == null?"null":"" + hours});
		}
		this.draw();
	}
	,dispose: function() {
		agario_module_shop_view_ProductActionDialog.prototype.dispose.call(this);
		Core.get_events().removeEventListener("ShopEvent::useProductResponse",$bind(this,this.onData));
	}
	,__class__: agario_module_shop_view_ProductUseDialog
});
var agario_module_shop_view_PurchaseCompleteDialog = function() {
	agario_module_shop_view_ProductActionDialog.call(this);
	this._viewState = "purchaseCompleteDialog";
	this.closeOnEscape = true;
};
$hxClasses["agario.module.shop.view.PurchaseCompleteDialog"] = agario_module_shop_view_PurchaseCompleteDialog;
agario_module_shop_view_PurchaseCompleteDialog.__name__ = ["agario","module","shop","view","PurchaseCompleteDialog"];
agario_module_shop_view_PurchaseCompleteDialog.__super__ = agario_module_shop_view_ProductActionDialog;
agario_module_shop_view_PurchaseCompleteDialog.prototype = $extend(agario_module_shop_view_ProductActionDialog.prototype,{
	item: null
	,sm: null
	,initialize: function() {
		this.sm = oaktree_ext_services_ServiceManager.getService(agario_services_social_SocialService);
		agario_module_shop_view_ProductActionDialog.prototype.initialize.call(this);
		this.isLoading = true;
		this.showLoading(oaktree_ext_localization_I18n.text("transaction_in_progress"));
		this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
		this.title.set_y((this.maxHeight - this.title.get_height()) / 2);
		Core.get_events().addEventListener("ShopEvent::softPurchaseComplete",$bind(this,this.onData));
		Core.get_events().addEventListener("ShopEvent::INAPP_PURCHASE_COMPLETE",$bind(this,this.onData));
		Core.get_events().addEventListener("shopevent::soft_purchase_failed",$bind(this,this.onError));
		Core.get_events().addEventListener("ShopEvent::DISABLE_CLOSED",$bind(this,this.onCloseButtonClick));
	}
	,onError: function(e) {
		var _g = this;
		this.maxWidth = 420;
		this.maxHeight = 160;
		this.hideLoading();
		this.isLoading = false;
		this.resizeBackground(this.maxWidth,this.maxHeight,true,function() {
			_g.enable();
			_g.closeButton.set_enabled(true);
			_g.set_titleText(oaktree_ext_localization_I18n.text("transaction_error"));
			_g.set_subtitleText(oaktree_ext_localization_I18n.text("transaction_error_desc"));
			_g.draw();
		});
	}
	,onCloseButtonClick: function(e) {
		agario_module_shop_view_ProductActionDialog.prototype.onCloseButtonClick.call(this,e);
		Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
	}
	,onData: function(e) {
		this.maxWidth = 420;
		this.maxHeight = 400;
		agario_module_shop_view_ProductActionDialog.prototype.onData.call(this,e);
		this.item = e.data;
		this.itemName = this.item.name;
		this.itemDescription = this.item.description;
		this.hideLoading();
	}
	,onDataReady: function() {
		agario_module_shop_view_ProductActionDialog.prototype.onDataReady.call(this);
		this.isLoading = false;
		this.set_titleText(oaktree_ext_localization_I18n.text("menu_level_up_title"));
		this.drawData();
		this.createShareButtons();
		this.doLayout();
	}
	,drawData: function() {
		if(js_Boot.__instanceof(this.item,agario_module_shop_models_vo_CurrencyItemVO)) {
			this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_purchase_coins_awarded"));
			var walletIap = Core.models.shopPurchasesModel.getInappPurchaseByPurchaseId(this.item.purchaseId);
			this.itemName = oaktree_ext_localization_I18n.text(walletIap.localizedName);
			this.itemDescription = (js_Boot.__cast(this.item , agario_module_shop_models_vo_CurrencyItemVO)).finalAmount + " " + oaktree_ext_localization_I18n.text("menu_shop_coins_title");
			this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture("giant_coin").get_bitmapData());
		} else if(js_Boot.__instanceof(this.item,agario_module_shop_models_vo_ShopSkinItemVO)) {
			var skin = this.item;
			this.item.name = skin.get_title();
			this.set_subtitleText(" ");
			var imgString = StringTools.replace(skin.gamePlayInfo.image,".png","");
			this.productImage = new agario_module_shop_components_SkinnedCell({ bitmap : imgString, w : 140, h : 140, borderColor : (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor()});
			this.itemDescription = this.item.name;
		} else if(js_Boot.__instanceof(this.item,agario_module_shop_models_vo_ShopBoostItemVO)) {
			this.set_bottomText(oaktree_ext_localization_I18n.text("menu_boost_activation_info"));
			this.set_subtitleText(oaktree_ext_localization_I18n.text("menu_purchase_coins_awarded"));
			var imgString1;
			imgString1 = (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopBoostItemVO)).category.image;
			imgString1 = StringTools.replace(imgString1,".png","");
			this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture(imgString1).get_bitmapData());
			var hours;
			hours = (js_Boot.__cast(this.item , agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.duration / 60 / 60;
			if(hours == 1) this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_1_hour"); else this.itemDescription = oaktree_ext_localization_I18n.text("menu_shop_n_hour",{ hours_value : hours == null?"null":"" + hours});
		}
		this.draw();
	}
	,createShareButtons: function() {
		if(!js_Boot.__instanceof(this.item,agario_module_shop_models_vo_ShopSkinItemVO)) return;
		if(Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) this.createGoogleButton(); else this.createFbButton();
		this.createTwitterButton();
	}
	,createTwitterButton: function() {
		var _g = this;
		var twIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("twitter_icon").get_bitmapData());
		var twShareBtn = new agario_views_controls_ColorButton({ color : 110829, overColor : 110829, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : twIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(twShareBtn);
		twShareBtn.addEventListener("click",function(e) {
			_g.sm.shareTwitter("fb_skinpurchase",[_g.item.name]);
		});
		twShareBtn.set_x(this.get_width() - twShareBtn.get_width() - 60);
		twShareBtn.set_y(this.bottomLabel.get_y() + this.bottomLabel.get_height() + 10);
	}
	,createGoogleButton: function() {
		var _g = this;
		var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
		var googleBtn = new agario_views_controls_ColorButton({ color : 14699578, overColor : 14699578, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : googleIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(googleBtn);
		googleBtn.addEventListener("click",function(e) {
			_g.sm.shareGoogle("fb_skinpurchase",["",_g.item.name]);
		});
		this.sm.prepareGoogleShare("fb_skinpurchase",["",this.item.name]);
		googleBtn.set_x(60);
		googleBtn.set_y(this.bottomLabel.get_y() + this.bottomLabel.get_height() + 10);
	}
	,createFbButton: function() {
		var _g = this;
		var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
		var fbShareBtn = new agario_views_controls_ColorButton({ color : 3625371, overColor : 3625371, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : fbIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(fbShareBtn);
		fbShareBtn.addEventListener("click",function(e) {
			var image = (js_Boot.__cast(_g.item , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_gamePlayImage();
			_g.sm.shareFB("fb_skinpurchase",[_g.item.name],image);
		});
		fbShareBtn.set_x(60);
		fbShareBtn.set_y(this.bottomLabel.get_y() + this.bottomLabel.get_height() + 10);
	}
	,dispose: function() {
		agario_module_shop_view_ProductActionDialog.prototype.dispose.call(this);
		Core.get_events().removeEventListener("ShopEvent::softPurchaseComplete",$bind(this,this.onData));
		Core.get_events().removeEventListener("ShopEvent::INAPP_PURCHASE_COMPLETE",$bind(this,this.onData));
		Core.get_events().removeEventListener("ShopEvent::DISABLE_CLOSED",$bind(this,this.onCloseButtonClick));
		Core.get_events().removeEventListener("shopevent::soft_purchase_failed",$bind(this,this.onError));
	}
	,onEscapePress: function() {
		return this.isLoading;
	}
	,__class__: agario_module_shop_view_PurchaseCompleteDialog
});
var agario_module_shop_view_ShopSkinsView = function() {
	this.getMoreTab = "";
	this.currentPage = 0;
	oaktree_ext_ui_View.call(this);
};
$hxClasses["agario.module.shop.view.ShopSkinsView"] = agario_module_shop_view_ShopSkinsView;
agario_module_shop_view_ShopSkinsView.__name__ = ["agario","module","shop","view","ShopSkinsView"];
agario_module_shop_view_ShopSkinsView.__super__ = oaktree_ext_ui_View;
agario_module_shop_view_ShopSkinsView.prototype = $extend(oaktree_ext_ui_View.prototype,{
	categoryTabs: null
	,tabSelected: null
	,skinListContainer: null
	,leftButton: null
	,rightButton: null
	,paginationController: null
	,ownedSkins: null
	,allSkins: null
	,availableSkins: null
	,currentPage: null
	,filteredSkins: null
	,getMoreTab: null
	,initialize: function() {
		if(this._initialized) return;
		oaktree_ext_ui_View.prototype.initialize.call(this);
		this.allSkins = Core.models.shopSkinsModel.skinList;
		this.ownedSkins = this.allSkins.filter(function(item) {
			return item.get_owned() == true;
		});
		this.availableSkins = this.allSkins.filter(function(item1) {
			return item1.get_owned() == false;
		});
		this.categoryTabs = new agario_views_components_SkinShopTabControl();
		this.categoryTabs.set_maxWidth(this.maxWidth);
		this.addChild(this.categoryTabs);
		this.updateTabs();
		this.categoryTabs.onChange.add($bind(this,this.onTabChange));
		this.skinListContainer = new oaktree_ext_ui_controls_PaginatedContainer({ w : 624, h : 370});
		this.addChild(this.skinListContainer);
		this.leftButton = new agario_module_shop_components_ShopNextArrow();
		this.addChild(this.leftButton);
		this.rightButton = new agario_module_shop_components_ShopNextArrow();
		this.rightButton.anchorCenter();
		this.rightButton.set_rotation(180);
		this.addChild(this.rightButton);
		this.leftButton.addEventListener("click",$bind(this,this.onLeftButtonClick));
		this.rightButton.addEventListener("click",$bind(this,this.onRightButtonClick));
		this.paginationController = new oaktree_ext_ui_controls_PaginationControl();
		this.paginationController.gotoFirstButton = new agario_module_shop_components_PaginationGotoFirstButton();
		this.paginationController.gotoPreviousButton = new agario_module_shop_components_PaginationGotoPreviousButton();
		this.paginationController.gotoNextButton = new agario_module_shop_components_PaginationGotoNextButton();
		this.paginationController.gotoLastButton = new agario_module_shop_components_PaginationGotoLastButton();
		this.paginationController.paginationItemClass = agario_module_shop_components_PaginationPageButton;
		this.addChild(this.paginationController);
		this.skinListContainer.S_onChange.add($bind(this,this.onSkinListChange));
		this.paginationController.S_onChange.add($bind(this,this.onPaginationControllerChange));
		this.loadContent();
		this.position();
	}
	,position: function() {
		this.categoryTabs.set_x((this.maxWidth - this.categoryTabs.w) / 2);
		this.categoryTabs.set_y(0);
		this.skinListContainer.set_x(Math.round((this.maxWidth - this.skinListContainer.w) * 0.5));
		this.skinListContainer.set_y(Math.round(this.categoryTabs.get_y() + this.categoryTabs.get_height() + 30));
		this.leftButton.set_x(this.skinListContainer.get_x() - this.leftButton.get_width() - 10);
		this.rightButton.set_x(this.skinListContainer.get_x() + this.skinListContainer.w + 10);
		this.leftButton.set_y(this.skinListContainer.get_y() + (280 - this.leftButton.get_height()) * 0.5);
		this.rightButton.set_y(this.leftButton.get_y());
		this.paginationController.set_y(Math.round(this.maxHeight - this.paginationController.get_height() - 10));
		this.paginationController.set_x(Math.round((this.maxWidth - this.paginationController.get_width()) * 0.5));
		return this;
	}
	,_update: function() {
		this.rightButton.set_enabled(this.skinListContainer.currentPage < this.skinListContainer.totalPages - 1);
		this.leftButton.set_enabled(this.skinListContainer.currentPage > 0);
		this.leftButton.set_alpha(1);
		this.rightButton.set_alpha(1);
		if(!this.rightButton.get_enabled()) this.rightButton.set_alpha(0.6);
		if(!this.leftButton.get_enabled()) this.leftButton.set_alpha(0.6);
		return this;
	}
	,updateTabs: function() {
		var selectedTab = this.categoryTabs.selectedId;
		this.categoryTabs.clear();
		var tabs = Core.models.shopSkinsModel.getTabs();
		var _g = 0;
		while(_g < tabs.length) {
			var tab = tabs[_g];
			++_g;
			var catTab = new agario_module_shop_components_CategoryTab(tab.tabDescription,oaktree_ext_localization_I18n.text(tab.tabName));
			if(this.getSkinsByCategory(tab.tabDescription).length > 0) this.categoryTabs.addTab(catTab);
		}
		this.categoryTabs.setTab(selectedTab);
	}
	,getSkinsByCategory: function(category) {
		var _g = category.toUpperCase();
		switch(_g) {
		case "OWNED":
			return this.ownedSkins;
		case "VETERAN":
			return this.allSkins.filter(function(item) {
				if(item.tab == null) return false;
				return item.tab.toUpperCase() == category.toUpperCase();
			});
		default:
			return this.availableSkins.filter(function(item1) {
				var tabName = item1.tab;
				if(tabName == null) return false;
				return tabName.indexOf(category.toUpperCase()) != -1 && item1.get_owned() == false && item1.isVisible;
			});
		}
	}
	,sortSkins: function(order,skinList) {
		skinList.sort(function(a,b) {
			if(!a.isReward && !b.isReward) {
				if(a.price > b.price) return 1; else return -1;
			} else if(a.availableAtLevel > b.availableAtLevel) return 1; else return -1;
			return 0;
		});
		if(order == "des") skinList.reverse();
		if(order == "level") skinList.sort(function(a1,b1) {
			if(a1.availableAtLevel > b1.availableAtLevel) return 1; else return -1;
			return 0;
		});
	}
	,loadContent: function() {
		this.ownedSkins = this.allSkins.filter(function(item) {
			return item.get_owned() == true;
		});
		this.filteredSkins = [];
		var currentCategory;
		currentCategory = this.categoryTabs.current.id.toUpperCase();
		var showGetMore = true;
		if(currentCategory == oaktree_ext_localization_I18n.text("skins_owned_tag").toUpperCase()) {
			this.filteredSkins = this.ownedSkins;
			this.sortSkins("des",this.filteredSkins);
			this.applyVeteranRule();
			var premiumSkins = this.allSkins.filter(function(item1) {
				return item1.get_owned() == false && item1.isReward == false && item1.isVisible;
			});
			if(premiumSkins.length == 0) showGetMore = false; else this.getMoreTab = premiumSkins[0].tab;
		} else if(currentCategory.toUpperCase() == "VETERAN") {
			this.filteredSkins = this.allSkins.filter(function(item2) {
				return item2.tab == currentCategory;
			});
			this.sortSkins("level",this.filteredSkins);
		} else {
			this.filteredSkins = this.allSkins.filter(function(item3) {
				return item3.tab.toUpperCase().indexOf(currentCategory.toUpperCase()) != -1 && item3.get_owned() == false && item3.isVisible;
			});
			this.sortSkins("asc",this.filteredSkins);
		}
		this.skinListContainer.empty();
		var element;
		var _g = 0;
		var _g1 = this.filteredSkins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			element = new agario_module_shop_components_SkinElement({ model : skin});
			if(skin.isReward && (Core.user.isGuest || !skin.get_owned() && skin.availableAtLevel > Core.user.userInfo.level)) element.showPrice = false;
			this.skinListContainer.addItem(element);
			element.addEventListener("ShopEvent::USE",$bind(this,this.onUseClick));
			element.addEventListener("ShopEvent::UNEQUIP",$bind(this,this.onUnequip));
			element.addEventListener("ShopEvent::BUY",$bind(this,this.onBuyClick));
		}
		if(currentCategory.toUpperCase() == oaktree_ext_localization_I18n.text("skins_owned_tag").toUpperCase() && showGetMore) {
			var mod = this.skinListContainer.items.length % this.skinListContainer.itemsPerPage;
			if(mod != 0) while(mod != 0) {
				this.addDummyElement();
				mod = this.skinListContainer.items.length % this.skinListContainer.itemsPerPage;
			}
		}
		this.skinListContainer.set_page(this.currentPage);
		this.onSkinListChange();
		this.position();
	}
	,applyVeteranRule: function() {
		var veteranSkins = this.filteredSkins.filter(function(item) {
			return item.availableAtLevel > 0;
		});
		var otherSkins = this.filteredSkins.filter(function(item1) {
			return item1.availableAtLevel == -1;
		});
		if(veteranSkins.length > 0) {
			var lastOwnedSkin = veteranSkins.splice(0,1)[0];
			otherSkins = otherSkins.concat(veteranSkins);
			otherSkins.unshift(lastOwnedSkin);
		}
		this.filteredSkins = otherSkins;
	}
	,addDummyElement: function() {
		var buySkin = new agario_module_shop_models_vo_ShopSkinItemVO({ });
		buySkin.originId = this.getMoreTab;
		buySkin.set_title("");
		buySkin.purchaseId = "";
		buySkin.gamePlayInfo = new agario_module_shop_models_vo_GamePlaySkinVO();
		buySkin.gamePlayInfo.set_cellColor("0x56c0e0");
		var dummyElement = new agario_module_shop_components_SkinElement({ model : buySkin});
		dummyElement.addEventListener("ShopEvent::BUY",$bind(this,this.onBuyClick));
		this.skinListContainer.addItem(dummyElement);
	}
	,onUnequip: function(e) {
		Core.get_events().dispatchEventWith("ShopEvent::UNEQUIP");
	}
	,onBuyClick: function(e) {
		var shopItem = e.currentTarget.item;
		if(shopItem.purchaseId == "") {
			if(shopItem.originId != "") this.categoryTabs.setTabByName(shopItem.originId.toUpperCase()); else this.categoryTabs.setTab(0);
			this.loadContent();
		} else Core.get_events().dispatchEventWith("ShopEvent::BUY",shopItem.purchaseId);
		openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
	}
	,onUseClick: function(e) {
		Core.get_events().dispatchEventWith("ShopEvent::USE",js_Boot.__cast(e.currentTarget.item , agario_module_shop_models_vo_ShopSkinItemVO));
	}
	,onPaginationControllerChange: function() {
		this.skinListContainer.set_page(this.paginationController.currentPage);
		this._update();
	}
	,onSkinListChange: function() {
		this.paginationController.set_totalPages(this.skinListContainer.totalPages);
		this.paginationController.set_currentPage(this.skinListContainer.currentPage);
		this._update();
	}
	,onRightButtonClick: function(e) {
		this.skinListContainer.next_page();
		this._update();
	}
	,onLeftButtonClick: function(e) {
		this.skinListContainer.previous_page();
		this._update();
	}
	,onTabChange: function(_tab) {
		this.currentPage = 0;
		this.skinListContainer.currentPage = 0;
		this.loadContent();
	}
	,updateView: function() {
		this.currentPage = this.skinListContainer.currentPage;
		this.loadContent();
		this.updateTabs();
	}
	,openTab: function(target) {
		this.paginationController.set_currentPage(0);
		this.categoryTabs.setTabByName(target);
		this.loadContent();
		this.updateTabs();
	}
	,resetContent: function() {
		this.paginationController.set_currentPage(0);
		this.currentPage = 0;
		this.skinListContainer.set_page(0);
	}
	,__class__: agario_module_shop_view_ShopSkinsView
});
var agario_module_user_view_FreeCoinsCollectDialog = function(pSuggestVideoOffers) {
	if(pSuggestVideoOffers == null) pSuggestVideoOffers = true;
	this.timeLeft = -1;
	this.showVideoOffers = false;
	agario_module_shop_view_ProductActionDialog.call(this);
	this._viewState = "stateFreeCoinsCollect";
	this.closeOnEscape = true;
	this.productImage = new openfl_display_Bitmap(Core.get_assets().getTexture("giant_coin").get_bitmapData(),1,true);
	this.productImage.set_scaleX(this.productImage.set_scaleY(0.8));
	this.set_subtitleText(" ");
	this.set_bottomText("");
	this.showVideoOffers = pSuggestVideoOffers;
};
$hxClasses["agario.module.user.view.FreeCoinsCollectDialog"] = agario_module_user_view_FreeCoinsCollectDialog;
agario_module_user_view_FreeCoinsCollectDialog.__name__ = ["agario","module","user","view","FreeCoinsCollectDialog"];
agario_module_user_view_FreeCoinsCollectDialog.__super__ = agario_module_shop_view_ProductActionDialog;
agario_module_user_view_FreeCoinsCollectDialog.prototype = $extend(agario_module_shop_view_ProductActionDialog.prototype,{
	showVideoOffers: null
	,videoBtn: null
	,hasEngagement: null
	,timeLeft: null
	,centerLabel: null
	,leftLabel: null
	,rightLabel: null
	,initialize: function() {
		agario_module_shop_view_ProductActionDialog.prototype.initialize.call(this);
		this.maxWidth = 420;
		this.hasEngagement = Core.services.gameui.getUserEngagement();
		this.resizeBackground(this.maxWidth,this.maxHeight);
		this.isLoading = true;
		this.showLoading("Processing transaction...");
		Core.get_events().addEventListener("ShopEvent::freeCoinsResponse",$bind(this,this.onData));
	}
	,onData: function(e) {
		this.timeLeft = Core.user.freeCoinTimeLeft();
		this.maxHeight = this.calculateDialogHeight();
		agario_module_shop_view_ProductActionDialog.prototype.onData.call(this,e);
	}
	,calculateDialogHeight: function() {
		var maxH = 450;
		if(!this.showVideoOffers || !this.hasEngagement) maxH = 335;
		if(this.timeLeft <= 0) {
			if(!this.showVideoOffers || !this.hasEngagement) maxH = 360;
		}
		return maxH;
	}
	,onDataReady: function() {
		agario_module_shop_view_ProductActionDialog.prototype.onDataReady.call(this);
		this.isLoading = false;
		this.closeButton.set_enabled(true);
		if(this.timeLeft < 0) this.timeLeft = Core.user.freeCoinTimeLeft();
		if(this.maxHeight != this.calculateDialogHeight()) {
			this.maxHeight = this.calculateDialogHeight();
			this.resizeBackground(this.maxWidth,this.maxHeight,true);
		}
		var hourlyBonus = Core.models.getBonusById("hourlyBonus");
		var videoReward = Core.models.getBonusById("genericVideoAdReward");
		if(hourlyBonus == null || videoReward == null) {
			if(hourlyBonus == null) haxe_Log.trace("d / freecoinscollectdialog / " + "Failed to find hourlybonus reward",{ fileName : "FreeCoinsCollectDialog.hx", lineNumber : 108, className : "agario.module.user.view.FreeCoinsCollectDialog", methodName : "onDataReady"});
			if(videoReward == null) haxe_Log.trace("d / freecoinscollectdialog / " + "Failed to find video ad reward",{ fileName : "FreeCoinsCollectDialog.hx", lineNumber : 112, className : "agario.module.user.view.FreeCoinsCollectDialog", methodName : "onDataReady"});
			this.close();
			return;
		}
		if(this.timeLeft > 0) {
			this.set_titleText(oaktree_ext_localization_I18n.text("menu_hourly_title"));
			this.set_subtitleText(" ");
			if(this.showVideoOffers && this.hasEngagement) this.set_bottomText(oaktree_ext_localization_I18n.text("free_coins_incentivise_video",[videoReward.bonusQty]));
		} else {
			this.set_titleText(oaktree_ext_localization_I18n.text("menu_hourly_title_coins"));
			this.set_subtitleText("Welcome back, you have earned:");
			var timeStr = oaktree_ext_localization_I18n.text("menu_shop_1_hour");
			this.set_bottomText(oaktree_ext_localization_I18n.text("menu_hourly_not_ready",[timeStr,hourlyBonus.bonusQty]));
			if(this.showVideoOffers && this.hasEngagement) {
				var _g = this;
				_g.set_bottomText(_g.get_bottomText() + (",\n" + oaktree_ext_localization_I18n.text("free_coins_incentivise_video",[videoReward.bonusQty])));
			}
		}
		this.itemDescription = 20 + " " + oaktree_ext_localization_I18n.text("menu_shop_coins_title");
		this.draw();
		if(this.timeLeft > 0) {
			this.leftLabel = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_hourly_come_back_in"), fontSize : 20, color : 0, bold : true});
			this.centerLabel = new oaktree_ext_ui_Label({ text : "00m 00s", fontSize : 24, color : 16711680, bold : true});
			this.rightLabel = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_hourly_to_earn"), fontSize : 20, color : 0, bold : true});
			this.addChild(this.leftLabel);
			this.addChild(this.centerLabel);
			this.addChild(this.rightLabel);
			var secs = Math.round(this.timeLeft / 1000);
			this.centerLabel.set_text(Math.floor(secs / 60) + "m " + (secs % 60 >= 10?"":"0") + secs % 60 + "s");
			this.startTimedEvents();
			this.reArrange();
		}
		this.hideLoading();
		if(this.showVideoOffers) this.checkVideoStatus();
	}
	,checkVideoStatus: function() {
		if(!this.hasEngagement) return;
		var videoIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("freecoins_video").get_bitmapData());
		this.videoBtn = new agario_views_controls_ColorButton({ color : 5880408, overColor : 4294721, text : oaktree_ext_localization_I18n.text("menu_main_free_coins"), textColorOver : 16777215, textColor : 16777215, icon : videoIcon, iconPadding : 6, w : 140, h : 50, fontSize : 14, bold : true});
		this.addChild(this.videoBtn);
		this.videoBtn.set_x((this.maxWidth - this.videoBtn.get_width()) / 2);
		this.videoBtn.set_y(this.maxHeight - this.videoBtn.get_height() - 20);
		this.videoBtn.addEventListener("click",$bind(this,this.onVideoClick));
	}
	,startTimedEvents: function() {
		var _g = this;
		var timer = new haxe_Timer(1000);
		timer.run = function() {
			var secs = Math.round(_g.timeLeft / 1000);
			_g.centerLabel.set_text(Math.floor(secs / 60) + "m " + (secs % 60 >= 10?"":"0") + secs % 60 + "s");
			_g.timeLeft -= 1000;
			if(secs <= 0) {
				secs = 0;
				timer.stop();
				_g.onTimerComplete();
			}
			_g.reArrange();
		};
	}
	,onTimerComplete: function() {
		this.set_subtitleText("Your coins are ready to be collected!");
		this.removeChild(this.leftLabel);
		this.removeChild(this.centerLabel);
		this.removeChild(this.rightLabel);
	}
	,reArrange: function() {
		this.leftLabel.set_x((this.maxWidth - (this.leftLabel.get_width() + this.centerLabel.get_width() + this.rightLabel.get_width())) / 2);
		this.leftLabel.set_y(this.rightLabel.set_y(this.subtitle.get_y()));
		this.centerLabel.set_y(this.leftLabel.get_y() - 4);
		this.centerLabel.set_x(this.leftLabel.get_x() + this.leftLabel.get_width() + 4);
		this.rightLabel.set_x(this.centerLabel.get_x() + this.centerLabel.get_width() + 5);
		this.productBackground.set_y(this.centerLabel.get_y() + this.centerLabel.get_height() + 10);
		this.productImage.set_y(this.productBackground.get_y() + 20);
		this.productDurationLabel.set_x((this.maxWidth - this.productDurationLabel.get_width()) / 2);
		this.productDurationLabel.set_y(this.productImage.get_y() + this.productImage.get_height() + 10);
		this.bottomLabel.set_x((this.maxWidth - this.bottomLabel.get_width()) / 2);
		this.bottomLabel.set_y(this.productBackground.get_y() + this.productBackground.get_height() + 10);
	}
	,onVideoClick: function(e) {
		if(!this.hasEngagement) return;
		Core.services.gameui.openVideoAd();
		this.close();
	}
	,onEscapePress: function() {
		return this.isLoading;
	}
	,__class__: agario_module_user_view_FreeCoinsCollectDialog
});
var agario_module_user_view_LevelUpDialog = function(deltaCoins,previousLevel,currentLevel) {
	this.shouldEarnSkin = false;
	oaktree_ext_ui_views_GenericDialog.call(this,"levelUpDialog");
	this.currentLevel = currentLevel;
	this.previousLevel = previousLevel;
	this.deltaCoins = deltaCoins;
	this.maxWidth = 420;
	this.maxHeight = 460;
	this.skinCellSize = 150;
	this.shareStoryId = "fb_levelup";
	this.shareData = [currentLevel];
	var deltaLevels = currentLevel - previousLevel;
	if(previousLevel % 5 + deltaLevels >= 5) {
		var skin = Core.models.shopSkinsModel.getLastRewardSkin(currentLevel);
		this.shouldEarnSkin = true;
		this.shareStoryId = "fb_skinunlock";
		this.shareData = [currentLevel,skin.get_title()];
		this.nextSkinName = skin.get_title();
	}
};
$hxClasses["agario.module.user.view.LevelUpDialog"] = agario_module_user_view_LevelUpDialog;
agario_module_user_view_LevelUpDialog.__name__ = ["agario","module","user","view","LevelUpDialog"];
agario_module_user_view_LevelUpDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_module_user_view_LevelUpDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	title: null
	,subtitle: null
	,levelIcon: null
	,grayArea: null
	,lvlLabel: null
	,rewardLabel: null
	,sm: null
	,deltaCoins: null
	,slotControl: null
	,previousLevel: null
	,nextSkinCell: null
	,nextSkinLabel: null
	,skinCellSize: null
	,ps: null
	,renderer: null
	,starContainer: null
	,tempLevel: null
	,currentLevel: null
	,shouldEarnSkin: null
	,shareStoryId: null
	,shareData: null
	,nextSkinName: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.tempLevel = this.previousLevel;
		this.sm = oaktree_ext_services_ServiceManager.getService(agario_services_social_SocialService);
		this.title = new oaktree_ext_ui_Label({ text : "+", fontSize : 32, align : 0, bold : true});
		this.title.set_text(oaktree_ext_localization_I18n.text("menu_level_up_title"));
		this.title.set_autoSize(0);
		this.addChild(this.title);
		this.subtitle = new oaktree_ext_ui_Label({ text : "+", fontSize : 24, align : 0, bold : true});
		this.subtitle.set_text(oaktree_ext_localization_I18n.text("menu_level_up_subtitle"));
		this.subtitle.set_autoSize(0);
		this.addChild(this.subtitle);
		this.grayArea = new openfl_display_Sprite();
		this.grayArea.get_graphics().beginFill(16119285);
		oaktree_utils_MCGraphics.drawRoundRectComplex(this.grayArea.get_graphics(),1,1,this.maxWidth - 40,230,8,0,8,0);
		this.grayArea.get_graphics().endFill();
		this.addChild(this.grayArea);
		this.starContainer = new openfl_display_Sprite();
		this.addChild(this.starContainer);
		var lvlImg = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(),1,true);
		lvlImg.set_x(-lvlImg.get_width() / 2);
		lvlImg.set_y(-lvlImg.get_height() / 2);
		this.levelIcon = new openfl_display_Sprite();
		this.levelIcon.addChild(lvlImg);
		this.starContainer.addChild(this.levelIcon);
		this.lvlLabel = new oaktree_ext_ui_Label({ text : "" + this.tempLevel, fontSize : 32, align : 0, bold : true, width : this.maxWidth});
		this.addChild(this.lvlLabel);
		var currencyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
		this.rewardLabel = new oaktree_ext_ui_controls_IconLabel({ text : "+", fontSize : 16, align : 3, bold : true},currencyIcon,"right",2);
		this.slotControl = new agario_module_shop_components_SlotControl(5,0);
		this.slotControl.S_slotFilled.add($bind(this,this.onSlotFilled));
		this.slotControl.S_slotsFull.add($bind(this,this.onSkinEarn));
		this.addChild(this.slotControl);
		var _g1 = 0;
		var _g = this.previousLevel % 5;
		while(_g1 < _g) {
			var i = _g1++;
			this.slotControl.setSlotActive();
		}
		var skin = Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel);
		if(skin != null) {
			this.nextSkinCell = new agario_module_shop_components_SkinnedCell({ bitmap : (js_Boot.__cast(skin , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image, w : this.skinCellSize, h : this.skinCellSize, borderColor : (js_Boot.__cast(skin , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor(), borderSize : 6});
			this.addChild(this.nextSkinCell);
			this.nextSkinCell.set_scaleX(this.nextSkinCell.set_scaleY(0.2));
			this.nextSkinLabel = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_level_up_next_skin",[skin.availableAtLevel]), fontSize : 16, align : 3, bold : true});
			this.addChild(this.nextSkinLabel);
		}
		this.rewardLabel.set_text(oaktree_ext_localization_I18n.text("menu_level_up_reward",[this.deltaCoins]));
		this.addChild(this.rewardLabel);
		this.doLayout();
		this.renderer = new org_zamedev_particles_renderers_SpritesParticleRenderer();
		this.addChild(this.renderer);
		this.ps = org_zamedev_particles_loaders_ParticleLoader.load("particle/LevelUpSlotBar-ipadhd.plist");
		this.renderer.addParticleSystem(this.ps);
	}
	,onSlotFilled: function(filled) {
		this.explodeStar();
		this.ps.emit(this.slotControl.get_x() + 20 * filled + 5,this.slotControl.get_y() + 15);
		this.tempLevel++;
		this.lvlLabel.set_text("" + this.tempLevel);
	}
	,dialogReady: function() {
		this.animateDialog();
	}
	,doLayout: function() {
		this.title.set_x((this.maxWidth - this.title.get_width()) / 2);
		this.title.set_y(10);
		this.subtitle.set_x((this.maxWidth - this.subtitle.get_width()) / 2);
		this.subtitle.set_y(this.title.get_y() + this.title.get_height() + 5);
		this.grayArea.set_x(20);
		this.grayArea.set_y(this.subtitle.get_y() + this.subtitle.get_height() + 10);
		this.levelIcon.set_x(this.grayArea.get_x() + this.grayArea.get_width() / 2);
		this.levelIcon.set_alpha(0);
		this.lvlLabel.set_x(this.levelIcon.get_x() - this.lvlLabel.get_width() / 2);
		this.lvlLabel.set_y(this.levelIcon.get_y() + this.levelIcon.get_height() / 2 - 15);
		this.lvlLabel.set_visible(false);
		this.rewardLabel.set_y(this.grayArea.get_y() + this.grayArea.get_height() - 30);
		this.rewardLabel.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.rewardLabel.get_width()) / 2);
		this.slotControl.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.slotControl.get_width()) / 2);
		this.slotControl.set_y(this.grayArea.get_y() + this.grayArea.get_height() + 15);
		if(this.nextSkinCell != null) {
			this.nextSkinCell.set_y(this.slotControl.get_y() + (this.slotControl.get_height() - this.nextSkinCell.get_height()) / 2);
			this.nextSkinCell.set_x(this.slotControl.get_x() + this.slotControl.get_width() + 5);
			this.nextSkinLabel.set_y(this.slotControl.get_y() + this.slotControl.get_height() + 10);
			this.nextSkinLabel.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.nextSkinLabel.get_width()) / 2);
		}
	}
	,animateDialog: function() {
		this.levelIcon.set_y(this.grayArea.get_y());
		var targetIconY = this.grayArea.get_y() + this.grayArea.get_height() / 2;
		motion_Actuate.tween(this.levelIcon,1,{ alpha : 1, y : targetIconY}).ease(motion_easing_Elastic.get_easeOut()).onComplete($bind(this,this.onAnimationComplete));
		motion_Actuate.tween(this.levelIcon,.5,{ scaleY : 0.8});
		motion_Actuate.tween(this.levelIcon,1,{ scaleY : 1},false).delay(0.3).ease(motion_easing_Elastic.get_easeOut());
		this.lvlLabel.set_x(this.levelIcon.get_x() - this.lvlLabel.get_width() / 2);
		this.lvlLabel.set_y(targetIconY - 15);
	}
	,onSkinEarn: function() {
		var _g = this;
		if(this.nextSkinCell != null) {
			this.slotControl.pauseProcess();
			this.subtitle.set_text(oaktree_ext_localization_I18n.text("menu_level_up_subtitle_skin"));
			var targetX = this.grayArea.get_x() + (this.grayArea.get_width() - this.skinCellSize) / 2;
			var targetY = this.grayArea.get_y() + (this.grayArea.get_height() - this.skinCellSize) / 2;
			var path = new motion_MotionPath().bezier(targetX,targetY,targetX + 140,(this.nextSkinCell.get_y() - targetY) / 2,2);
			motion_Actuate.motionPath(this.nextSkinCell,2,{ x : path.get_x(), y : path.get_y()});
			motion_Actuate.tween(this.nextSkinCell,2,{ scaleX : 1, scaleY : 1});
			if(this.slotControl.get_hasFinished() == false) motion_Actuate.tween(this.nextSkinCell,1,{ alpha : 0}).delay(3).onComplete(function() {
				motion_Actuate.tween(_g.starContainer,.5,{ alpha : 1});
				motion_Actuate.tween(_g.lvlLabel,.5,{ alpha : 1});
				_g.slotControl.resumeProcess();
			});
			var skin = Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel);
			if(skin != null) {
				this.nextSkinCell = new agario_module_shop_components_SkinnedCell({ bitmap : (js_Boot.__cast(skin , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.image, w : this.skinCellSize, h : this.skinCellSize, borderColor : (js_Boot.__cast(skin , agario_module_shop_models_vo_ShopSkinItemVO)).gamePlayInfo.get_cellColor(), borderSize : 6});
				this.addChild(this.nextSkinCell);
				this.nextSkinCell.set_scaleX(this.nextSkinCell.set_scaleY(0.2));
				this.nextSkinLabel.set_text(oaktree_ext_localization_I18n.text("menu_level_up_next_skin",[skin.availableAtLevel]));
				this.nextSkinCell.set_y(this.slotControl.get_y() + (this.slotControl.get_height() - this.nextSkinCell.get_height()) / 2);
				this.nextSkinCell.set_x(this.slotControl.get_x() + this.slotControl.get_width() + 5);
			}
			motion_Actuate.tween(this.starContainer,1,{ alpha : 0});
			motion_Actuate.tween(this.lvlLabel,1,{ alpha : 0});
			Core.services.shop.setSkin(Core.models.shopSkinsModel.getNextRewardSkin(this.tempLevel - 1).productIdToQuantify);
		}
	}
	,onAnimationComplete: function() {
		this.explodeStar();
		var deltaLevel = this.currentLevel - this.previousLevel;
		var _g = 0;
		while(_g < deltaLevel) {
			var i = _g++;
			this.slotControl.addSlotToQueue();
		}
		this.slotControl.process();
		this.lvlLabel.set_visible(true);
		this.createShareButtons();
	}
	,explodeStar: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var littleStar = new openfl_display_Sprite();
			var lvlImg = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(),1,true);
			lvlImg.set_x(-lvlImg.get_width() / 2);
			lvlImg.set_y(-lvlImg.get_height() / 2);
			littleStar.addChild(lvlImg);
			littleStar.set_alpha(0.7);
			littleStar.set_x(this.levelIcon.get_x());
			littleStar.set_y(this.levelIcon.get_y());
			this.starContainer.addChild(littleStar);
			var targetScale = Math.random() * 0.4;
			motion_Actuate.tween(littleStar,1,{ x : littleStar.get_x() - 120 + Math.random() * 200, y : littleStar.get_y() - Math.random() * 100, scaleX : targetScale, scaleY : targetScale, alpha : 0});
		}
	}
	,createShareButtons: function() {
		if(Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) this.createGoogleButton(); else this.createFbButton();
		this.createTwitterButton();
	}
	,createTwitterButton: function() {
		var _g = this;
		var twIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("twitter_icon").get_bitmapData());
		var twShareBtn = new agario_views_controls_ColorButton({ color : 110829, overColor : 110829, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : twIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(twShareBtn);
		twShareBtn.addEventListener("click",function(e) {
			_g.sm.shareTwitter(_g.shareStoryId,_g.shareData);
		});
		twShareBtn.set_x(this.maxWidth - twShareBtn.get_width() - 60);
		twShareBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10);
	}
	,createGoogleButton: function() {
		var _g = this;
		var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
		var googleBtn = new agario_views_controls_ColorButton({ color : 14699578, overColor : 14699578, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : googleIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(googleBtn);
		googleBtn.addEventListener("click",function(e) {
			_g.sm.shareGoogle(_g.shareStoryId,_g.shareData);
		});
		this.sm.prepareGoogleShare(this.shareStoryId,this.shareData);
		googleBtn.set_x(60);
		googleBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10);
	}
	,createFbButton: function() {
		var _g = this;
		var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
		var fbShareBtn = new agario_views_controls_ColorButton({ color : 3625371, overColor : 3625371, text : oaktree_ext_localization_I18n.text("social_share_tag"), textColorOver : 16777215, textColor : 16777215, icon : fbIcon, iconPosition : "left", iconPadding : 25, w : 140, h : 35, fontSize : 18, bold : true});
		this.addChild(fbShareBtn);
		fbShareBtn.addEventListener("click",function(e) {
			var story = _g.sm.getStoryById(_g.shareStoryId);
			_g.sm.directShareFB(_g.shareStoryId,oaktree_ext_localization_I18n.text(story.titleTag,[_g.nextSkinName]),oaktree_ext_localization_I18n.text(story.subtitleTag,[_g.currentLevel]),oaktree_ext_localization_I18n.text(story.descriptionTag));
		});
		fbShareBtn.set_x(60);
		fbShareBtn.set_y(this.nextSkinLabel.get_y() + this.nextSkinLabel.get_height() + 10);
	}
	,__class__: agario_module_user_view_LevelUpDialog
});
var agario_module_user_view_ProfileDialog = function() {
	this.progressComponent = new openfl_display_Sprite();
	this.currencyLabel = new oaktree_ext_ui_controls_IconLabel({ });
	this.profilePic = new openfl_display_Bitmap();
	this.padding = 20;
	this.playerName = new oaktree_ext_ui_Label({ });
	this.statsTitle = new oaktree_ext_ui_Label({ });
	oaktree_ext_ui_views_GenericDialog.call(this,"state_profile_dialog");
	this.closeOnEscape = true;
	this.maxWidth = 620;
	this.maxHeight = 420;
};
$hxClasses["agario.module.user.view.ProfileDialog"] = agario_module_user_view_ProfileDialog;
agario_module_user_view_ProfileDialog.__name__ = ["agario","module","user","view","ProfileDialog"];
agario_module_user_view_ProfileDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_module_user_view_ProfileDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	titleLabel: null
	,contents: null
	,rightColumn: null
	,statsTitle: null
	,playerName: null
	,padding: null
	,profilePic: null
	,currencyLabel: null
	,progressComponent: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.contents = new openfl_display_Sprite();
		this.addChild(this.contents);
		if(Core.user.userInfo != null && Core.user.get_socialId() != "") this.displayUserInfo(); else {
			this.loadingLabel = new oaktree_ext_ui_Label({ text : "Loading your information...", fontSize : 28, bold : true});
			this.addChild(this.loadingLabel);
			this.loadingLabel.set_x((this.maxWidth - this.loadingLabel.get_width()) / 2);
			this.loadingLabel.set_y((this.maxHeight - this.loadingLabel.get_height()) / 2);
			Core.user.onUserDataUpdate.add($bind(this,this.displayUserInfo));
		}
	}
	,displayUserInfo: function() {
		if(Core.user.userInfo == null || Core.user.get_socialId() == "") return;
		Core.user.onUserDataUpdate.remove($bind(this,this.displayUserInfo));
		if(this.loadingLabel != null && this.contains(this.loadingLabel)) this.removeChild(this.loadingLabel);
		this.drawBackground();
		this.drawTitle();
		this.createUserProfile();
		this.createStatsPanel();
		this.doLayout();
	}
	,createUserProfile: function() {
		var name = Core.user.userInfo.displayName;
		if(name != null && name.indexOf("_") != -1) {
			var len = name.lastIndexOf("_");
			name = HxOverrides.substr(name,0,len);
		}
		this.playerName = new oaktree_ext_ui_Label({ text : name, fontSize : 26, bold : true, width : this.maxWidth / 2 - this.padding, align : 0, color : 3421236});
		this.contents.addChild(this.playerName);
		var coinAmountString = oaktree_utils_StringUtility.formatNumber(Core.user.get_coins(),"n"," ");
		var currencyIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
		this.currencyLabel = new oaktree_ext_ui_controls_IconLabel({ text : coinAmountString, fontSize : 16, align : 3, color : 0, bold : true},currencyIcon,"right",2);
		this.contents.addChild(this.currencyLabel);
		this.progressComponent = this.getProgressBar();
		this.contents.addChild(this.progressComponent);
		openfl_display_BitmapData.fromFile(Core.user.avatarUrl,$bind(this,this.onLoadProfilePic));
	}
	,getProgressBar: function() {
		var progress = new openfl_display_Sprite();
		var progressSprite = this.getBarProgressForXP(Core.user.userInfo.xp,Core.user.userInfo.level);
		progress.addChild(progressSprite);
		var xpBarBackground = new openfl_display_Sprite();
		xpBarBackground.get_graphics().lineStyle(2,25606);
		xpBarBackground.get_graphics().beginFill(16777215,0);
		xpBarBackground.get_graphics().drawRoundRect(0,0,140,25,10,10);
		xpBarBackground.get_graphics().endFill();
		progress.addChild(xpBarBackground);
		var levelIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("Exp_Star").get_bitmapData(),1,true);
		progress.addChild(levelIcon);
		levelIcon.set_width(levelIcon.set_height(54));
		levelIcon.set_rotation(12);
		levelIcon.set_x(xpBarBackground.get_x() + xpBarBackground.get_width() - levelIcon.get_width() / 2 + 4);
		levelIcon.set_y((xpBarBackground.get_height() - levelIcon.get_height()) / 2 - 8);
		var levelLabel = new oaktree_ext_ui_Label({ text : Std.string(Core.user.userInfo.level), bold : true, color : 3355443, width : 46, fontSize : 18, align : 0});
		progress.addChild(levelLabel);
		levelLabel.set_x(levelIcon.get_x());
		levelLabel.set_y(-4);
		levelLabel.set_rotation(12);
		var progressLabel = new oaktree_ext_ui_Label({ text : Core.user.userInfo.xp + " / " + Core.models.xpModel.getMaxXpForLevel(Core.user.userInfo.level), fontSize : 14, color : 0, autoSize : 1});
		progress.addChild(progressLabel);
		progressLabel.set_x(xpBarBackground.get_x() + (xpBarBackground.get_width() - progressLabel.get_width()) / 2);
		progressLabel.set_y(xpBarBackground.get_y() + xpBarBackground.get_height() + 5);
		return progress;
	}
	,createStatsPanel: function() {
		this.rightColumn = new openfl_display_Sprite();
		this.statsTitle = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_profile_player_stats"), fontSize : 26, color : 3421236});
		this.rightColumn.addChild(this.statsTitle);
		var statsData = [{ key : oaktree_ext_localization_I18n.text("menu_profile_total_games"), value : Core.user.stats.gamesPlayed},{ key : oaktree_ext_localization_I18n.text("menu_profile_total_mass"), value : Core.user.stats.massConsumed},{ key : oaktree_ext_localization_I18n.text("menu_profile_average_score"), value : Core.user.stats.averageScore},{ key : oaktree_ext_localization_I18n.text("menu_profile_highest_score"), value : Core.user.stats.highestMass},{ key : oaktree_ext_localization_I18n.text("menu_profile_longest_time"), value : this.formatTime(Core.user.stats.longestTimeAlive)},{ key : oaktree_ext_localization_I18n.text("menu_profile_cells_eaten"), value : Core.user.stats.mostCellsEaten}];
		var _g1 = 0;
		var _g = statsData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var lineSpr = this.createRightColumnKeyValue(statsData[i].key,statsData[i].value);
			lineSpr.set_y(50 + i * 32);
			this.rightColumn.addChild(lineSpr);
		}
		this.contents.addChild(this.rightColumn);
	}
	,formatTime: function(timeInSeconds) {
		var secs = timeInSeconds;
		var mins = secs / 60 | 0;
		var hours = mins / 60 | 0;
		var strFinal = "";
		if(hours <= 0) strFinal = mins + "m " + secs % 60 + "s"; else strFinal = hours % 60 + "h " + mins % 60 + "m " + secs % 60 + "s";
		return strFinal;
	}
	,getBarProgressForXP: function(xp,level) {
		var percentage = Math.min(1,Core.models.xpModel.getPercentage(xp,level));
		var progressSprite = new openfl_display_Sprite();
		var progressStriped = new openfl_display_Bitmap(Core.get_assets().getTexture("progress_striped").get_bitmapData());
		progressSprite.addChild(progressStriped);
		var progressMask = new openfl_display_Shape();
		progressMask.get_graphics().lineStyle(2,25606);
		progressMask.get_graphics().beginFill(26112,1);
		progressMask.get_graphics().drawRoundRect(0,0,140 * (percentage * .88),25,10,10);
		progressMask.get_graphics().endFill();
		progressSprite.addChild(progressMask);
		progressStriped.set_mask(progressMask);
		return progressSprite;
	}
	,onLoadProfilePic: function(data) {
		if(data == null) return;
		this.profilePic = new openfl_display_Bitmap(data);
		var ratio = 120 / this.profilePic.get_width();
		this.profilePic.set_scaleX(this.profilePic.set_scaleY(ratio));
		this.profilePic.smoothing = true;
		this.contents.addChild(this.profilePic);
		this.doLayout();
	}
	,doLayout: function() {
		this.rightColumn.set_x(this.maxWidth / 2 + (this.maxWidth / 2 - this.padding - this.rightColumn.get_width()) / 2 - this.padding);
		this.rightColumn.set_y(this.padding);
		this.contents.set_y(this.titleLabel.get_y() + this.titleLabel.get_height() + this.padding);
		this.contents.set_x((this.maxWidth - this.contents.get_width()) / 2);
		this.playerName.set_y(this.padding);
		this.profilePic.set_x((this.maxWidth / 2 - this.profilePic.get_width()) / 2 - 10);
		this.profilePic.set_y(this.playerName.get_y() + this.playerName.get_height() + this.padding / 2);
		this.currencyLabel.set_y(this.profilePic.get_y() + this.profilePic.get_height() + this.padding / 2);
		this.currencyLabel.set_x(this.profilePic.get_x() + (this.profilePic.get_width() - this.currencyLabel.get_width()) / 2 + 5);
		this.progressComponent.set_x((this.maxWidth / 2 - this.progressComponent.get_width()) / 2);
		this.progressComponent.set_y(this.currencyLabel.get_y() + this.currencyLabel.get_height() + this.padding);
	}
	,drawBackground: function() {
		var bg = new openfl_display_Shape();
		bg.get_graphics().lineStyle(2,11316396,1,true);
		bg.get_graphics().beginFill(16777215);
		bg.get_graphics().drawRoundRect(0,0,this.maxWidth - this.padding * 2,320,8,8);
		bg.get_graphics().endFill();
		this.contents.addChild(bg);
		var grayArea = new openfl_display_Sprite();
		grayArea.get_graphics().beginFill(16119285);
		oaktree_utils_MCGraphics.drawRoundRectComplex(grayArea.get_graphics(),1,1,(this.maxWidth - this.padding * 2) / 2,bg.get_height() - 4,8,0,8,0);
		grayArea.get_graphics().endFill();
		this.contents.addChild(grayArea);
	}
	,drawTitle: function() {
		var format = new openfl_text_TextFormat("Arial",30,0,true);
		format.align = 3;
		this.titleLabel = new openfl_text_TextField();
		this.titleLabel.set_defaultTextFormat(format);
		this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_profile_title"));
		this.titleLabel.set_width(this.maxWidth - this.padding);
		this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
		this.titleLabel.set_autoSize(1);
		this.titleLabel.set_selectable(false);
		this.titleLabel.set_embedFonts(false);
		this.titleLabel.set_textColor(5329233);
		this.addChild(this.titleLabel);
		this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
		this.titleLabel.set_y(this.padding);
	}
	,createRightColumnKeyValue: function(key,value) {
		if((value == null?"null":"" + value) == "NaN") value = "-";
		var spr = new openfl_display_Sprite();
		var keyLabel = new oaktree_ext_ui_Label({ text : key, fontSize : 12, autoSize : 1});
		var valueLabel = new oaktree_ext_ui_Label({ text : value == null?"null":"" + value, bold : true, fontSize : 14, autoSize : 1});
		spr.addChild(keyLabel);
		spr.addChild(valueLabel);
		valueLabel.set_x(keyLabel.get_x() + keyLabel.get_width());
		valueLabel.set_y(keyLabel.get_y() - (valueLabel.get_height() - keyLabel.get_height()) / 2);
		return spr;
	}
	,__class__: agario_module_user_view_ProfileDialog
});
var protohx_Message = function() {
};
$hxClasses["protohx.Message"] = protohx_Message;
protohx_Message.__name__ = ["protohx","Message"];
protohx_Message.stringToByteArray = function(s) {
	return haxe_io_Bytes.ofString(s);
};
protohx_Message.prototype = {
	otherFields: null
	,mergeFrom: function(input) {
		this.readFromSlice(new protohx_ReadingBuffer(new haxe_io_BytesInput(input,null,null)),0);
	}
	,mergeDelimitedFrom: function(input) {
		protohx_ReadUtils.read__TYPE_MESSAGE(new protohx_ReadingBuffer(new haxe_io_BytesInput(input,null,null)),this);
	}
	,writeTo: function(output) {
		var buffer = new protohx_WritingBuffer();
		this.writeToBuffer(buffer);
		buffer.toNormal(output);
	}
	,writeDelimitedTo: function(output) {
		var buffer = new protohx_WritingBuffer();
		protohx_WriteUtils.write__TYPE_MESSAGE(buffer,this);
		buffer.toNormal(output);
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			this.readUnknown(input,tag);
		}
	}
	,hasBytes: function(input,bytesAfterSlice) {
		return input.buf.totlen - input.buf.pos > bytesAfterSlice;
	}
	,writeToBuffer: function(output) {
		this.writeExtensionOrUnknownFields(output);
	}
	,writeSingleUnknown: function(output,tag,value) {
		protohx_WriteUtils.write__TYPE_UINT32(output,tag);
		var _g = tag & 7;
		switch(_g) {
		case 0:
			protohx_WriteUtils.write__TYPE_UINT64(output,value);
			break;
		case 1:
			protohx_WriteUtils.write__TYPE_FIXED64(output,value);
			break;
		case 2:
			protohx_WriteUtils.write__TYPE_BYTES(output,value);
			break;
		case 5:
			protohx_WriteUtils.write__TYPE_FIXED32(output,value);
			break;
		default:
			throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag & 7))));
		}
	}
	,writeUnknown: function(output,tag) {
		if(tag == 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Attemp to write an undefined string filed: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag))));
		protohx_WriteUtils.writeUnknownPair(output,tag,this.getByTag(tag));
	}
	,readUnknown: function(input,tag) {
		var value;
		var _g = tag & 7;
		switch(_g) {
		case 0:
			value = protohx_ReadUtils.read__TYPE_UINT64(input);
			break;
		case 1:
			value = protohx_ReadUtils.read__TYPE_FIXED64(input);
			break;
		case 2:
			value = protohx_ReadUtils.read__TYPE_BYTES(input);
			break;
		case 5:
			value = protohx_ReadUtils.read__TYPE_FIXED32(input);
			break;
		default:
			throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag & 7))));
		}
		var currentValue = this.getByTag(tag);
		if(currentValue == null) this.setByTag(tag,value); else if((currentValue instanceof Array) && currentValue.__enum__ == null) currentValue.push(value); else this.setByTag(tag,[currentValue,value]);
	}
	,getByTag: function(tag) {
		if(this.otherFields != null) return this.otherFields.h[tag]; else return null;
	}
	,setByTag: function(tag,value) {
		if(this.otherFields == null) this.otherFields = new haxe_ds_IntMap();
		this.otherFields.set(tag,value);
	}
	,defaultBytes: function() {
		return null;
	}
	,defaultInt64: function() {
		return protohx_Protohx.newInt64(0,0);
	}
	,defaultUInt64: function() {
		return protohx_Protohx.newUInt64(0,0);
	}
	,writeExtensionOrUnknownFields: function(output) {
		if(this.otherFields != null) {
			var $it0 = this.otherFields.keys();
			while( $it0.hasNext() ) {
				var tag = $it0.next();
				this.writeUnknown(output,tag);
			}
		}
	}
	,forEachFields: function(fn) {
	}
	,__class__: protohx_Message
};
var agario_proto_Activate_$boost_$request = function() {
	protohx_Message.call(this);
	this.set_productId("");
};
$hxClasses["agario.proto.Activate_boost_request"] = agario_proto_Activate_$boost_$request;
agario_proto_Activate_$boost_$request.__name__ = ["agario","proto","Activate_boost_request"];
agario_proto_Activate_$boost_$request.__super__ = protohx_Message;
agario_proto_Activate_$boost_$request.prototype = $extend(protohx_Message.prototype,{
	productId: null
	,setProductId: function(value) {
		this.set_productId(value);
		return this;
	}
	,set_productId: function(value) {
		return this.productId = value;
	}
	,get_productId: function() {
		return this.productId;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_productId());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("productId",this.get_productId());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var product_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(product_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_boost_request.productId cannot be set twice."));
				++product_id__count;
				this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Activate_$boost_$request
	,__properties__: {set_productId:"set_productId",get_productId:"get_productId"}
});
var agario_proto_Activate_$boost_$response = function() {
	protohx_Message.call(this);
	this.set_userBoostItem(new agario_proto_User_$boost_$item());
	this.set_productUpdates([]);
};
$hxClasses["agario.proto.Activate_boost_response"] = agario_proto_Activate_$boost_$response;
agario_proto_Activate_$boost_$response.__name__ = ["agario","proto","Activate_boost_response"];
agario_proto_Activate_$boost_$response.__super__ = protohx_Message;
agario_proto_Activate_$boost_$response.prototype = $extend(protohx_Message.prototype,{
	userBoostItem: null
	,setUserBoostItem: function(value) {
		this.set_userBoostItem(value);
		return this;
	}
	,set_userBoostItem: function(value) {
		return this.userBoostItem = value;
	}
	,get_userBoostItem: function() {
		return this.userBoostItem;
	}
	,productUpdates: null
	,setProductUpdates: function(value) {
		this.set_productUpdates(value);
		return this;
	}
	,set_productUpdates: function(value) {
		return this.productUpdates = value;
	}
	,get_productUpdates: function() {
		return this.productUpdates;
	}
	,addProductUpdates: function(value) {
		if(this.get_productUpdates() == null) this.set_productUpdates([value]); else this.get_productUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userBoostItem());
		if(this.get_productUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_productUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,2);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("userBoostItem",this.get_userBoostItem());
		if(this.get_productUpdates() != null && this.get_productUpdates().length > 0) fn("productUpdates",this.get_productUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var user_boost_item__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(user_boost_item__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_boost_response.userBoostItem cannot be set twice."));
				++user_boost_item__count;
				this.set_userBoostItem(new agario_proto_User_$boost_$item());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userBoostItem());
				break;
			case 2:
				if(this.get_productUpdates() == null) this.set_productUpdates([]);
				this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Activate_$boost_$response
	,__properties__: {set_productUpdates:"set_productUpdates",get_productUpdates:"get_productUpdates",set_userBoostItem:"set_userBoostItem",get_userBoostItem:"get_userBoostItem"}
});
var agario_proto_Activate_$timed_$event_$request = function() {
	protohx_Message.call(this);
	this.set_eventId("");
};
$hxClasses["agario.proto.Activate_timed_event_request"] = agario_proto_Activate_$timed_$event_$request;
agario_proto_Activate_$timed_$event_$request.__name__ = ["agario","proto","Activate_timed_event_request"];
agario_proto_Activate_$timed_$event_$request.__super__ = protohx_Message;
agario_proto_Activate_$timed_$event_$request.prototype = $extend(protohx_Message.prototype,{
	eventId: null
	,setEventId: function(value) {
		this.set_eventId(value);
		return this;
	}
	,set_eventId: function(value) {
		return this.eventId = value;
	}
	,get_eventId: function() {
		return this.eventId;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_eventId());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("eventId",this.get_eventId());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var event_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(event_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_timed_event_request.eventId cannot be set twice."));
				++event_id__count;
				this.set_eventId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Activate_$timed_$event_$request
	,__properties__: {set_eventId:"set_eventId",get_eventId:"get_eventId"}
});
var agario_proto_Activate_$timed_$event_$response = function() {
	protohx_Message.call(this);
	this.set_userTimedEvent(new agario_proto_User_$timed_$event());
	this.set_productUpdates([]);
};
$hxClasses["agario.proto.Activate_timed_event_response"] = agario_proto_Activate_$timed_$event_$response;
agario_proto_Activate_$timed_$event_$response.__name__ = ["agario","proto","Activate_timed_event_response"];
agario_proto_Activate_$timed_$event_$response.__super__ = protohx_Message;
agario_proto_Activate_$timed_$event_$response.prototype = $extend(protohx_Message.prototype,{
	userTimedEvent: null
	,setUserTimedEvent: function(value) {
		this.set_userTimedEvent(value);
		return this;
	}
	,set_userTimedEvent: function(value) {
		return this.userTimedEvent = value;
	}
	,get_userTimedEvent: function() {
		return this.userTimedEvent;
	}
	,productUpdates: null
	,setProductUpdates: function(value) {
		this.set_productUpdates(value);
		return this;
	}
	,set_productUpdates: function(value) {
		return this.productUpdates = value;
	}
	,get_productUpdates: function() {
		return this.productUpdates;
	}
	,addProductUpdates: function(value) {
		if(this.get_productUpdates() == null) this.set_productUpdates([value]); else this.get_productUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userTimedEvent());
		if(this.get_productUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_productUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,2);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("userTimedEvent",this.get_userTimedEvent());
		if(this.get_productUpdates() != null && this.get_productUpdates().length > 0) fn("productUpdates",this.get_productUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var user_timed_event__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(user_timed_event__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Activate_timed_event_response.userTimedEvent cannot be set twice."));
				++user_timed_event__count;
				this.set_userTimedEvent(new agario_proto_User_$timed_$event());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userTimedEvent());
				break;
			case 2:
				if(this.get_productUpdates() == null) this.set_productUpdates([]);
				this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Activate_$timed_$event_$response
	,__properties__: {set_productUpdates:"set_productUpdates",get_productUpdates:"get_productUpdates",set_userTimedEvent:"set_userTimedEvent",get_userTimedEvent:"get_userTimedEvent"}
});
var agario_proto_Apple_$inapp_$purchase_$request = function() {
	protohx_Message.call(this);
	this.set_transactionId(this.defaultUInt64());
	this.set_receiptData("");
	this.set_purchaseToken("");
};
$hxClasses["agario.proto.Apple_inapp_purchase_request"] = agario_proto_Apple_$inapp_$purchase_$request;
agario_proto_Apple_$inapp_$purchase_$request.__name__ = ["agario","proto","Apple_inapp_purchase_request"];
agario_proto_Apple_$inapp_$purchase_$request.__super__ = protohx_Message;
agario_proto_Apple_$inapp_$purchase_$request.prototype = $extend(protohx_Message.prototype,{
	transactionId: null
	,setTransactionId: function(value) {
		this.set_transactionId(value);
		return this;
	}
	,set_transactionId: function(value) {
		return this.transactionId = value;
	}
	,get_transactionId: function() {
		return this.transactionId;
	}
	,receiptData: null
	,setReceiptData: function(value) {
		this.set_receiptData(value);
		return this;
	}
	,set_receiptData: function(value) {
		return this.receiptData = value;
	}
	,get_receiptData: function() {
		return this.receiptData;
	}
	,purchaseToken: null
	,setPurchaseToken: function(value) {
		this.set_purchaseToken(value);
		return this;
	}
	,set_purchaseToken: function(value) {
		return this.purchaseToken = value;
	}
	,get_purchaseToken: function() {
		return this.purchaseToken;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT64(output,this.get_transactionId());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_receiptData());
		protohx_WriteUtils.writeTag(output,2,3);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_purchaseToken());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("transactionId",this.get_transactionId());
		fn("receiptData",this.get_receiptData());
		fn("purchaseToken",this.get_purchaseToken());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var transaction_id__count = 0;
		var receipt_data__count = 0;
		var purchase_token__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(transaction_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.transactionId cannot be set twice."));
				++transaction_id__count;
				this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
				break;
			case 2:
				if(receipt_data__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.receiptData cannot be set twice."));
				++receipt_data__count;
				this.set_receiptData(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(purchase_token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Apple_inapp_purchase_request.purchaseToken cannot be set twice."));
				++purchase_token__count;
				this.set_purchaseToken(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Apple_$inapp_$purchase_$request
	,__properties__: {set_purchaseToken:"set_purchaseToken",get_purchaseToken:"get_purchaseToken",set_receiptData:"set_receiptData",get_receiptData:"get_receiptData",set_transactionId:"set_transactionId",get_transactionId:"get_transactionId"}
});
var agario_proto_Arena_$state = function() {
	protohx_Message.call(this);
	this.set_orderId(0);
	this.set_appeared([]);
	this.set_changed([]);
	this.set_disappeared([]);
	this.set_died([]);
};
$hxClasses["agario.proto.Arena_state"] = agario_proto_Arena_$state;
agario_proto_Arena_$state.__name__ = ["agario","proto","Arena_state"];
agario_proto_Arena_$state.__super__ = protohx_Message;
agario_proto_Arena_$state.prototype = $extend(protohx_Message.prototype,{
	orderId: null
	,setOrderId: function(value) {
		this.set_orderId(value);
		return this;
	}
	,set_orderId: function(value) {
		return this.orderId = value;
	}
	,get_orderId: function() {
		return this.orderId;
	}
	,appeared: null
	,setAppeared: function(value) {
		this.set_appeared(value);
		return this;
	}
	,set_appeared: function(value) {
		return this.appeared = value;
	}
	,get_appeared: function() {
		return this.appeared;
	}
	,addAppeared: function(value) {
		if(this.get_appeared() == null) this.set_appeared([value]); else this.get_appeared().push(value);
	}
	,changed: null
	,setChanged: function(value) {
		this.set_changed(value);
		return this;
	}
	,set_changed: function(value) {
		return this.changed = value;
	}
	,get_changed: function() {
		return this.changed;
	}
	,addChanged: function(value) {
		if(this.get_changed() == null) this.set_changed([value]); else this.get_changed().push(value);
	}
	,disappeared: null
	,setDisappeared: function(value) {
		this.set_disappeared(value);
		return this;
	}
	,set_disappeared: function(value) {
		return this.disappeared = value;
	}
	,get_disappeared: function() {
		return this.disappeared;
	}
	,addDisappeared: function(value) {
		if(this.get_disappeared() == null) this.set_disappeared([value]); else this.get_disappeared().push(value);
	}
	,died: null
	,setDied: function(value) {
		this.set_died(value);
		return this;
	}
	,set_died: function(value) {
		return this.died = value;
	}
	,get_died: function() {
		return this.died;
	}
	,addDied: function(value) {
		if(this.get_died() == null) this.set_died([value]); else this.get_died().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_orderId());
		if(this.get_appeared() != null) {
			var _g = 0;
			var _g1 = this.get_appeared();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,2);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		if(this.get_changed() != null) {
			var _g2 = 0;
			var _g11 = this.get_changed();
			while(_g2 < _g11.length) {
				var value1 = _g11[_g2];
				++_g2;
				protohx_WriteUtils.writeTag(output,2,3);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value1);
			}
		}
		if(this.get_disappeared() != null) {
			var _g3 = 0;
			var _g12 = this.get_disappeared();
			while(_g3 < _g12.length) {
				var value2 = _g12[_g3];
				++_g3;
				protohx_WriteUtils.writeTag(output,0,4);
				protohx_WriteUtils.write__TYPE_UINT32(output,value2);
			}
		}
		if(this.get_died() != null) {
			var _g4 = 0;
			var _g13 = this.get_died();
			while(_g4 < _g13.length) {
				var value3 = _g13[_g4];
				++_g4;
				protohx_WriteUtils.writeTag(output,2,5);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value3);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("orderId",this.get_orderId());
		if(this.get_appeared() != null && this.get_appeared().length > 0) fn("appeared",this.get_appeared());
		if(this.get_changed() != null && this.get_changed().length > 0) fn("changed",this.get_changed());
		if(this.get_disappeared() != null && this.get_disappeared().length > 0) fn("disappeared",this.get_disappeared());
		if(this.get_died() != null && this.get_died().length > 0) fn("died",this.get_died());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var order_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(order_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Arena_state.orderId cannot be set twice."));
				++order_id__count;
				this.set_orderId(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 2:
				if(this.get_appeared() == null) this.set_appeared([]);
				this.get_appeared().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_Cell_$state()));
				break;
			case 3:
				if(this.get_changed() == null) this.set_changed([]);
				this.get_changed().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_Cell_$state()));
				break;
			case 4:
				if(this.get_disappeared() == null) this.set_disappeared([]);
				if((function($this) {
					var $r;
					var a;
					a = js_Boot.__cast(tag & 7 , Int);
					$r = a == 2;
					return $r;
				}(this))) protohx_ReadUtils.readPackedRepeated(input,protohx_ReadUtils.read__TYPE_UINT32,this.get_disappeared()); else this.get_disappeared().push(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 5:
				if(this.get_died() == null) this.set_died([]);
				this.get_died().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_Cell_$death()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Arena_$state
	,__properties__: {set_died:"set_died",get_died:"get_died",set_disappeared:"set_disappeared",get_disappeared:"get_disappeared",set_changed:"set_changed",get_changed:"get_changed",set_appeared:"set_appeared",get_appeared:"get_appeared",set_orderId:"set_orderId",get_orderId:"get_orderId"}
});
var agario_proto_Cell_$death = function() {
	protohx_Message.call(this);
	this.set_id(0);
	this.set_killerId(0);
};
$hxClasses["agario.proto.Cell_death"] = agario_proto_Cell_$death;
agario_proto_Cell_$death.__name__ = ["agario","proto","Cell_death"];
agario_proto_Cell_$death.__super__ = protohx_Message;
agario_proto_Cell_$death.prototype = $extend(protohx_Message.prototype,{
	id: null
	,setId: function(value) {
		this.set_id(value);
		return this;
	}
	,set_id: function(value) {
		return this.id = value;
	}
	,get_id: function() {
		return this.id;
	}
	,killerId: null
	,setKillerId: function(value) {
		this.set_killerId(value);
		return this;
	}
	,set_killerId: function(value) {
		return this.killerId = value;
	}
	,get_killerId: function() {
		return this.killerId;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_id());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_killerId());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("id",this.get_id());
		fn("killerId",this.get_killerId());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var id__count = 0;
		var killer_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_death.id cannot be set twice."));
				++id__count;
				this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 2:
				if(killer_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_death.killerId cannot be set twice."));
				++killer_id__count;
				this.set_killerId(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Cell_$death
	,__properties__: {set_killerId:"set_killerId",get_killerId:"get_killerId",set_id:"set_id",get_id:"get_id"}
});
var agario_proto_Cell_$state = function() {
	this.hasField__0 = 0;
	protohx_Message.call(this);
	this.set_type(0);
	this.set_id(0);
	this.set_x(0);
	this.set_y(0);
	this.set_radius(0);
};
$hxClasses["agario.proto.Cell_state"] = agario_proto_Cell_$state;
agario_proto_Cell_$state.__name__ = ["agario","proto","Cell_state"];
agario_proto_Cell_$state.__super__ = protohx_Message;
agario_proto_Cell_$state.prototype = $extend(protohx_Message.prototype,{
	type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,id: null
	,setId: function(value) {
		this.set_id(value);
		return this;
	}
	,set_id: function(value) {
		return this.id = value;
	}
	,get_id: function() {
		return this.id;
	}
	,x: null
	,setX: function(value) {
		this.set_x(value);
		return this;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_x: function() {
		return this.x;
	}
	,y: null
	,setY: function(value) {
		this.set_y(value);
		return this;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_y: function() {
		return this.y;
	}
	,radius: null
	,setRadius: function(value) {
		this.set_radius(value);
		return this;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,get_radius: function() {
		return this.radius;
	}
	,name: null
	,setName: function(value) {
		this.set_name(value);
		return this;
	}
	,clearName: function() {
		this.set_name(null);
	}
	,hasName: function() {
		return this.get_name() != null;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_name: function() {
		return this.name;
	}
	,userLevel: null
	,setUserLevel: function(value) {
		this.set_userLevel(value);
		return this;
	}
	,hasField__0: null
	,clearUserLevel: function() {
		this.hasField__0 = this.hasField__0 & -2;
		this.set_userLevel(0);
	}
	,hasUserLevel: function() {
		return (this.hasField__0 & 1) != 0;
	}
	,set_userLevel: function(value) {
		this.hasField__0 = this.hasField__0 | 1;
		return this.userLevel = value;
	}
	,get_userLevel: function() {
		return this.userLevel;
	}
	,skinGameplayId: null
	,setSkinGameplayId: function(value) {
		this.set_skinGameplayId(value);
		return this;
	}
	,clearSkinGameplayId: function() {
		this.hasField__0 = this.hasField__0 & -3;
		this.set_skinGameplayId(0);
	}
	,hasSkinGameplayId: function() {
		return (this.hasField__0 & 2) != 0;
	}
	,set_skinGameplayId: function(value) {
		this.hasField__0 = this.hasField__0 | 2;
		return this.skinGameplayId = value;
	}
	,get_skinGameplayId: function() {
		return this.skinGameplayId;
	}
	,color: null
	,setColor: function(value) {
		this.set_color(value);
		return this;
	}
	,clearColor: function() {
		this.hasField__0 = this.hasField__0 & -5;
		this.set_color(0);
	}
	,hasColor: function() {
		return (this.hasField__0 & 4) != 0;
	}
	,set_color: function(value) {
		this.hasField__0 = this.hasField__0 | 4;
		return this.color = value;
	}
	,get_color: function() {
		return this.color;
	}
	,playerOwned: null
	,setPlayerOwned: function(value) {
		this.set_playerOwned(value);
		return this;
	}
	,clearPlayerOwned: function() {
		this.hasField__0 = this.hasField__0 & -9;
		this.set_playerOwned(false);
	}
	,hasPlayerOwned: function() {
		return (this.hasField__0 & 8) != 0;
	}
	,set_playerOwned: function(value) {
		this.hasField__0 = this.hasField__0 | 8;
		return this.playerOwned = value;
	}
	,get_playerOwned: function() {
		return this.playerOwned;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_id());
		protohx_WriteUtils.writeTag(output,5,3);
		protohx_WriteUtils.write__TYPE_FLOAT(output,this.get_x());
		protohx_WriteUtils.writeTag(output,5,4);
		protohx_WriteUtils.write__TYPE_FLOAT(output,this.get_y());
		protohx_WriteUtils.writeTag(output,5,5);
		protohx_WriteUtils.write__TYPE_FLOAT(output,this.get_radius());
		if(this.get_name() != null) {
			protohx_WriteUtils.writeTag(output,2,6);
			protohx_WriteUtils.write__TYPE_STRING(output,this.get_name());
		}
		if((this.hasField__0 & 1) != 0) {
			protohx_WriteUtils.writeTag(output,0,7);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_userLevel());
		}
		if((this.hasField__0 & 2) != 0) {
			protohx_WriteUtils.writeTag(output,0,8);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_skinGameplayId());
		}
		if((this.hasField__0 & 4) != 0) {
			protohx_WriteUtils.writeTag(output,0,9);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_color());
		}
		if((this.hasField__0 & 8) != 0) {
			protohx_WriteUtils.writeTag(output,0,10);
			protohx_WriteUtils.write__TYPE_BOOL(output,this.get_playerOwned());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("type",this.get_type());
		fn("id",this.get_id());
		fn("x",this.get_x());
		fn("y",this.get_y());
		fn("radius",this.get_radius());
		if(this.get_name() != null) fn("name",this.get_name());
		if((this.hasField__0 & 1) != 0) fn("userLevel",this.get_userLevel());
		if((this.hasField__0 & 2) != 0) fn("skinGameplayId",this.get_skinGameplayId());
		if((this.hasField__0 & 4) != 0) fn("color",this.get_color());
		if((this.hasField__0 & 8) != 0) fn("playerOwned",this.get_playerOwned());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var type__count = 0;
		var id__count = 0;
		var x__count = 0;
		var y__count = 0;
		var radius__count = 0;
		var name__count = 0;
		var user_level__count = 0;
		var skin_gameplay_id__count = 0;
		var color__count = 0;
		var player_owned__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.id cannot be set twice."));
				++id__count;
				this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 3:
				if(x__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.x cannot be set twice."));
				++x__count;
				this.set_x(protohx_ReadUtils.read__TYPE_FLOAT(input));
				break;
			case 4:
				if(y__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.y cannot be set twice."));
				++y__count;
				this.set_y(protohx_ReadUtils.read__TYPE_FLOAT(input));
				break;
			case 5:
				if(radius__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.radius cannot be set twice."));
				++radius__count;
				this.set_radius(protohx_ReadUtils.read__TYPE_FLOAT(input));
				break;
			case 6:
				if(name__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.name cannot be set twice."));
				++name__count;
				this.set_name(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 7:
				if(user_level__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.userLevel cannot be set twice."));
				++user_level__count;
				this.set_userLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 8:
				if(skin_gameplay_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.skinGameplayId cannot be set twice."));
				++skin_gameplay_id__count;
				this.set_skinGameplayId(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 9:
				if(color__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.color cannot be set twice."));
				++color__count;
				this.set_color(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 10:
				if(player_owned__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Cell_state.playerOwned cannot be set twice."));
				++player_owned__count;
				this.set_playerOwned(protohx_ReadUtils.read__TYPE_BOOL(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Cell_$state
	,__properties__: {set_playerOwned:"set_playerOwned",get_playerOwned:"get_playerOwned",set_color:"set_color",get_color:"get_color",set_skinGameplayId:"set_skinGameplayId",get_skinGameplayId:"get_skinGameplayId",set_userLevel:"set_userLevel",get_userLevel:"get_userLevel",set_name:"set_name",get_name:"get_name",set_radius:"set_radius",get_radius:"get_radius",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",set_type:"set_type",get_type:"get_type"}
});
var agario_proto_Claim_$gifts_$request = function() {
	protohx_Message.call(this);
	this.set_giftIds([]);
};
$hxClasses["agario.proto.Claim_gifts_request"] = agario_proto_Claim_$gifts_$request;
agario_proto_Claim_$gifts_$request.__name__ = ["agario","proto","Claim_gifts_request"];
agario_proto_Claim_$gifts_$request.__super__ = protohx_Message;
agario_proto_Claim_$gifts_$request.prototype = $extend(protohx_Message.prototype,{
	giftIds: null
	,setGiftIds: function(value) {
		this.set_giftIds(value);
		return this;
	}
	,set_giftIds: function(value) {
		return this.giftIds = value;
	}
	,get_giftIds: function() {
		return this.giftIds;
	}
	,addGiftIds: function(value) {
		if(this.get_giftIds() == null) this.set_giftIds([value]); else this.get_giftIds().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_giftIds() != null) {
			var _g = 0;
			var _g1 = this.get_giftIds();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_STRING(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_giftIds() != null && this.get_giftIds().length > 0) fn("giftIds",this.get_giftIds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_giftIds() == null) this.set_giftIds([]);
				this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Claim_$gifts_$request
	,__properties__: {set_giftIds:"set_giftIds",get_giftIds:"get_giftIds"}
});
var agario_proto_Claim_$gifts_$response = function() {
	protohx_Message.call(this);
	this.set_userDataUpdate(new agario_proto_User_$data_$update());
};
$hxClasses["agario.proto.Claim_gifts_response"] = agario_proto_Claim_$gifts_$response;
agario_proto_Claim_$gifts_$response.__name__ = ["agario","proto","Claim_gifts_response"];
agario_proto_Claim_$gifts_$response.__super__ = protohx_Message;
agario_proto_Claim_$gifts_$response.prototype = $extend(protohx_Message.prototype,{
	userDataUpdate: null
	,setUserDataUpdate: function(value) {
		this.set_userDataUpdate(value);
		return this;
	}
	,set_userDataUpdate: function(value) {
		return this.userDataUpdate = value;
	}
	,get_userDataUpdate: function() {
		return this.userDataUpdate;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userDataUpdate());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("userDataUpdate",this.get_userDataUpdate());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var user_data_update__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(user_data_update__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Claim_gifts_response.userDataUpdate cannot be set twice."));
				++user_data_update__count;
				this.set_userDataUpdate(new agario_proto_User_$data_$update());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userDataUpdate());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Claim_$gifts_$response
	,__properties__: {set_userDataUpdate:"set_userDataUpdate",get_userDataUpdate:"get_userDataUpdate"}
});
var agario_proto_Consume_$requests = function() {
	protohx_Message.call(this);
	this.set_requestIds([]);
};
$hxClasses["agario.proto.Consume_requests"] = agario_proto_Consume_$requests;
agario_proto_Consume_$requests.__name__ = ["agario","proto","Consume_requests"];
agario_proto_Consume_$requests.__super__ = protohx_Message;
agario_proto_Consume_$requests.prototype = $extend(protohx_Message.prototype,{
	requestIds: null
	,setRequestIds: function(value) {
		this.set_requestIds(value);
		return this;
	}
	,set_requestIds: function(value) {
		return this.requestIds = value;
	}
	,get_requestIds: function() {
		return this.requestIds;
	}
	,addRequestIds: function(value) {
		if(this.get_requestIds() == null) this.set_requestIds([value]); else this.get_requestIds().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_requestIds() != null) {
			var _g = 0;
			var _g1 = this.get_requestIds();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_STRING(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_requestIds() != null && this.get_requestIds().length > 0) fn("requestIds",this.get_requestIds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_requestIds() == null) this.set_requestIds([]);
				this.get_requestIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Consume_$requests
	,__properties__: {set_requestIds:"set_requestIds",get_requestIds:"get_requestIds"}
});
var agario_proto_Device = function() {
	protohx_Message.call(this);
	this.set_platform(0);
	this.set_version("");
	this.set_width(0);
	this.set_height(0);
};
$hxClasses["agario.proto.Device"] = agario_proto_Device;
agario_proto_Device.__name__ = ["agario","proto","Device"];
agario_proto_Device.__super__ = protohx_Message;
agario_proto_Device.prototype = $extend(protohx_Message.prototype,{
	platform: null
	,setPlatform: function(value) {
		this.set_platform(value);
		return this;
	}
	,set_platform: function(value) {
		return this.platform = value;
	}
	,get_platform: function() {
		return this.platform;
	}
	,version: null
	,setVersion: function(value) {
		this.set_version(value);
		return this;
	}
	,set_version: function(value) {
		return this.version = value;
	}
	,get_version: function() {
		return this.version;
	}
	,width: null
	,setWidth: function(value) {
		this.set_width(value);
		return this;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_width: function() {
		return this.width;
	}
	,height: null
	,setHeight: function(value) {
		this.set_height(value);
		return this;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_height: function() {
		return this.height;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_platform());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_version());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_width());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_height());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("platform",this.get_platform());
		fn("version",this.get_version());
		fn("width",this.get_width());
		fn("height",this.get_height());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var platform__count = 0;
		var version__count = 0;
		var width__count = 0;
		var height__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(platform__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.platform cannot be set twice."));
				++platform__count;
				this.set_platform(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(version__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.version cannot be set twice."));
				++version__count;
				this.set_version(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(width__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.width cannot be set twice."));
				++width__count;
				this.set_width(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 4:
				if(height__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Device.height cannot be set twice."));
				++height__count;
				this.set_height(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Device
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_version:"set_version",get_version:"get_version",set_platform:"set_platform",get_platform:"get_platform"}
});
var agario_proto_Direction_$vector = function() {
	protohx_Message.call(this);
	this.set_x(0);
	this.set_y(0);
};
$hxClasses["agario.proto.Direction_vector"] = agario_proto_Direction_$vector;
agario_proto_Direction_$vector.__name__ = ["agario","proto","Direction_vector"];
agario_proto_Direction_$vector.__super__ = protohx_Message;
agario_proto_Direction_$vector.prototype = $extend(protohx_Message.prototype,{
	x: null
	,setX: function(value) {
		this.set_x(value);
		return this;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_x: function() {
		return this.x;
	}
	,y: null
	,setY: function(value) {
		this.set_y(value);
		return this;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_y: function() {
		return this.y;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,5,1);
		protohx_WriteUtils.write__TYPE_FLOAT(output,this.get_x());
		protohx_WriteUtils.writeTag(output,5,2);
		protohx_WriteUtils.write__TYPE_FLOAT(output,this.get_y());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("x",this.get_x());
		fn("y",this.get_y());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var x__count = 0;
		var y__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(x__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Direction_vector.x cannot be set twice."));
				++x__count;
				this.set_x(protohx_ReadUtils.read__TYPE_FLOAT(input));
				break;
			case 2:
				if(y__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Direction_vector.y cannot be set twice."));
				++y__count;
				this.set_y(protohx_ReadUtils.read__TYPE_FLOAT(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Direction_$vector
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var agario_proto_Disconnect = function() {
	this.hasField__0 = 0;
	protohx_Message.call(this);
	this.set_reason(0);
};
$hxClasses["agario.proto.Disconnect"] = agario_proto_Disconnect;
agario_proto_Disconnect.__name__ = ["agario","proto","Disconnect"];
agario_proto_Disconnect.__super__ = protohx_Message;
agario_proto_Disconnect.prototype = $extend(protohx_Message.prototype,{
	reason: null
	,setReason: function(value) {
		this.set_reason(value);
		return this;
	}
	,set_reason: function(value) {
		return this.reason = value;
	}
	,get_reason: function() {
		return this.reason;
	}
	,reconnectHost: null
	,setReconnectHost: function(value) {
		this.set_reconnectHost(value);
		return this;
	}
	,clearReconnectHost: function() {
		this.set_reconnectHost(null);
	}
	,hasReconnectHost: function() {
		return this.get_reconnectHost() != null;
	}
	,set_reconnectHost: function(value) {
		return this.reconnectHost = value;
	}
	,get_reconnectHost: function() {
		return this.reconnectHost;
	}
	,reconnectTcpPort: null
	,setReconnectTcpPort: function(value) {
		this.set_reconnectTcpPort(value);
		return this;
	}
	,hasField__0: null
	,clearReconnectTcpPort: function() {
		this.hasField__0 = this.hasField__0 & -2;
		this.set_reconnectTcpPort(0);
	}
	,hasReconnectTcpPort: function() {
		return (this.hasField__0 & 1) != 0;
	}
	,set_reconnectTcpPort: function(value) {
		this.hasField__0 = this.hasField__0 | 1;
		return this.reconnectTcpPort = value;
	}
	,get_reconnectTcpPort: function() {
		return this.reconnectTcpPort;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_reason());
		if(this.get_reconnectHost() != null) {
			protohx_WriteUtils.writeTag(output,2,2);
			protohx_WriteUtils.write__TYPE_STRING(output,this.get_reconnectHost());
		}
		if((this.hasField__0 & 1) != 0) {
			protohx_WriteUtils.writeTag(output,0,3);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_reconnectTcpPort());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("reason",this.get_reason());
		if(this.get_reconnectHost() != null) fn("reconnectHost",this.get_reconnectHost());
		if((this.hasField__0 & 1) != 0) fn("reconnectTcpPort",this.get_reconnectTcpPort());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var reason__count = 0;
		var reconnect_host__count = 0;
		var reconnect_tcp_port__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(reason__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Disconnect.reason cannot be set twice."));
				++reason__count;
				this.set_reason(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(reconnect_host__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Disconnect.reconnectHost cannot be set twice."));
				++reconnect_host__count;
				this.set_reconnectHost(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(reconnect_tcp_port__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Disconnect.reconnectTcpPort cannot be set twice."));
				++reconnect_tcp_port__count;
				this.set_reconnectTcpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Disconnect
	,__properties__: {set_reconnectTcpPort:"set_reconnectTcpPort",get_reconnectTcpPort:"get_reconnectTcpPort",set_reconnectHost:"set_reconnectHost",get_reconnectHost:"get_reconnectHost",set_reason:"set_reason",get_reason:"get_reason"}
});
var agario_proto_Enter_$game_$request = function() {
	protohx_Message.call(this);
	this.set_nickname("");
};
$hxClasses["agario.proto.Enter_game_request"] = agario_proto_Enter_$game_$request;
agario_proto_Enter_$game_$request.__name__ = ["agario","proto","Enter_game_request"];
agario_proto_Enter_$game_$request.__super__ = protohx_Message;
agario_proto_Enter_$game_$request.prototype = $extend(protohx_Message.prototype,{
	nickname: null
	,setNickname: function(value) {
		this.set_nickname(value);
		return this;
	}
	,set_nickname: function(value) {
		return this.nickname = value;
	}
	,get_nickname: function() {
		return this.nickname;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_nickname());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("nickname",this.get_nickname());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var nickname__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(nickname__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Enter_game_request.nickname cannot be set twice."));
				++nickname__count;
				this.set_nickname(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Enter_$game_$request
	,__properties__: {set_nickname:"set_nickname",get_nickname:"get_nickname"}
});
var agario_proto_Envelope = function() {
	this.hasField__0 = 0;
	protohx_Message.call(this);
	this.set_type(0);
};
$hxClasses["agario.proto.Envelope"] = agario_proto_Envelope;
agario_proto_Envelope.__name__ = ["agario","proto","Envelope"];
agario_proto_Envelope.__super__ = protohx_Message;
agario_proto_Envelope.prototype = $extend(protohx_Message.prototype,{
	type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,uncompressedData: null
	,setUncompressedData: function(value) {
		this.set_uncompressedData(value);
		return this;
	}
	,clearUncompressedData: function() {
		this.set_uncompressedData(null);
	}
	,hasUncompressedData: function() {
		return this.get_uncompressedData() != null;
	}
	,set_uncompressedData: function(value) {
		return this.uncompressedData = value;
	}
	,get_uncompressedData: function() {
		return this.uncompressedData;
	}
	,compressedData: null
	,setCompressedData: function(value) {
		this.set_compressedData(value);
		return this;
	}
	,clearCompressedData: function() {
		this.set_compressedData(null);
	}
	,hasCompressedData: function() {
		return this.get_compressedData() != null;
	}
	,set_compressedData: function(value) {
		return this.compressedData = value;
	}
	,get_compressedData: function() {
		return this.compressedData;
	}
	,uncompressedSize: null
	,setUncompressedSize: function(value) {
		this.set_uncompressedSize(value);
		return this;
	}
	,hasField__0: null
	,clearUncompressedSize: function() {
		this.hasField__0 = this.hasField__0 & -2;
		this.set_uncompressedSize(0);
	}
	,hasUncompressedSize: function() {
		return (this.hasField__0 & 1) != 0;
	}
	,set_uncompressedSize: function(value) {
		this.hasField__0 = this.hasField__0 | 1;
		return this.uncompressedSize = value;
	}
	,get_uncompressedSize: function() {
		return this.uncompressedSize;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		if(this.get_uncompressedData() != null) {
			protohx_WriteUtils.writeTag(output,2,2);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_uncompressedData());
		}
		if(this.get_compressedData() != null) {
			protohx_WriteUtils.writeTag(output,2,3);
			protohx_WriteUtils.write__TYPE_BYTES(output,this.get_compressedData());
		}
		if((this.hasField__0 & 1) != 0) {
			protohx_WriteUtils.writeTag(output,0,4);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_uncompressedSize());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("type",this.get_type());
		if(this.get_uncompressedData() != null) fn("uncompressedData",this.get_uncompressedData());
		if(this.get_compressedData() != null) fn("compressedData",this.get_compressedData());
		if((this.hasField__0 & 1) != 0) fn("uncompressedSize",this.get_uncompressedSize());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var type__count = 0;
		var uncompressed_data__count = 0;
		var compressed_data__count = 0;
		var uncompressed_size__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(uncompressed_data__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.uncompressedData cannot be set twice."));
				++uncompressed_data__count;
				this.set_uncompressedData(new agario_proto_Req());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_uncompressedData());
				break;
			case 3:
				if(compressed_data__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.compressedData cannot be set twice."));
				++compressed_data__count;
				this.set_compressedData(protohx_ReadUtils.read__TYPE_BYTES(input));
				break;
			case 4:
				if(uncompressed_size__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Envelope.uncompressedSize cannot be set twice."));
				++uncompressed_size__count;
				this.set_uncompressedSize(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Envelope
	,__properties__: {set_uncompressedSize:"set_uncompressedSize",get_uncompressedSize:"get_uncompressedSize",set_compressedData:"set_compressedData",get_compressedData:"get_compressedData",set_uncompressedData:"set_uncompressedData",get_uncompressedData:"get_uncompressedData",set_type:"set_type",get_type:"get_type"}
});
var agario_proto_Game_$over = function() {
	protohx_Message.call(this);
	this.set_userDataUpdates([]);
	this.set_userStats(new agario_proto_User_$stats());
};
$hxClasses["agario.proto.Game_over"] = agario_proto_Game_$over;
agario_proto_Game_$over.__name__ = ["agario","proto","Game_over"];
agario_proto_Game_$over.__super__ = protohx_Message;
agario_proto_Game_$over.prototype = $extend(protohx_Message.prototype,{
	userDataUpdates: null
	,setUserDataUpdates: function(value) {
		this.set_userDataUpdates(value);
		return this;
	}
	,set_userDataUpdates: function(value) {
		return this.userDataUpdates = value;
	}
	,get_userDataUpdates: function() {
		return this.userDataUpdates;
	}
	,addUserDataUpdates: function(value) {
		if(this.get_userDataUpdates() == null) this.set_userDataUpdates([value]); else this.get_userDataUpdates().push(value);
	}
	,userStats: null
	,setUserStats: function(value) {
		this.set_userStats(value);
		return this;
	}
	,set_userStats: function(value) {
		return this.userStats = value;
	}
	,get_userStats: function() {
		return this.userStats;
	}
	,writeToBuffer: function(output) {
		if(this.get_userDataUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_userDataUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userStats());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_userDataUpdates() != null && this.get_userDataUpdates().length > 0) fn("userDataUpdates",this.get_userDataUpdates());
		fn("userStats",this.get_userStats());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var user_stats__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_userDataUpdates() == null) this.set_userDataUpdates([]);
				this.get_userDataUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			case 2:
				if(user_stats__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Game_over.userStats cannot be set twice."));
				++user_stats__count;
				this.set_userStats(new agario_proto_User_$stats());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userStats());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Game_$over
	,__properties__: {set_userStats:"set_userStats",get_userStats:"get_userStats",set_userDataUpdates:"set_userDataUpdates",get_userDataUpdates:"get_userDataUpdates"}
});
var agario_proto_Google_$inapp_$purchase_$request = function() {
	protohx_Message.call(this);
	this.set_transactionId(this.defaultUInt64());
	this.set_receiptData("");
	this.set_signature("");
};
$hxClasses["agario.proto.Google_inapp_purchase_request"] = agario_proto_Google_$inapp_$purchase_$request;
agario_proto_Google_$inapp_$purchase_$request.__name__ = ["agario","proto","Google_inapp_purchase_request"];
agario_proto_Google_$inapp_$purchase_$request.__super__ = protohx_Message;
agario_proto_Google_$inapp_$purchase_$request.prototype = $extend(protohx_Message.prototype,{
	transactionId: null
	,setTransactionId: function(value) {
		this.set_transactionId(value);
		return this;
	}
	,set_transactionId: function(value) {
		return this.transactionId = value;
	}
	,get_transactionId: function() {
		return this.transactionId;
	}
	,receiptData: null
	,setReceiptData: function(value) {
		this.set_receiptData(value);
		return this;
	}
	,set_receiptData: function(value) {
		return this.receiptData = value;
	}
	,get_receiptData: function() {
		return this.receiptData;
	}
	,signature: null
	,setSignature: function(value) {
		this.set_signature(value);
		return this;
	}
	,set_signature: function(value) {
		return this.signature = value;
	}
	,get_signature: function() {
		return this.signature;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT64(output,this.get_transactionId());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_receiptData());
		protohx_WriteUtils.writeTag(output,2,3);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_signature());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("transactionId",this.get_transactionId());
		fn("receiptData",this.get_receiptData());
		fn("signature",this.get_signature());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var transaction_id__count = 0;
		var receipt_data__count = 0;
		var signature__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(transaction_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.transactionId cannot be set twice."));
				++transaction_id__count;
				this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
				break;
			case 2:
				if(receipt_data__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.receiptData cannot be set twice."));
				++receipt_data__count;
				this.set_receiptData(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(signature__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Google_inapp_purchase_request.signature cannot be set twice."));
				++signature__count;
				this.set_signature(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Google_$inapp_$purchase_$request
	,__properties__: {set_signature:"set_signature",get_signature:"get_signature",set_receiptData:"set_receiptData",get_receiptData:"get_receiptData",set_transactionId:"set_transactionId",get_transactionId:"get_transactionId"}
});
var agario_proto_Inapp_$purchase_$response = function() {
	protohx_Message.call(this);
	this.set_result(0);
	this.set_transactionId(this.defaultUInt64());
	this.set_productUpdates([]);
};
$hxClasses["agario.proto.Inapp_purchase_response"] = agario_proto_Inapp_$purchase_$response;
agario_proto_Inapp_$purchase_$response.__name__ = ["agario","proto","Inapp_purchase_response"];
agario_proto_Inapp_$purchase_$response.__super__ = protohx_Message;
agario_proto_Inapp_$purchase_$response.prototype = $extend(protohx_Message.prototype,{
	result: null
	,setResult: function(value) {
		this.set_result(value);
		return this;
	}
	,set_result: function(value) {
		return this.result = value;
	}
	,get_result: function() {
		return this.result;
	}
	,transactionId: null
	,setTransactionId: function(value) {
		this.set_transactionId(value);
		return this;
	}
	,set_transactionId: function(value) {
		return this.transactionId = value;
	}
	,get_transactionId: function() {
		return this.transactionId;
	}
	,productUpdates: null
	,setProductUpdates: function(value) {
		this.set_productUpdates(value);
		return this;
	}
	,set_productUpdates: function(value) {
		return this.productUpdates = value;
	}
	,get_productUpdates: function() {
		return this.productUpdates;
	}
	,addProductUpdates: function(value) {
		if(this.get_productUpdates() == null) this.set_productUpdates([value]); else this.get_productUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_result());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT64(output,this.get_transactionId());
		if(this.get_productUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_productUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,3);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("result",this.get_result());
		fn("transactionId",this.get_transactionId());
		if(this.get_productUpdates() != null && this.get_productUpdates().length > 0) fn("productUpdates",this.get_productUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var result__count = 0;
		var transaction_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(result__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Inapp_purchase_response.result cannot be set twice."));
				++result__count;
				this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(transaction_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Inapp_purchase_response.transactionId cannot be set twice."));
				++transaction_id__count;
				this.set_transactionId(protohx_ReadUtils.read__TYPE_UINT64(input));
				break;
			case 3:
				if(this.get_productUpdates() == null) this.set_productUpdates([]);
				this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Inapp_$purchase_$response
	,__properties__: {set_productUpdates:"set_productUpdates",get_productUpdates:"get_productUpdates",set_transactionId:"set_transactionId",get_transactionId:"get_transactionId",set_result:"set_result",get_result:"get_result"}
});
var agario_proto_Leaderboard = function() {
	protohx_Message.call(this);
	this.set_names([]);
	this.set_playerPosition(0);
};
$hxClasses["agario.proto.Leaderboard"] = agario_proto_Leaderboard;
agario_proto_Leaderboard.__name__ = ["agario","proto","Leaderboard"];
agario_proto_Leaderboard.__super__ = protohx_Message;
agario_proto_Leaderboard.prototype = $extend(protohx_Message.prototype,{
	names: null
	,setNames: function(value) {
		this.set_names(value);
		return this;
	}
	,set_names: function(value) {
		return this.names = value;
	}
	,get_names: function() {
		return this.names;
	}
	,addNames: function(value) {
		if(this.get_names() == null) this.set_names([value]); else this.get_names().push(value);
	}
	,playerPosition: null
	,setPlayerPosition: function(value) {
		this.set_playerPosition(value);
		return this;
	}
	,set_playerPosition: function(value) {
		return this.playerPosition = value;
	}
	,get_playerPosition: function() {
		return this.playerPosition;
	}
	,writeToBuffer: function(output) {
		if(this.get_names() != null) {
			var _g = 0;
			var _g1 = this.get_names();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_STRING(output,value);
			}
		}
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_playerPosition());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_names() != null && this.get_names().length > 0) fn("names",this.get_names());
		fn("playerPosition",this.get_playerPosition());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var player_position__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_names() == null) this.set_names([]);
				this.get_names().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(player_position__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Leaderboard.playerPosition cannot be set twice."));
				++player_position__count;
				this.set_playerPosition(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Leaderboard
	,__properties__: {set_playerPosition:"set_playerPosition",get_playerPosition:"get_playerPosition",set_names:"set_names",get_names:"get_names"}
});
var agario_proto_Login_$request = function() {
	protohx_Message.call(this);
	this.set_device(new agario_proto_Device());
	this.set_realm(0);
};
$hxClasses["agario.proto.Login_request"] = agario_proto_Login_$request;
agario_proto_Login_$request.__name__ = ["agario","proto","Login_request"];
agario_proto_Login_$request.__super__ = protohx_Message;
agario_proto_Login_$request.prototype = $extend(protohx_Message.prototype,{
	device: null
	,setDevice: function(value) {
		this.set_device(value);
		return this;
	}
	,set_device: function(value) {
		return this.device = value;
	}
	,get_device: function() {
		return this.device;
	}
	,realm: null
	,setRealm: function(value) {
		this.set_realm(value);
		return this;
	}
	,set_realm: function(value) {
		return this.realm = value;
	}
	,get_realm: function() {
		return this.realm;
	}
	,authToken: null
	,setAuthToken: function(value) {
		this.set_authToken(value);
		return this;
	}
	,clearAuthToken: function() {
		this.set_authToken(null);
	}
	,hasAuthToken: function() {
		return this.get_authToken() != null;
	}
	,set_authToken: function(value) {
		return this.authToken = value;
	}
	,get_authToken: function() {
		return this.authToken;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_device());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_realm());
		if(this.get_authToken() != null) {
			protohx_WriteUtils.writeTag(output,2,3);
			protohx_WriteUtils.write__TYPE_STRING(output,this.get_authToken());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("device",this.get_device());
		fn("realm",this.get_realm());
		if(this.get_authToken() != null) fn("authToken",this.get_authToken());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var device__count = 0;
		var realm__count = 0;
		var auth_token__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(device__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.device cannot be set twice."));
				++device__count;
				this.set_device(new agario_proto_Device());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_device());
				break;
			case 2:
				if(realm__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.realm cannot be set twice."));
				++realm__count;
				this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 3:
				if(auth_token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_request.authToken cannot be set twice."));
				++auth_token__count;
				this.set_authToken(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Login_$request
	,__properties__: {set_authToken:"set_authToken",get_authToken:"get_authToken",set_realm:"set_realm",get_realm:"get_realm",set_device:"set_device",get_device:"get_device"}
});
var agario_proto_Login_$response = function() {
	protohx_Message.call(this);
	this.set_realm(0);
	this.set_currentGameState(0);
	this.set_latestConfiguration(0);
	this.set_serverInfo(new agario_proto_Server_$info());
	this.set_userInfo(new agario_proto_User_$info());
	this.set_userStats(new agario_proto_User_$stats());
	this.set_userWallet([]);
	this.set_userSettings([]);
	this.set_userBoosts([]);
	this.set_userTimedEvents([]);
	this.set_userGifts(new agario_proto_User_$gifts());
	this.set_sessionToken("");
	this.set_softUpgrade(new agario_proto_Soft_$upgrade());
};
$hxClasses["agario.proto.Login_response"] = agario_proto_Login_$response;
agario_proto_Login_$response.__name__ = ["agario","proto","Login_response"];
agario_proto_Login_$response.__super__ = protohx_Message;
agario_proto_Login_$response.prototype = $extend(protohx_Message.prototype,{
	realm: null
	,setRealm: function(value) {
		this.set_realm(value);
		return this;
	}
	,set_realm: function(value) {
		return this.realm = value;
	}
	,get_realm: function() {
		return this.realm;
	}
	,guestAuthToken: null
	,setGuestAuthToken: function(value) {
		this.set_guestAuthToken(value);
		return this;
	}
	,clearGuestAuthToken: function() {
		this.set_guestAuthToken(null);
	}
	,hasGuestAuthToken: function() {
		return this.get_guestAuthToken() != null;
	}
	,set_guestAuthToken: function(value) {
		return this.guestAuthToken = value;
	}
	,get_guestAuthToken: function() {
		return this.guestAuthToken;
	}
	,currentGameState: null
	,setCurrentGameState: function(value) {
		this.set_currentGameState(value);
		return this;
	}
	,set_currentGameState: function(value) {
		return this.currentGameState = value;
	}
	,get_currentGameState: function() {
		return this.currentGameState;
	}
	,latestConfiguration: null
	,setLatestConfiguration: function(value) {
		this.set_latestConfiguration(value);
		return this;
	}
	,set_latestConfiguration: function(value) {
		return this.latestConfiguration = value;
	}
	,get_latestConfiguration: function() {
		return this.latestConfiguration;
	}
	,serverInfo: null
	,setServerInfo: function(value) {
		this.set_serverInfo(value);
		return this;
	}
	,set_serverInfo: function(value) {
		return this.serverInfo = value;
	}
	,get_serverInfo: function() {
		return this.serverInfo;
	}
	,userInfo: null
	,setUserInfo: function(value) {
		this.set_userInfo(value);
		return this;
	}
	,set_userInfo: function(value) {
		return this.userInfo = value;
	}
	,get_userInfo: function() {
		return this.userInfo;
	}
	,userStats: null
	,setUserStats: function(value) {
		this.set_userStats(value);
		return this;
	}
	,set_userStats: function(value) {
		return this.userStats = value;
	}
	,get_userStats: function() {
		return this.userStats;
	}
	,userWallet: null
	,setUserWallet: function(value) {
		this.set_userWallet(value);
		return this;
	}
	,set_userWallet: function(value) {
		return this.userWallet = value;
	}
	,get_userWallet: function() {
		return this.userWallet;
	}
	,addUserWallet: function(value) {
		if(this.get_userWallet() == null) this.set_userWallet([value]); else this.get_userWallet().push(value);
	}
	,userSettings: null
	,setUserSettings: function(value) {
		this.set_userSettings(value);
		return this;
	}
	,set_userSettings: function(value) {
		return this.userSettings = value;
	}
	,get_userSettings: function() {
		return this.userSettings;
	}
	,addUserSettings: function(value) {
		if(this.get_userSettings() == null) this.set_userSettings([value]); else this.get_userSettings().push(value);
	}
	,userBoosts: null
	,setUserBoosts: function(value) {
		this.set_userBoosts(value);
		return this;
	}
	,set_userBoosts: function(value) {
		return this.userBoosts = value;
	}
	,get_userBoosts: function() {
		return this.userBoosts;
	}
	,addUserBoosts: function(value) {
		if(this.get_userBoosts() == null) this.set_userBoosts([value]); else this.get_userBoosts().push(value);
	}
	,userTimedEvents: null
	,setUserTimedEvents: function(value) {
		this.set_userTimedEvents(value);
		return this;
	}
	,set_userTimedEvents: function(value) {
		return this.userTimedEvents = value;
	}
	,get_userTimedEvents: function() {
		return this.userTimedEvents;
	}
	,addUserTimedEvents: function(value) {
		if(this.get_userTimedEvents() == null) this.set_userTimedEvents([value]); else this.get_userTimedEvents().push(value);
	}
	,userGifts: null
	,setUserGifts: function(value) {
		this.set_userGifts(value);
		return this;
	}
	,set_userGifts: function(value) {
		return this.userGifts = value;
	}
	,get_userGifts: function() {
		return this.userGifts;
	}
	,sessionToken: null
	,setSessionToken: function(value) {
		this.set_sessionToken(value);
		return this;
	}
	,set_sessionToken: function(value) {
		return this.sessionToken = value;
	}
	,get_sessionToken: function() {
		return this.sessionToken;
	}
	,softUpgrade: null
	,setSoftUpgrade: function(value) {
		this.set_softUpgrade(value);
		return this;
	}
	,set_softUpgrade: function(value) {
		return this.softUpgrade = value;
	}
	,get_softUpgrade: function() {
		return this.softUpgrade;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_realm());
		if(this.get_guestAuthToken() != null) {
			protohx_WriteUtils.writeTag(output,2,2);
			protohx_WriteUtils.write__TYPE_STRING(output,this.get_guestAuthToken());
		}
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_currentGameState());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_latestConfiguration());
		protohx_WriteUtils.writeTag(output,2,5);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_serverInfo());
		protohx_WriteUtils.writeTag(output,2,6);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userInfo());
		protohx_WriteUtils.writeTag(output,2,7);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userStats());
		if(this.get_userWallet() != null) {
			var _g = 0;
			var _g1 = this.get_userWallet();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,8);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		if(this.get_userSettings() != null) {
			var _g2 = 0;
			var _g11 = this.get_userSettings();
			while(_g2 < _g11.length) {
				var value1 = _g11[_g2];
				++_g2;
				protohx_WriteUtils.writeTag(output,2,9);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value1);
			}
		}
		if(this.get_userBoosts() != null) {
			var _g3 = 0;
			var _g12 = this.get_userBoosts();
			while(_g3 < _g12.length) {
				var value2 = _g12[_g3];
				++_g3;
				protohx_WriteUtils.writeTag(output,2,10);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value2);
			}
		}
		if(this.get_userTimedEvents() != null) {
			var _g4 = 0;
			var _g13 = this.get_userTimedEvents();
			while(_g4 < _g13.length) {
				var value3 = _g13[_g4];
				++_g4;
				protohx_WriteUtils.writeTag(output,2,11);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value3);
			}
		}
		protohx_WriteUtils.writeTag(output,2,12);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_userGifts());
		protohx_WriteUtils.writeTag(output,2,13);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_sessionToken());
		protohx_WriteUtils.writeTag(output,2,14);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_softUpgrade());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("realm",this.get_realm());
		if(this.get_guestAuthToken() != null) fn("guestAuthToken",this.get_guestAuthToken());
		fn("currentGameState",this.get_currentGameState());
		fn("latestConfiguration",this.get_latestConfiguration());
		fn("serverInfo",this.get_serverInfo());
		fn("userInfo",this.get_userInfo());
		fn("userStats",this.get_userStats());
		if(this.get_userWallet() != null && this.get_userWallet().length > 0) fn("userWallet",this.get_userWallet());
		if(this.get_userSettings() != null && this.get_userSettings().length > 0) fn("userSettings",this.get_userSettings());
		if(this.get_userBoosts() != null && this.get_userBoosts().length > 0) fn("userBoosts",this.get_userBoosts());
		if(this.get_userTimedEvents() != null && this.get_userTimedEvents().length > 0) fn("userTimedEvents",this.get_userTimedEvents());
		fn("userGifts",this.get_userGifts());
		fn("sessionToken",this.get_sessionToken());
		fn("softUpgrade",this.get_softUpgrade());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var realm__count = 0;
		var guest_auth_token__count = 0;
		var current_game_state__count = 0;
		var latest_configuration__count = 0;
		var server_info__count = 0;
		var user_info__count = 0;
		var user_stats__count = 0;
		var user_gifts__count = 0;
		var session_token__count = 0;
		var soft_upgrade__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(realm__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.realm cannot be set twice."));
				++realm__count;
				this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(guest_auth_token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.guestAuthToken cannot be set twice."));
				++guest_auth_token__count;
				this.set_guestAuthToken(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(current_game_state__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.currentGameState cannot be set twice."));
				++current_game_state__count;
				this.set_currentGameState(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 4:
				if(latest_configuration__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.latestConfiguration cannot be set twice."));
				++latest_configuration__count;
				this.set_latestConfiguration(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 5:
				if(server_info__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.serverInfo cannot be set twice."));
				++server_info__count;
				this.set_serverInfo(new agario_proto_Server_$info());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_serverInfo());
				break;
			case 6:
				if(user_info__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userInfo cannot be set twice."));
				++user_info__count;
				this.set_userInfo(new agario_proto_User_$info());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userInfo());
				break;
			case 7:
				if(user_stats__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userStats cannot be set twice."));
				++user_stats__count;
				this.set_userStats(new agario_proto_User_$stats());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userStats());
				break;
			case 8:
				if(this.get_userWallet() == null) this.set_userWallet([]);
				this.get_userWallet().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$wallet_$item()));
				break;
			case 9:
				if(this.get_userSettings() == null) this.set_userSettings([]);
				this.get_userSettings().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$setting()));
				break;
			case 10:
				if(this.get_userBoosts() == null) this.set_userBoosts([]);
				this.get_userBoosts().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$boost_$item()));
				break;
			case 11:
				if(this.get_userTimedEvents() == null) this.set_userTimedEvents([]);
				this.get_userTimedEvents().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$timed_$event()));
				break;
			case 12:
				if(user_gifts__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.userGifts cannot be set twice."));
				++user_gifts__count;
				this.set_userGifts(new agario_proto_User_$gifts());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_userGifts());
				break;
			case 13:
				if(session_token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.sessionToken cannot be set twice."));
				++session_token__count;
				this.set_sessionToken(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 14:
				if(soft_upgrade__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Login_response.softUpgrade cannot be set twice."));
				++soft_upgrade__count;
				this.set_softUpgrade(new agario_proto_Soft_$upgrade());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_softUpgrade());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Login_$response
	,__properties__: {set_softUpgrade:"set_softUpgrade",get_softUpgrade:"get_softUpgrade",set_sessionToken:"set_sessionToken",get_sessionToken:"get_sessionToken",set_userGifts:"set_userGifts",get_userGifts:"get_userGifts",set_userTimedEvents:"set_userTimedEvents",get_userTimedEvents:"get_userTimedEvents",set_userBoosts:"set_userBoosts",get_userBoosts:"get_userBoosts",set_userSettings:"set_userSettings",get_userSettings:"get_userSettings",set_userWallet:"set_userWallet",get_userWallet:"get_userWallet",set_userStats:"set_userStats",get_userStats:"get_userStats",set_userInfo:"set_userInfo",get_userInfo:"get_userInfo",set_serverInfo:"set_serverInfo",get_serverInfo:"get_serverInfo",set_latestConfiguration:"set_latestConfiguration",get_latestConfiguration:"get_latestConfiguration",set_currentGameState:"set_currentGameState",get_currentGameState:"get_currentGameState",set_guestAuthToken:"set_guestAuthToken",get_guestAuthToken:"get_guestAuthToken",set_realm:"set_realm",get_realm:"get_realm"}
});
var agario_proto_Ping = function() {
	this.hasField__0 = 0;
	protohx_Message.call(this);
	this.set_id(0);
};
$hxClasses["agario.proto.Ping"] = agario_proto_Ping;
agario_proto_Ping.__name__ = ["agario","proto","Ping"];
agario_proto_Ping.__super__ = protohx_Message;
agario_proto_Ping.prototype = $extend(protohx_Message.prototype,{
	id: null
	,setId: function(value) {
		this.set_id(value);
		return this;
	}
	,set_id: function(value) {
		return this.id = value;
	}
	,get_id: function() {
		return this.id;
	}
	,previousRoundtrip: null
	,setPreviousRoundtrip: function(value) {
		this.set_previousRoundtrip(value);
		return this;
	}
	,hasField__0: null
	,clearPreviousRoundtrip: function() {
		this.hasField__0 = this.hasField__0 & -2;
		this.set_previousRoundtrip(0);
	}
	,hasPreviousRoundtrip: function() {
		return (this.hasField__0 & 1) != 0;
	}
	,set_previousRoundtrip: function(value) {
		this.hasField__0 = this.hasField__0 | 1;
		return this.previousRoundtrip = value;
	}
	,get_previousRoundtrip: function() {
		return this.previousRoundtrip;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_id());
		if((this.hasField__0 & 1) != 0) {
			protohx_WriteUtils.writeTag(output,0,2);
			protohx_WriteUtils.write__TYPE_UINT32(output,this.get_previousRoundtrip());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("id",this.get_id());
		if((this.hasField__0 & 1) != 0) fn("previousRoundtrip",this.get_previousRoundtrip());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var id__count = 0;
		var previous_roundtrip__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Ping.id cannot be set twice."));
				++id__count;
				this.set_id(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 2:
				if(previous_roundtrip__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Ping.previousRoundtrip cannot be set twice."));
				++previous_roundtrip__count;
				this.set_previousRoundtrip(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Ping
	,__properties__: {set_previousRoundtrip:"set_previousRoundtrip",get_previousRoundtrip:"get_previousRoundtrip",set_id:"set_id",get_id:"get_id"}
});
var agario_proto_Pong = function() {
	protohx_Message.call(this);
	this.set_pingId(0);
};
$hxClasses["agario.proto.Pong"] = agario_proto_Pong;
agario_proto_Pong.__name__ = ["agario","proto","Pong"];
agario_proto_Pong.__super__ = protohx_Message;
agario_proto_Pong.prototype = $extend(protohx_Message.prototype,{
	pingId: null
	,setPingId: function(value) {
		this.set_pingId(value);
		return this;
	}
	,set_pingId: function(value) {
		return this.pingId = value;
	}
	,get_pingId: function() {
		return this.pingId;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_pingId());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("pingId",this.get_pingId());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var ping_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(ping_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Pong.pingId cannot be set twice."));
				++ping_id__count;
				this.set_pingId(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Pong
	,__properties__: {set_pingId:"set_pingId",get_pingId:"get_pingId"}
});
var agario_proto_Product_$update = function() {
	protohx_Message.call(this);
	this.set_origin(0);
	this.set_productId("");
	this.set_finalAmount(0);
	this.set_deltaAmount(0);
	this.set_type(0);
};
$hxClasses["agario.proto.Product_update"] = agario_proto_Product_$update;
agario_proto_Product_$update.__name__ = ["agario","proto","Product_update"];
agario_proto_Product_$update.__super__ = protohx_Message;
agario_proto_Product_$update.prototype = $extend(protohx_Message.prototype,{
	origin: null
	,setOrigin: function(value) {
		this.set_origin(value);
		return this;
	}
	,set_origin: function(value) {
		return this.origin = value;
	}
	,get_origin: function() {
		return this.origin;
	}
	,productId: null
	,setProductId: function(value) {
		this.set_productId(value);
		return this;
	}
	,set_productId: function(value) {
		return this.productId = value;
	}
	,get_productId: function() {
		return this.productId;
	}
	,finalAmount: null
	,setFinalAmount: function(value) {
		this.set_finalAmount(value);
		return this;
	}
	,set_finalAmount: function(value) {
		return this.finalAmount = value;
	}
	,get_finalAmount: function() {
		return this.finalAmount;
	}
	,deltaAmount: null
	,setDeltaAmount: function(value) {
		this.set_deltaAmount(value);
		return this;
	}
	,set_deltaAmount: function(value) {
		return this.deltaAmount = value;
	}
	,get_deltaAmount: function() {
		return this.deltaAmount;
	}
	,type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_origin());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_productId());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_finalAmount());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_INT32(output,this.get_deltaAmount());
		protohx_WriteUtils.writeTag(output,0,5);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("origin",this.get_origin());
		fn("productId",this.get_productId());
		fn("finalAmount",this.get_finalAmount());
		fn("deltaAmount",this.get_deltaAmount());
		fn("type",this.get_type());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var origin__count = 0;
		var product_id__count = 0;
		var final_amount__count = 0;
		var delta_amount__count = 0;
		var type__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(origin__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.origin cannot be set twice."));
				++origin__count;
				this.set_origin(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(product_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.productId cannot be set twice."));
				++product_id__count;
				this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(final_amount__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.finalAmount cannot be set twice."));
				++final_amount__count;
				this.set_finalAmount(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 4:
				if(delta_amount__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.deltaAmount cannot be set twice."));
				++delta_amount__count;
				this.set_deltaAmount(protohx_ReadUtils.read__TYPE_INT32(input));
				break;
			case 5:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Product_update.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Product_$update
	,__properties__: {set_type:"set_type",get_type:"get_type",set_deltaAmount:"set_deltaAmount",get_deltaAmount:"get_deltaAmount",set_finalAmount:"set_finalAmount",get_finalAmount:"get_finalAmount",set_productId:"set_productId",get_productId:"get_productId",set_origin:"set_origin",get_origin:"get_origin"}
});
var agario_proto_Purchase_$wallet_$updates = function() {
	protohx_Message.call(this);
	this.set_purchaseId("");
	this.set_walletUpdates(new agario_proto_Wallet_$updates());
};
$hxClasses["agario.proto.Purchase_wallet_updates"] = agario_proto_Purchase_$wallet_$updates;
agario_proto_Purchase_$wallet_$updates.__name__ = ["agario","proto","Purchase_wallet_updates"];
agario_proto_Purchase_$wallet_$updates.__super__ = protohx_Message;
agario_proto_Purchase_$wallet_$updates.prototype = $extend(protohx_Message.prototype,{
	purchaseId: null
	,setPurchaseId: function(value) {
		this.set_purchaseId(value);
		return this;
	}
	,set_purchaseId: function(value) {
		return this.purchaseId = value;
	}
	,get_purchaseId: function() {
		return this.purchaseId;
	}
	,walletUpdates: null
	,setWalletUpdates: function(value) {
		this.set_walletUpdates(value);
		return this;
	}
	,set_walletUpdates: function(value) {
		return this.walletUpdates = value;
	}
	,get_walletUpdates: function() {
		return this.walletUpdates;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_purchaseId());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_walletUpdates());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("purchaseId",this.get_purchaseId());
		fn("walletUpdates",this.get_walletUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var purchase_id__count = 0;
		var wallet_updates__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(purchase_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Purchase_wallet_updates.purchaseId cannot be set twice."));
				++purchase_id__count;
				this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(wallet_updates__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Purchase_wallet_updates.walletUpdates cannot be set twice."));
				++wallet_updates__count;
				this.set_walletUpdates(new agario_proto_Wallet_$updates());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_walletUpdates());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Purchase_$wallet_$updates
	,__properties__: {set_walletUpdates:"set_walletUpdates",get_walletUpdates:"get_walletUpdates",set_purchaseId:"set_purchaseId",get_purchaseId:"get_purchaseId"}
});
var agario_proto_Realm_$upgrade_$request = function() {
	protohx_Message.call(this);
	this.set_realm(0);
	this.set_authToken("");
};
$hxClasses["agario.proto.Realm_upgrade_request"] = agario_proto_Realm_$upgrade_$request;
agario_proto_Realm_$upgrade_$request.__name__ = ["agario","proto","Realm_upgrade_request"];
agario_proto_Realm_$upgrade_$request.__super__ = protohx_Message;
agario_proto_Realm_$upgrade_$request.prototype = $extend(protohx_Message.prototype,{
	realm: null
	,setRealm: function(value) {
		this.set_realm(value);
		return this;
	}
	,set_realm: function(value) {
		return this.realm = value;
	}
	,get_realm: function() {
		return this.realm;
	}
	,authToken: null
	,setAuthToken: function(value) {
		this.set_authToken(value);
		return this;
	}
	,set_authToken: function(value) {
		return this.authToken = value;
	}
	,get_authToken: function() {
		return this.authToken;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_realm());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_authToken());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("realm",this.get_realm());
		fn("authToken",this.get_authToken());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var realm__count = 0;
		var auth_token__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(realm__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_request.realm cannot be set twice."));
				++realm__count;
				this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(auth_token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_request.authToken cannot be set twice."));
				++auth_token__count;
				this.set_authToken(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Realm_$upgrade_$request
	,__properties__: {set_authToken:"set_authToken",get_authToken:"get_authToken",set_realm:"set_realm",get_realm:"get_realm"}
});
var agario_proto_Realm_$upgrade_$response = function() {
	protohx_Message.call(this);
	this.set_realm(0);
	this.set_displayName("");
};
$hxClasses["agario.proto.Realm_upgrade_response"] = agario_proto_Realm_$upgrade_$response;
agario_proto_Realm_$upgrade_$response.__name__ = ["agario","proto","Realm_upgrade_response"];
agario_proto_Realm_$upgrade_$response.__super__ = protohx_Message;
agario_proto_Realm_$upgrade_$response.prototype = $extend(protohx_Message.prototype,{
	realm: null
	,setRealm: function(value) {
		this.set_realm(value);
		return this;
	}
	,set_realm: function(value) {
		return this.realm = value;
	}
	,get_realm: function() {
		return this.realm;
	}
	,displayName: null
	,setDisplayName: function(value) {
		this.set_displayName(value);
		return this;
	}
	,set_displayName: function(value) {
		return this.displayName = value;
	}
	,get_displayName: function() {
		return this.displayName;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_realm());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_displayName());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("realm",this.get_realm());
		fn("displayName",this.get_displayName());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var realm__count = 0;
		var display_name__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(realm__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_response.realm cannot be set twice."));
				++realm__count;
				this.set_realm(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(display_name__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Realm_upgrade_response.displayName cannot be set twice."));
				++display_name__count;
				this.set_displayName(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Realm_$upgrade_$response
	,__properties__: {set_displayName:"set_displayName",get_displayName:"get_displayName",set_realm:"set_realm",get_realm:"get_realm"}
});
var agario_proto_Req = function() {
	protohx_Message.call(this);
	this.set_type(0);
};
$hxClasses["agario.proto.Req"] = agario_proto_Req;
agario_proto_Req.__name__ = ["agario","proto","Req"];
agario_proto_Req.__super__ = protohx_Message;
agario_proto_Req.prototype = $extend(protohx_Message.prototype,{
	type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,loginRequestField: null
	,setLoginRequestField: function(value) {
		this.set_loginRequestField(value);
		return this;
	}
	,clearLoginRequestField: function() {
		this.set_loginRequestField(null);
	}
	,hasLoginRequestField: function() {
		return this.get_loginRequestField() != null;
	}
	,set_loginRequestField: function(value) {
		return this.loginRequestField = value;
	}
	,get_loginRequestField: function() {
		return this.loginRequestField;
	}
	,loginResponseField: null
	,setLoginResponseField: function(value) {
		this.set_loginResponseField(value);
		return this;
	}
	,clearLoginResponseField: function() {
		this.set_loginResponseField(null);
	}
	,hasLoginResponseField: function() {
		return this.get_loginResponseField() != null;
	}
	,set_loginResponseField: function(value) {
		return this.loginResponseField = value;
	}
	,get_loginResponseField: function() {
		return this.loginResponseField;
	}
	,realmUpgradeRequestField: null
	,setRealmUpgradeRequestField: function(value) {
		this.set_realmUpgradeRequestField(value);
		return this;
	}
	,clearRealmUpgradeRequestField: function() {
		this.set_realmUpgradeRequestField(null);
	}
	,hasRealmUpgradeRequestField: function() {
		return this.get_realmUpgradeRequestField() != null;
	}
	,set_realmUpgradeRequestField: function(value) {
		return this.realmUpgradeRequestField = value;
	}
	,get_realmUpgradeRequestField: function() {
		return this.realmUpgradeRequestField;
	}
	,realmUpgradeResponseField: null
	,setRealmUpgradeResponseField: function(value) {
		this.set_realmUpgradeResponseField(value);
		return this;
	}
	,clearRealmUpgradeResponseField: function() {
		this.set_realmUpgradeResponseField(null);
	}
	,hasRealmUpgradeResponseField: function() {
		return this.get_realmUpgradeResponseField() != null;
	}
	,set_realmUpgradeResponseField: function(value) {
		return this.realmUpgradeResponseField = value;
	}
	,get_realmUpgradeResponseField: function() {
		return this.realmUpgradeResponseField;
	}
	,disconnectField: null
	,setDisconnectField: function(value) {
		this.set_disconnectField(value);
		return this;
	}
	,clearDisconnectField: function() {
		this.set_disconnectField(null);
	}
	,hasDisconnectField: function() {
		return this.get_disconnectField() != null;
	}
	,set_disconnectField: function(value) {
		return this.disconnectField = value;
	}
	,get_disconnectField: function() {
		return this.disconnectField;
	}
	,pingField: null
	,setPingField: function(value) {
		this.set_pingField(value);
		return this;
	}
	,clearPingField: function() {
		this.set_pingField(null);
	}
	,hasPingField: function() {
		return this.get_pingField() != null;
	}
	,set_pingField: function(value) {
		return this.pingField = value;
	}
	,get_pingField: function() {
		return this.pingField;
	}
	,pongField: null
	,setPongField: function(value) {
		this.set_pongField(value);
		return this;
	}
	,clearPongField: function() {
		this.set_pongField(null);
	}
	,hasPongField: function() {
		return this.get_pongField() != null;
	}
	,set_pongField: function(value) {
		return this.pongField = value;
	}
	,get_pongField: function() {
		return this.pongField;
	}
	,udpHandshakeField: null
	,setUdpHandshakeField: function(value) {
		this.set_udpHandshakeField(value);
		return this;
	}
	,clearUdpHandshakeField: function() {
		this.set_udpHandshakeField(null);
	}
	,hasUdpHandshakeField: function() {
		return this.get_udpHandshakeField() != null;
	}
	,set_udpHandshakeField: function(value) {
		return this.udpHandshakeField = value;
	}
	,get_udpHandshakeField: function() {
		return this.udpHandshakeField;
	}
	,enterGameRequestField: null
	,setEnterGameRequestField: function(value) {
		this.set_enterGameRequestField(value);
		return this;
	}
	,clearEnterGameRequestField: function() {
		this.set_enterGameRequestField(null);
	}
	,hasEnterGameRequestField: function() {
		return this.get_enterGameRequestField() != null;
	}
	,set_enterGameRequestField: function(value) {
		return this.enterGameRequestField = value;
	}
	,get_enterGameRequestField: function() {
		return this.enterGameRequestField;
	}
	,activateBoostRequestField: null
	,setActivateBoostRequestField: function(value) {
		this.set_activateBoostRequestField(value);
		return this;
	}
	,clearActivateBoostRequestField: function() {
		this.set_activateBoostRequestField(null);
	}
	,hasActivateBoostRequestField: function() {
		return this.get_activateBoostRequestField() != null;
	}
	,set_activateBoostRequestField: function(value) {
		return this.activateBoostRequestField = value;
	}
	,get_activateBoostRequestField: function() {
		return this.activateBoostRequestField;
	}
	,activateBoostResponseField: null
	,setActivateBoostResponseField: function(value) {
		this.set_activateBoostResponseField(value);
		return this;
	}
	,clearActivateBoostResponseField: function() {
		this.set_activateBoostResponseField(null);
	}
	,hasActivateBoostResponseField: function() {
		return this.get_activateBoostResponseField() != null;
	}
	,set_activateBoostResponseField: function(value) {
		return this.activateBoostResponseField = value;
	}
	,get_activateBoostResponseField: function() {
		return this.activateBoostResponseField;
	}
	,directionVectorField: null
	,setDirectionVectorField: function(value) {
		this.set_directionVectorField(value);
		return this;
	}
	,clearDirectionVectorField: function() {
		this.set_directionVectorField(null);
	}
	,hasDirectionVectorField: function() {
		return this.get_directionVectorField() != null;
	}
	,set_directionVectorField: function(value) {
		return this.directionVectorField = value;
	}
	,get_directionVectorField: function() {
		return this.directionVectorField;
	}
	,leaderboardField: null
	,setLeaderboardField: function(value) {
		this.set_leaderboardField(value);
		return this;
	}
	,clearLeaderboardField: function() {
		this.set_leaderboardField(null);
	}
	,hasLeaderboardField: function() {
		return this.get_leaderboardField() != null;
	}
	,set_leaderboardField: function(value) {
		return this.leaderboardField = value;
	}
	,get_leaderboardField: function() {
		return this.leaderboardField;
	}
	,arenaStateField: null
	,setArenaStateField: function(value) {
		this.set_arenaStateField(value);
		return this;
	}
	,clearArenaStateField: function() {
		this.set_arenaStateField(null);
	}
	,hasArenaStateField: function() {
		return this.get_arenaStateField() != null;
	}
	,set_arenaStateField: function(value) {
		return this.arenaStateField = value;
	}
	,get_arenaStateField: function() {
		return this.arenaStateField;
	}
	,gameOverField: null
	,setGameOverField: function(value) {
		this.set_gameOverField(value);
		return this;
	}
	,clearGameOverField: function() {
		this.set_gameOverField(null);
	}
	,hasGameOverField: function() {
		return this.get_gameOverField() != null;
	}
	,set_gameOverField: function(value) {
		return this.gameOverField = value;
	}
	,get_gameOverField: function() {
		return this.gameOverField;
	}
	,softPurchaseRequestField: null
	,setSoftPurchaseRequestField: function(value) {
		this.set_softPurchaseRequestField(value);
		return this;
	}
	,clearSoftPurchaseRequestField: function() {
		this.set_softPurchaseRequestField(null);
	}
	,hasSoftPurchaseRequestField: function() {
		return this.get_softPurchaseRequestField() != null;
	}
	,set_softPurchaseRequestField: function(value) {
		return this.softPurchaseRequestField = value;
	}
	,get_softPurchaseRequestField: function() {
		return this.softPurchaseRequestField;
	}
	,softPurchaseResponseField: null
	,setSoftPurchaseResponseField: function(value) {
		this.set_softPurchaseResponseField(value);
		return this;
	}
	,clearSoftPurchaseResponseField: function() {
		this.set_softPurchaseResponseField(null);
	}
	,hasSoftPurchaseResponseField: function() {
		return this.get_softPurchaseResponseField() != null;
	}
	,set_softPurchaseResponseField: function(value) {
		return this.softPurchaseResponseField = value;
	}
	,get_softPurchaseResponseField: function() {
		return this.softPurchaseResponseField;
	}
	,appleInappPurchaseRequestField: null
	,setAppleInappPurchaseRequestField: function(value) {
		this.set_appleInappPurchaseRequestField(value);
		return this;
	}
	,clearAppleInappPurchaseRequestField: function() {
		this.set_appleInappPurchaseRequestField(null);
	}
	,hasAppleInappPurchaseRequestField: function() {
		return this.get_appleInappPurchaseRequestField() != null;
	}
	,set_appleInappPurchaseRequestField: function(value) {
		return this.appleInappPurchaseRequestField = value;
	}
	,get_appleInappPurchaseRequestField: function() {
		return this.appleInappPurchaseRequestField;
	}
	,googleInappPurchaseRequestField: null
	,setGoogleInappPurchaseRequestField: function(value) {
		this.set_googleInappPurchaseRequestField(value);
		return this;
	}
	,clearGoogleInappPurchaseRequestField: function() {
		this.set_googleInappPurchaseRequestField(null);
	}
	,hasGoogleInappPurchaseRequestField: function() {
		return this.get_googleInappPurchaseRequestField() != null;
	}
	,set_googleInappPurchaseRequestField: function(value) {
		return this.googleInappPurchaseRequestField = value;
	}
	,get_googleInappPurchaseRequestField: function() {
		return this.googleInappPurchaseRequestField;
	}
	,inappPurchaseResponseField: null
	,setInappPurchaseResponseField: function(value) {
		this.set_inappPurchaseResponseField(value);
		return this;
	}
	,clearInappPurchaseResponseField: function() {
		this.set_inappPurchaseResponseField(null);
	}
	,hasInappPurchaseResponseField: function() {
		return this.get_inappPurchaseResponseField() != null;
	}
	,set_inappPurchaseResponseField: function(value) {
		return this.inappPurchaseResponseField = value;
	}
	,get_inappPurchaseResponseField: function() {
		return this.inappPurchaseResponseField;
	}
	,activateTimedEventRequestField: null
	,setActivateTimedEventRequestField: function(value) {
		this.set_activateTimedEventRequestField(value);
		return this;
	}
	,clearActivateTimedEventRequestField: function() {
		this.set_activateTimedEventRequestField(null);
	}
	,hasActivateTimedEventRequestField: function() {
		return this.get_activateTimedEventRequestField() != null;
	}
	,set_activateTimedEventRequestField: function(value) {
		return this.activateTimedEventRequestField = value;
	}
	,get_activateTimedEventRequestField: function() {
		return this.activateTimedEventRequestField;
	}
	,activateTimedEventResponseField: null
	,setActivateTimedEventResponseField: function(value) {
		this.set_activateTimedEventResponseField(value);
		return this;
	}
	,clearActivateTimedEventResponseField: function() {
		this.set_activateTimedEventResponseField(null);
	}
	,hasActivateTimedEventResponseField: function() {
		return this.get_activateTimedEventResponseField() != null;
	}
	,set_activateTimedEventResponseField: function(value) {
		return this.activateTimedEventResponseField = value;
	}
	,get_activateTimedEventResponseField: function() {
		return this.activateTimedEventResponseField;
	}
	,walletUpdatesField: null
	,setWalletUpdatesField: function(value) {
		this.set_walletUpdatesField(value);
		return this;
	}
	,clearWalletUpdatesField: function() {
		this.set_walletUpdatesField(null);
	}
	,hasWalletUpdatesField: function() {
		return this.get_walletUpdatesField() != null;
	}
	,set_walletUpdatesField: function(value) {
		return this.walletUpdatesField = value;
	}
	,get_walletUpdatesField: function() {
		return this.walletUpdatesField;
	}
	,purchaseWalletUpdatesField: null
	,setPurchaseWalletUpdatesField: function(value) {
		this.set_purchaseWalletUpdatesField(value);
		return this;
	}
	,clearPurchaseWalletUpdatesField: function() {
		this.set_purchaseWalletUpdatesField(null);
	}
	,hasPurchaseWalletUpdatesField: function() {
		return this.get_purchaseWalletUpdatesField() != null;
	}
	,set_purchaseWalletUpdatesField: function(value) {
		return this.purchaseWalletUpdatesField = value;
	}
	,get_purchaseWalletUpdatesField: function() {
		return this.purchaseWalletUpdatesField;
	}
	,updateUserSettingsRequestField: null
	,setUpdateUserSettingsRequestField: function(value) {
		this.set_updateUserSettingsRequestField(value);
		return this;
	}
	,clearUpdateUserSettingsRequestField: function() {
		this.set_updateUserSettingsRequestField(null);
	}
	,hasUpdateUserSettingsRequestField: function() {
		return this.get_updateUserSettingsRequestField() != null;
	}
	,set_updateUserSettingsRequestField: function(value) {
		return this.updateUserSettingsRequestField = value;
	}
	,get_updateUserSettingsRequestField: function() {
		return this.updateUserSettingsRequestField;
	}
	,updateUserSettingsResponseField: null
	,setUpdateUserSettingsResponseField: function(value) {
		this.set_updateUserSettingsResponseField(value);
		return this;
	}
	,clearUpdateUserSettingsResponseField: function() {
		this.set_updateUserSettingsResponseField(null);
	}
	,hasUpdateUserSettingsResponseField: function() {
		return this.get_updateUserSettingsResponseField() != null;
	}
	,set_updateUserSettingsResponseField: function(value) {
		return this.updateUserSettingsResponseField = value;
	}
	,get_updateUserSettingsResponseField: function() {
		return this.updateUserSettingsResponseField;
	}
	,serverToServerGameOverWrapperField: null
	,setServerToServerGameOverWrapperField: function(value) {
		this.set_serverToServerGameOverWrapperField(value);
		return this;
	}
	,clearServerToServerGameOverWrapperField: function() {
		this.set_serverToServerGameOverWrapperField(null);
	}
	,hasServerToServerGameOverWrapperField: function() {
		return this.get_serverToServerGameOverWrapperField() != null;
	}
	,set_serverToServerGameOverWrapperField: function(value) {
		return this.serverToServerGameOverWrapperField = value;
	}
	,get_serverToServerGameOverWrapperField: function() {
		return this.serverToServerGameOverWrapperField;
	}
	,claimGiftsRequestField: null
	,setClaimGiftsRequestField: function(value) {
		this.set_claimGiftsRequestField(value);
		return this;
	}
	,clearClaimGiftsRequestField: function() {
		this.set_claimGiftsRequestField(null);
	}
	,hasClaimGiftsRequestField: function() {
		return this.get_claimGiftsRequestField() != null;
	}
	,set_claimGiftsRequestField: function(value) {
		return this.claimGiftsRequestField = value;
	}
	,get_claimGiftsRequestField: function() {
		return this.claimGiftsRequestField;
	}
	,claimGiftsResponseField: null
	,setClaimGiftsResponseField: function(value) {
		this.set_claimGiftsResponseField(value);
		return this;
	}
	,clearClaimGiftsResponseField: function() {
		this.set_claimGiftsResponseField(null);
	}
	,hasClaimGiftsResponseField: function() {
		return this.get_claimGiftsResponseField() != null;
	}
	,set_claimGiftsResponseField: function(value) {
		return this.claimGiftsResponseField = value;
	}
	,get_claimGiftsResponseField: function() {
		return this.claimGiftsResponseField;
	}
	,sendGiftsField: null
	,setSendGiftsField: function(value) {
		this.set_sendGiftsField(value);
		return this;
	}
	,clearSendGiftsField: function() {
		this.set_sendGiftsField(null);
	}
	,hasSendGiftsField: function() {
		return this.get_sendGiftsField() != null;
	}
	,set_sendGiftsField: function(value) {
		return this.sendGiftsField = value;
	}
	,get_sendGiftsField: function() {
		return this.sendGiftsField;
	}
	,consumeRequestsField: null
	,setConsumeRequestsField: function(value) {
		this.set_consumeRequestsField(value);
		return this;
	}
	,clearConsumeRequestsField: function() {
		this.set_consumeRequestsField(null);
	}
	,hasConsumeRequestsField: function() {
		return this.get_consumeRequestsField() != null;
	}
	,set_consumeRequestsField: function(value) {
		return this.consumeRequestsField = value;
	}
	,get_consumeRequestsField: function() {
		return this.consumeRequestsField;
	}
	,requestGiftsField: null
	,setRequestGiftsField: function(value) {
		this.set_requestGiftsField(value);
		return this;
	}
	,clearRequestGiftsField: function() {
		this.set_requestGiftsField(null);
	}
	,hasRequestGiftsField: function() {
		return this.get_requestGiftsField() != null;
	}
	,set_requestGiftsField: function(value) {
		return this.requestGiftsField = value;
	}
	,get_requestGiftsField: function() {
		return this.requestGiftsField;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		if(this.get_loginRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,10);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_loginRequestField());
		}
		if(this.get_loginResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,11);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_loginResponseField());
		}
		if(this.get_realmUpgradeRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,12);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_realmUpgradeRequestField());
		}
		if(this.get_realmUpgradeResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,13);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_realmUpgradeResponseField());
		}
		if(this.get_disconnectField() != null) {
			protohx_WriteUtils.writeTag(output,2,20);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_disconnectField());
		}
		if(this.get_pingField() != null) {
			protohx_WriteUtils.writeTag(output,2,30);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_pingField());
		}
		if(this.get_pongField() != null) {
			protohx_WriteUtils.writeTag(output,2,31);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_pongField());
		}
		if(this.get_udpHandshakeField() != null) {
			protohx_WriteUtils.writeTag(output,2,32);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_udpHandshakeField());
		}
		if(this.get_enterGameRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,40);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_enterGameRequestField());
		}
		if(this.get_activateBoostRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,42);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_activateBoostRequestField());
		}
		if(this.get_activateBoostResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,43);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_activateBoostResponseField());
		}
		if(this.get_directionVectorField() != null) {
			protohx_WriteUtils.writeTag(output,2,50);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_directionVectorField());
		}
		if(this.get_leaderboardField() != null) {
			protohx_WriteUtils.writeTag(output,2,60);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_leaderboardField());
		}
		if(this.get_arenaStateField() != null) {
			protohx_WriteUtils.writeTag(output,2,61);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_arenaStateField());
		}
		if(this.get_gameOverField() != null) {
			protohx_WriteUtils.writeTag(output,2,62);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_gameOverField());
		}
		if(this.get_softPurchaseRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,70);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_softPurchaseRequestField());
		}
		if(this.get_softPurchaseResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,71);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_softPurchaseResponseField());
		}
		if(this.get_appleInappPurchaseRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,72);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_appleInappPurchaseRequestField());
		}
		if(this.get_googleInappPurchaseRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,73);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_googleInappPurchaseRequestField());
		}
		if(this.get_inappPurchaseResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,74);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_inappPurchaseResponseField());
		}
		if(this.get_activateTimedEventRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,75);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_activateTimedEventRequestField());
		}
		if(this.get_activateTimedEventResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,76);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_activateTimedEventResponseField());
		}
		if(this.get_walletUpdatesField() != null) {
			protohx_WriteUtils.writeTag(output,2,77);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_walletUpdatesField());
		}
		if(this.get_purchaseWalletUpdatesField() != null) {
			protohx_WriteUtils.writeTag(output,2,78);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_purchaseWalletUpdatesField());
		}
		if(this.get_updateUserSettingsRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,80);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_updateUserSettingsRequestField());
		}
		if(this.get_updateUserSettingsResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,81);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_updateUserSettingsResponseField());
		}
		if(this.get_serverToServerGameOverWrapperField() != null) {
			protohx_WriteUtils.writeTag(output,2,90);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_serverToServerGameOverWrapperField());
		}
		if(this.get_claimGiftsRequestField() != null) {
			protohx_WriteUtils.writeTag(output,2,100);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_claimGiftsRequestField());
		}
		if(this.get_claimGiftsResponseField() != null) {
			protohx_WriteUtils.writeTag(output,2,101);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_claimGiftsResponseField());
		}
		if(this.get_sendGiftsField() != null) {
			protohx_WriteUtils.writeTag(output,2,102);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_sendGiftsField());
		}
		if(this.get_consumeRequestsField() != null) {
			protohx_WriteUtils.writeTag(output,2,103);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_consumeRequestsField());
		}
		if(this.get_requestGiftsField() != null) {
			protohx_WriteUtils.writeTag(output,2,104);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_requestGiftsField());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("type",this.get_type());
		if(this.get_loginRequestField() != null) fn("loginRequestField",this.get_loginRequestField());
		if(this.get_loginResponseField() != null) fn("loginResponseField",this.get_loginResponseField());
		if(this.get_realmUpgradeRequestField() != null) fn("realmUpgradeRequestField",this.get_realmUpgradeRequestField());
		if(this.get_realmUpgradeResponseField() != null) fn("realmUpgradeResponseField",this.get_realmUpgradeResponseField());
		if(this.get_disconnectField() != null) fn("disconnectField",this.get_disconnectField());
		if(this.get_pingField() != null) fn("pingField",this.get_pingField());
		if(this.get_pongField() != null) fn("pongField",this.get_pongField());
		if(this.get_udpHandshakeField() != null) fn("udpHandshakeField",this.get_udpHandshakeField());
		if(this.get_enterGameRequestField() != null) fn("enterGameRequestField",this.get_enterGameRequestField());
		if(this.get_activateBoostRequestField() != null) fn("activateBoostRequestField",this.get_activateBoostRequestField());
		if(this.get_activateBoostResponseField() != null) fn("activateBoostResponseField",this.get_activateBoostResponseField());
		if(this.get_directionVectorField() != null) fn("directionVectorField",this.get_directionVectorField());
		if(this.get_leaderboardField() != null) fn("leaderboardField",this.get_leaderboardField());
		if(this.get_arenaStateField() != null) fn("arenaStateField",this.get_arenaStateField());
		if(this.get_gameOverField() != null) fn("gameOverField",this.get_gameOverField());
		if(this.get_softPurchaseRequestField() != null) fn("softPurchaseRequestField",this.get_softPurchaseRequestField());
		if(this.get_softPurchaseResponseField() != null) fn("softPurchaseResponseField",this.get_softPurchaseResponseField());
		if(this.get_appleInappPurchaseRequestField() != null) fn("appleInappPurchaseRequestField",this.get_appleInappPurchaseRequestField());
		if(this.get_googleInappPurchaseRequestField() != null) fn("googleInappPurchaseRequestField",this.get_googleInappPurchaseRequestField());
		if(this.get_inappPurchaseResponseField() != null) fn("inappPurchaseResponseField",this.get_inappPurchaseResponseField());
		if(this.get_activateTimedEventRequestField() != null) fn("activateTimedEventRequestField",this.get_activateTimedEventRequestField());
		if(this.get_activateTimedEventResponseField() != null) fn("activateTimedEventResponseField",this.get_activateTimedEventResponseField());
		if(this.get_walletUpdatesField() != null) fn("walletUpdatesField",this.get_walletUpdatesField());
		if(this.get_purchaseWalletUpdatesField() != null) fn("purchaseWalletUpdatesField",this.get_purchaseWalletUpdatesField());
		if(this.get_updateUserSettingsRequestField() != null) fn("updateUserSettingsRequestField",this.get_updateUserSettingsRequestField());
		if(this.get_updateUserSettingsResponseField() != null) fn("updateUserSettingsResponseField",this.get_updateUserSettingsResponseField());
		if(this.get_serverToServerGameOverWrapperField() != null) fn("serverToServerGameOverWrapperField",this.get_serverToServerGameOverWrapperField());
		if(this.get_claimGiftsRequestField() != null) fn("claimGiftsRequestField",this.get_claimGiftsRequestField());
		if(this.get_claimGiftsResponseField() != null) fn("claimGiftsResponseField",this.get_claimGiftsResponseField());
		if(this.get_sendGiftsField() != null) fn("sendGiftsField",this.get_sendGiftsField());
		if(this.get_consumeRequestsField() != null) fn("consumeRequestsField",this.get_consumeRequestsField());
		if(this.get_requestGiftsField() != null) fn("requestGiftsField",this.get_requestGiftsField());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var type__count = 0;
		var login_request_field__count = 0;
		var login_response_field__count = 0;
		var realm_upgrade_request_field__count = 0;
		var realm_upgrade_response_field__count = 0;
		var disconnect_field__count = 0;
		var ping_field__count = 0;
		var pong_field__count = 0;
		var udp_handshake_field__count = 0;
		var enter_game_request_field__count = 0;
		var activate_boost_request_field__count = 0;
		var activate_boost_response_field__count = 0;
		var direction_vector_field__count = 0;
		var leaderboard_field__count = 0;
		var arena_state_field__count = 0;
		var game_over_field__count = 0;
		var soft_purchase_request_field__count = 0;
		var soft_purchase_response_field__count = 0;
		var apple_inapp_purchase_request_field__count = 0;
		var google_inapp_purchase_request_field__count = 0;
		var inapp_purchase_response_field__count = 0;
		var activate_timed_event_request_field__count = 0;
		var activate_timed_event_response_field__count = 0;
		var wallet_updates_field__count = 0;
		var purchase_wallet_updates_field__count = 0;
		var update_user_settings_request_field__count = 0;
		var update_user_settings_response_field__count = 0;
		var server_to_server_game_over_wrapper_field__count = 0;
		var claim_gifts_request_field__count = 0;
		var claim_gifts_response_field__count = 0;
		var send_gifts_field__count = 0;
		var consume_requests_field__count = 0;
		var request_gifts_field__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 10:
				if(login_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.loginRequestField cannot be set twice."));
				++login_request_field__count;
				this.set_loginRequestField(new agario_proto_Login_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_loginRequestField());
				break;
			case 11:
				if(login_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.loginResponseField cannot be set twice."));
				++login_response_field__count;
				this.set_loginResponseField(new agario_proto_Login_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_loginResponseField());
				break;
			case 12:
				if(realm_upgrade_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.realmUpgradeRequestField cannot be set twice."));
				++realm_upgrade_request_field__count;
				this.set_realmUpgradeRequestField(new agario_proto_Realm_$upgrade_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_realmUpgradeRequestField());
				break;
			case 13:
				if(realm_upgrade_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.realmUpgradeResponseField cannot be set twice."));
				++realm_upgrade_response_field__count;
				this.set_realmUpgradeResponseField(new agario_proto_Realm_$upgrade_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_realmUpgradeResponseField());
				break;
			case 20:
				if(disconnect_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.disconnectField cannot be set twice."));
				++disconnect_field__count;
				this.set_disconnectField(new agario_proto_Disconnect());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_disconnectField());
				break;
			case 30:
				if(ping_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.pingField cannot be set twice."));
				++ping_field__count;
				this.set_pingField(new agario_proto_Ping());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_pingField());
				break;
			case 31:
				if(pong_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.pongField cannot be set twice."));
				++pong_field__count;
				this.set_pongField(new agario_proto_Pong());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_pongField());
				break;
			case 32:
				if(udp_handshake_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.udpHandshakeField cannot be set twice."));
				++udp_handshake_field__count;
				this.set_udpHandshakeField(new agario_proto_Udp_$handshake());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_udpHandshakeField());
				break;
			case 40:
				if(enter_game_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.enterGameRequestField cannot be set twice."));
				++enter_game_request_field__count;
				this.set_enterGameRequestField(new agario_proto_Enter_$game_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_enterGameRequestField());
				break;
			case 42:
				if(activate_boost_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateBoostRequestField cannot be set twice."));
				++activate_boost_request_field__count;
				this.set_activateBoostRequestField(new agario_proto_Activate_$boost_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_activateBoostRequestField());
				break;
			case 43:
				if(activate_boost_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateBoostResponseField cannot be set twice."));
				++activate_boost_response_field__count;
				this.set_activateBoostResponseField(new agario_proto_Activate_$boost_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_activateBoostResponseField());
				break;
			case 50:
				if(direction_vector_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.directionVectorField cannot be set twice."));
				++direction_vector_field__count;
				this.set_directionVectorField(new agario_proto_Direction_$vector());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_directionVectorField());
				break;
			case 60:
				if(leaderboard_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.leaderboardField cannot be set twice."));
				++leaderboard_field__count;
				this.set_leaderboardField(new agario_proto_Leaderboard());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_leaderboardField());
				break;
			case 61:
				if(arena_state_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.arenaStateField cannot be set twice."));
				++arena_state_field__count;
				this.set_arenaStateField(new agario_proto_Arena_$state());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_arenaStateField());
				break;
			case 62:
				if(game_over_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.gameOverField cannot be set twice."));
				++game_over_field__count;
				this.set_gameOverField(new agario_proto_Game_$over());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_gameOverField());
				break;
			case 70:
				if(soft_purchase_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.softPurchaseRequestField cannot be set twice."));
				++soft_purchase_request_field__count;
				this.set_softPurchaseRequestField(new agario_proto_Soft_$purchase_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_softPurchaseRequestField());
				break;
			case 71:
				if(soft_purchase_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.softPurchaseResponseField cannot be set twice."));
				++soft_purchase_response_field__count;
				this.set_softPurchaseResponseField(new agario_proto_Soft_$purchase_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_softPurchaseResponseField());
				break;
			case 72:
				if(apple_inapp_purchase_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.appleInappPurchaseRequestField cannot be set twice."));
				++apple_inapp_purchase_request_field__count;
				this.set_appleInappPurchaseRequestField(new agario_proto_Apple_$inapp_$purchase_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_appleInappPurchaseRequestField());
				break;
			case 73:
				if(google_inapp_purchase_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.googleInappPurchaseRequestField cannot be set twice."));
				++google_inapp_purchase_request_field__count;
				this.set_googleInappPurchaseRequestField(new agario_proto_Google_$inapp_$purchase_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_googleInappPurchaseRequestField());
				break;
			case 74:
				if(inapp_purchase_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.inappPurchaseResponseField cannot be set twice."));
				++inapp_purchase_response_field__count;
				this.set_inappPurchaseResponseField(new agario_proto_Inapp_$purchase_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_inappPurchaseResponseField());
				break;
			case 75:
				if(activate_timed_event_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateTimedEventRequestField cannot be set twice."));
				++activate_timed_event_request_field__count;
				this.set_activateTimedEventRequestField(new agario_proto_Activate_$timed_$event_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_activateTimedEventRequestField());
				break;
			case 76:
				if(activate_timed_event_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.activateTimedEventResponseField cannot be set twice."));
				++activate_timed_event_response_field__count;
				this.set_activateTimedEventResponseField(new agario_proto_Activate_$timed_$event_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_activateTimedEventResponseField());
				break;
			case 77:
				if(wallet_updates_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.walletUpdatesField cannot be set twice."));
				++wallet_updates_field__count;
				this.set_walletUpdatesField(new agario_proto_Wallet_$updates());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_walletUpdatesField());
				break;
			case 78:
				if(purchase_wallet_updates_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.purchaseWalletUpdatesField cannot be set twice."));
				++purchase_wallet_updates_field__count;
				this.set_purchaseWalletUpdatesField(new agario_proto_Purchase_$wallet_$updates());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_purchaseWalletUpdatesField());
				break;
			case 80:
				if(update_user_settings_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.updateUserSettingsRequestField cannot be set twice."));
				++update_user_settings_request_field__count;
				this.set_updateUserSettingsRequestField(new agario_proto_Update_$user_$settings_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_updateUserSettingsRequestField());
				break;
			case 81:
				if(update_user_settings_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.updateUserSettingsResponseField cannot be set twice."));
				++update_user_settings_response_field__count;
				this.set_updateUserSettingsResponseField(new agario_proto_Update_$user_$settings_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_updateUserSettingsResponseField());
				break;
			case 90:
				if(server_to_server_game_over_wrapper_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.serverToServerGameOverWrapperField cannot be set twice."));
				++server_to_server_game_over_wrapper_field__count;
				this.set_serverToServerGameOverWrapperField(new agario_proto_Server_$to_$server_$game_$over_$wrapper());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_serverToServerGameOverWrapperField());
				break;
			case 100:
				if(claim_gifts_request_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.claimGiftsRequestField cannot be set twice."));
				++claim_gifts_request_field__count;
				this.set_claimGiftsRequestField(new agario_proto_Claim_$gifts_$request());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_claimGiftsRequestField());
				break;
			case 101:
				if(claim_gifts_response_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.claimGiftsResponseField cannot be set twice."));
				++claim_gifts_response_field__count;
				this.set_claimGiftsResponseField(new agario_proto_Claim_$gifts_$response());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_claimGiftsResponseField());
				break;
			case 102:
				if(send_gifts_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.sendGiftsField cannot be set twice."));
				++send_gifts_field__count;
				this.set_sendGiftsField(new agario_proto_Send_$gifts());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_sendGiftsField());
				break;
			case 103:
				if(consume_requests_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.consumeRequestsField cannot be set twice."));
				++consume_requests_field__count;
				this.set_consumeRequestsField(new agario_proto_Consume_$requests());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_consumeRequestsField());
				break;
			case 104:
				if(request_gifts_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Req.requestGiftsField cannot be set twice."));
				++request_gifts_field__count;
				this.set_requestGiftsField(new agario_proto_Request_$gifts());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_requestGiftsField());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Req
	,__properties__: {set_requestGiftsField:"set_requestGiftsField",get_requestGiftsField:"get_requestGiftsField",set_consumeRequestsField:"set_consumeRequestsField",get_consumeRequestsField:"get_consumeRequestsField",set_sendGiftsField:"set_sendGiftsField",get_sendGiftsField:"get_sendGiftsField",set_claimGiftsResponseField:"set_claimGiftsResponseField",get_claimGiftsResponseField:"get_claimGiftsResponseField",set_claimGiftsRequestField:"set_claimGiftsRequestField",get_claimGiftsRequestField:"get_claimGiftsRequestField",set_serverToServerGameOverWrapperField:"set_serverToServerGameOverWrapperField",get_serverToServerGameOverWrapperField:"get_serverToServerGameOverWrapperField",set_updateUserSettingsResponseField:"set_updateUserSettingsResponseField",get_updateUserSettingsResponseField:"get_updateUserSettingsResponseField",set_updateUserSettingsRequestField:"set_updateUserSettingsRequestField",get_updateUserSettingsRequestField:"get_updateUserSettingsRequestField",set_purchaseWalletUpdatesField:"set_purchaseWalletUpdatesField",get_purchaseWalletUpdatesField:"get_purchaseWalletUpdatesField",set_walletUpdatesField:"set_walletUpdatesField",get_walletUpdatesField:"get_walletUpdatesField",set_activateTimedEventResponseField:"set_activateTimedEventResponseField",get_activateTimedEventResponseField:"get_activateTimedEventResponseField",set_activateTimedEventRequestField:"set_activateTimedEventRequestField",get_activateTimedEventRequestField:"get_activateTimedEventRequestField",set_inappPurchaseResponseField:"set_inappPurchaseResponseField",get_inappPurchaseResponseField:"get_inappPurchaseResponseField",set_googleInappPurchaseRequestField:"set_googleInappPurchaseRequestField",get_googleInappPurchaseRequestField:"get_googleInappPurchaseRequestField",set_appleInappPurchaseRequestField:"set_appleInappPurchaseRequestField",get_appleInappPurchaseRequestField:"get_appleInappPurchaseRequestField",set_softPurchaseResponseField:"set_softPurchaseResponseField",get_softPurchaseResponseField:"get_softPurchaseResponseField",set_softPurchaseRequestField:"set_softPurchaseRequestField",get_softPurchaseRequestField:"get_softPurchaseRequestField",set_gameOverField:"set_gameOverField",get_gameOverField:"get_gameOverField",set_arenaStateField:"set_arenaStateField",get_arenaStateField:"get_arenaStateField",set_leaderboardField:"set_leaderboardField",get_leaderboardField:"get_leaderboardField",set_directionVectorField:"set_directionVectorField",get_directionVectorField:"get_directionVectorField",set_activateBoostResponseField:"set_activateBoostResponseField",get_activateBoostResponseField:"get_activateBoostResponseField",set_activateBoostRequestField:"set_activateBoostRequestField",get_activateBoostRequestField:"get_activateBoostRequestField",set_enterGameRequestField:"set_enterGameRequestField",get_enterGameRequestField:"get_enterGameRequestField",set_udpHandshakeField:"set_udpHandshakeField",get_udpHandshakeField:"get_udpHandshakeField",set_pongField:"set_pongField",get_pongField:"get_pongField",set_pingField:"set_pingField",get_pingField:"get_pingField",set_disconnectField:"set_disconnectField",get_disconnectField:"get_disconnectField",set_realmUpgradeResponseField:"set_realmUpgradeResponseField",get_realmUpgradeResponseField:"get_realmUpgradeResponseField",set_realmUpgradeRequestField:"set_realmUpgradeRequestField",get_realmUpgradeRequestField:"get_realmUpgradeRequestField",set_loginResponseField:"set_loginResponseField",get_loginResponseField:"get_loginResponseField",set_loginRequestField:"set_loginRequestField",get_loginRequestField:"get_loginRequestField",set_type:"set_type",get_type:"get_type"}
});
var agario_proto_Request_$gifts = function() {
	protohx_Message.call(this);
	this.set_giftIds([]);
};
$hxClasses["agario.proto.Request_gifts"] = agario_proto_Request_$gifts;
agario_proto_Request_$gifts.__name__ = ["agario","proto","Request_gifts"];
agario_proto_Request_$gifts.__super__ = protohx_Message;
agario_proto_Request_$gifts.prototype = $extend(protohx_Message.prototype,{
	giftIds: null
	,setGiftIds: function(value) {
		this.set_giftIds(value);
		return this;
	}
	,set_giftIds: function(value) {
		return this.giftIds = value;
	}
	,get_giftIds: function() {
		return this.giftIds;
	}
	,addGiftIds: function(value) {
		if(this.get_giftIds() == null) this.set_giftIds([value]); else this.get_giftIds().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_giftIds() != null) {
			var _g = 0;
			var _g1 = this.get_giftIds();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_STRING(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_giftIds() != null && this.get_giftIds().length > 0) fn("giftIds",this.get_giftIds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_giftIds() == null) this.set_giftIds([]);
				this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Request_$gifts
	,__properties__: {set_giftIds:"set_giftIds",get_giftIds:"get_giftIds"}
});
var agario_proto_Send_$gifts = function() {
	protohx_Message.call(this);
	this.set_giftIds([]);
};
$hxClasses["agario.proto.Send_gifts"] = agario_proto_Send_$gifts;
agario_proto_Send_$gifts.__name__ = ["agario","proto","Send_gifts"];
agario_proto_Send_$gifts.__super__ = protohx_Message;
agario_proto_Send_$gifts.prototype = $extend(protohx_Message.prototype,{
	giftIds: null
	,setGiftIds: function(value) {
		this.set_giftIds(value);
		return this;
	}
	,set_giftIds: function(value) {
		return this.giftIds = value;
	}
	,get_giftIds: function() {
		return this.giftIds;
	}
	,addGiftIds: function(value) {
		if(this.get_giftIds() == null) this.set_giftIds([value]); else this.get_giftIds().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_giftIds() != null) {
			var _g = 0;
			var _g1 = this.get_giftIds();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_STRING(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_giftIds() != null && this.get_giftIds().length > 0) fn("giftIds",this.get_giftIds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_giftIds() == null) this.set_giftIds([]);
				this.get_giftIds().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Send_$gifts
	,__properties__: {set_giftIds:"set_giftIds",get_giftIds:"get_giftIds"}
});
var agario_proto_Server_$info = function() {
	protohx_Message.call(this);
	this.set_host("");
	this.set_tcpPort(0);
	this.set_udpPort(0);
};
$hxClasses["agario.proto.Server_info"] = agario_proto_Server_$info;
agario_proto_Server_$info.__name__ = ["agario","proto","Server_info"];
agario_proto_Server_$info.__super__ = protohx_Message;
agario_proto_Server_$info.prototype = $extend(protohx_Message.prototype,{
	host: null
	,setHost: function(value) {
		this.set_host(value);
		return this;
	}
	,set_host: function(value) {
		return this.host = value;
	}
	,get_host: function() {
		return this.host;
	}
	,tcpPort: null
	,setTcpPort: function(value) {
		this.set_tcpPort(value);
		return this;
	}
	,set_tcpPort: function(value) {
		return this.tcpPort = value;
	}
	,get_tcpPort: function() {
		return this.tcpPort;
	}
	,udpPort: null
	,setUdpPort: function(value) {
		this.set_udpPort(value);
		return this;
	}
	,set_udpPort: function(value) {
		return this.udpPort = value;
	}
	,get_udpPort: function() {
		return this.udpPort;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_host());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_tcpPort());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_udpPort());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("host",this.get_host());
		fn("tcpPort",this.get_tcpPort());
		fn("udpPort",this.get_udpPort());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var host__count = 0;
		var tcp_port__count = 0;
		var udp_port__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(host__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.host cannot be set twice."));
				++host__count;
				this.set_host(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(tcp_port__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.tcpPort cannot be set twice."));
				++tcp_port__count;
				this.set_tcpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 3:
				if(udp_port__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_info.udpPort cannot be set twice."));
				++udp_port__count;
				this.set_udpPort(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Server_$info
	,__properties__: {set_udpPort:"set_udpPort",get_udpPort:"get_udpPort",set_tcpPort:"set_tcpPort",get_tcpPort:"get_tcpPort",set_host:"set_host",get_host:"get_host"}
});
var agario_proto_Server_$to_$server_$game_$over_$wrapper = function() {
	protohx_Message.call(this);
	this.set_hashVerifier("");
	this.set_serverToServerGameOver(this.defaultBytes());
};
$hxClasses["agario.proto.Server_to_server_game_over_wrapper"] = agario_proto_Server_$to_$server_$game_$over_$wrapper;
agario_proto_Server_$to_$server_$game_$over_$wrapper.__name__ = ["agario","proto","Server_to_server_game_over_wrapper"];
agario_proto_Server_$to_$server_$game_$over_$wrapper.__super__ = protohx_Message;
agario_proto_Server_$to_$server_$game_$over_$wrapper.prototype = $extend(protohx_Message.prototype,{
	hashVerifier: null
	,setHashVerifier: function(value) {
		this.set_hashVerifier(value);
		return this;
	}
	,set_hashVerifier: function(value) {
		return this.hashVerifier = value;
	}
	,get_hashVerifier: function() {
		return this.hashVerifier;
	}
	,serverToServerGameOver: null
	,setServerToServerGameOver: function(value) {
		this.set_serverToServerGameOver(value);
		return this;
	}
	,set_serverToServerGameOver: function(value) {
		return this.serverToServerGameOver = value;
	}
	,get_serverToServerGameOver: function() {
		return this.serverToServerGameOver;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_hashVerifier());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_BYTES(output,this.get_serverToServerGameOver());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("hashVerifier",this.get_hashVerifier());
		fn("serverToServerGameOver",this.get_serverToServerGameOver());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var hash_verifier__count = 0;
		var server_to_server_game_over__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(hash_verifier__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_to_server_game_over_wrapper.hashVerifier cannot be set twice."));
				++hash_verifier__count;
				this.set_hashVerifier(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(server_to_server_game_over__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Server_to_server_game_over_wrapper.serverToServerGameOver cannot be set twice."));
				++server_to_server_game_over__count;
				this.set_serverToServerGameOver(protohx_ReadUtils.read__TYPE_BYTES(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Server_$to_$server_$game_$over_$wrapper
	,__properties__: {set_serverToServerGameOver:"set_serverToServerGameOver",get_serverToServerGameOver:"get_serverToServerGameOver",set_hashVerifier:"set_hashVerifier",get_hashVerifier:"get_hashVerifier"}
});
var agario_proto_Soft_$purchase_$request = function() {
	protohx_Message.call(this);
	this.set_purchaseId("");
};
$hxClasses["agario.proto.Soft_purchase_request"] = agario_proto_Soft_$purchase_$request;
agario_proto_Soft_$purchase_$request.__name__ = ["agario","proto","Soft_purchase_request"];
agario_proto_Soft_$purchase_$request.__super__ = protohx_Message;
agario_proto_Soft_$purchase_$request.prototype = $extend(protohx_Message.prototype,{
	purchaseId: null
	,setPurchaseId: function(value) {
		this.set_purchaseId(value);
		return this;
	}
	,set_purchaseId: function(value) {
		return this.purchaseId = value;
	}
	,get_purchaseId: function() {
		return this.purchaseId;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_purchaseId());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("purchaseId",this.get_purchaseId());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var purchase_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(purchase_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_request.purchaseId cannot be set twice."));
				++purchase_id__count;
				this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Soft_$purchase_$request
	,__properties__: {set_purchaseId:"set_purchaseId",get_purchaseId:"get_purchaseId"}
});
var agario_proto_Soft_$purchase_$response = function() {
	protohx_Message.call(this);
	this.set_result(0);
	this.set_purchaseId("");
	this.set_productUpdates([]);
};
$hxClasses["agario.proto.Soft_purchase_response"] = agario_proto_Soft_$purchase_$response;
agario_proto_Soft_$purchase_$response.__name__ = ["agario","proto","Soft_purchase_response"];
agario_proto_Soft_$purchase_$response.__super__ = protohx_Message;
agario_proto_Soft_$purchase_$response.prototype = $extend(protohx_Message.prototype,{
	result: null
	,setResult: function(value) {
		this.set_result(value);
		return this;
	}
	,set_result: function(value) {
		return this.result = value;
	}
	,get_result: function() {
		return this.result;
	}
	,purchaseId: null
	,setPurchaseId: function(value) {
		this.set_purchaseId(value);
		return this;
	}
	,set_purchaseId: function(value) {
		return this.purchaseId = value;
	}
	,get_purchaseId: function() {
		return this.purchaseId;
	}
	,productUpdates: null
	,setProductUpdates: function(value) {
		this.set_productUpdates(value);
		return this;
	}
	,set_productUpdates: function(value) {
		return this.productUpdates = value;
	}
	,get_productUpdates: function() {
		return this.productUpdates;
	}
	,addProductUpdates: function(value) {
		if(this.get_productUpdates() == null) this.set_productUpdates([value]); else this.get_productUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_result());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_purchaseId());
		if(this.get_productUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_productUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,3);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("result",this.get_result());
		fn("purchaseId",this.get_purchaseId());
		if(this.get_productUpdates() != null && this.get_productUpdates().length > 0) fn("productUpdates",this.get_productUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var result__count = 0;
		var purchase_id__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(result__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_response.result cannot be set twice."));
				++result__count;
				this.set_result(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(purchase_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_purchase_response.purchaseId cannot be set twice."));
				++purchase_id__count;
				this.set_purchaseId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(this.get_productUpdates() == null) this.set_productUpdates([]);
				this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Soft_$purchase_$response
	,__properties__: {set_productUpdates:"set_productUpdates",get_productUpdates:"get_productUpdates",set_purchaseId:"set_purchaseId",get_purchaseId:"get_purchaseId",set_result:"set_result",get_result:"get_result"}
});
var agario_proto_Soft_$upgrade = function() {
	protohx_Message.call(this);
	this.set_isAvailable(false);
	this.set_wasHandedOut(false);
};
$hxClasses["agario.proto.Soft_upgrade"] = agario_proto_Soft_$upgrade;
agario_proto_Soft_$upgrade.__name__ = ["agario","proto","Soft_upgrade"];
agario_proto_Soft_$upgrade.__super__ = protohx_Message;
agario_proto_Soft_$upgrade.prototype = $extend(protohx_Message.prototype,{
	isAvailable: null
	,setIsAvailable: function(value) {
		this.set_isAvailable(value);
		return this;
	}
	,set_isAvailable: function(value) {
		return this.isAvailable = value;
	}
	,get_isAvailable: function() {
		return this.isAvailable;
	}
	,wasHandedOut: null
	,setWasHandedOut: function(value) {
		this.set_wasHandedOut(value);
		return this;
	}
	,set_wasHandedOut: function(value) {
		return this.wasHandedOut = value;
	}
	,get_wasHandedOut: function() {
		return this.wasHandedOut;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_BOOL(output,this.get_isAvailable());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_BOOL(output,this.get_wasHandedOut());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("isAvailable",this.get_isAvailable());
		fn("wasHandedOut",this.get_wasHandedOut());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var is_available__count = 0;
		var was_handed_out__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(is_available__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_upgrade.isAvailable cannot be set twice."));
				++is_available__count;
				this.set_isAvailable(protohx_ReadUtils.read__TYPE_BOOL(input));
				break;
			case 2:
				if(was_handed_out__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Soft_upgrade.wasHandedOut cannot be set twice."));
				++was_handed_out__count;
				this.set_wasHandedOut(protohx_ReadUtils.read__TYPE_BOOL(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Soft_$upgrade
	,__properties__: {set_wasHandedOut:"set_wasHandedOut",get_wasHandedOut:"get_wasHandedOut",set_isAvailable:"set_isAvailable",get_isAvailable:"get_isAvailable"}
});
var agario_proto_Udp_$handshake = function() {
	protohx_Message.call(this);
	this.set_token("");
};
$hxClasses["agario.proto.Udp_handshake"] = agario_proto_Udp_$handshake;
agario_proto_Udp_$handshake.__name__ = ["agario","proto","Udp_handshake"];
agario_proto_Udp_$handshake.__super__ = protohx_Message;
agario_proto_Udp_$handshake.prototype = $extend(protohx_Message.prototype,{
	token: null
	,setToken: function(value) {
		this.set_token(value);
		return this;
	}
	,set_token: function(value) {
		return this.token = value;
	}
	,get_token: function() {
		return this.token;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_token());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("token",this.get_token());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var token__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(token__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Udp_handshake.token cannot be set twice."));
				++token__count;
				this.set_token(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Udp_$handshake
	,__properties__: {set_token:"set_token",get_token:"get_token"}
});
var agario_proto_Update_$user_$settings_$request = function() {
	protohx_Message.call(this);
	this.set_userSettingsUpdates([]);
};
$hxClasses["agario.proto.Update_user_settings_request"] = agario_proto_Update_$user_$settings_$request;
agario_proto_Update_$user_$settings_$request.__name__ = ["agario","proto","Update_user_settings_request"];
agario_proto_Update_$user_$settings_$request.__super__ = protohx_Message;
agario_proto_Update_$user_$settings_$request.prototype = $extend(protohx_Message.prototype,{
	userSettingsUpdates: null
	,setUserSettingsUpdates: function(value) {
		this.set_userSettingsUpdates(value);
		return this;
	}
	,set_userSettingsUpdates: function(value) {
		return this.userSettingsUpdates = value;
	}
	,get_userSettingsUpdates: function() {
		return this.userSettingsUpdates;
	}
	,addUserSettingsUpdates: function(value) {
		if(this.get_userSettingsUpdates() == null) this.set_userSettingsUpdates([value]); else this.get_userSettingsUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_userSettingsUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_userSettingsUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_userSettingsUpdates() != null && this.get_userSettingsUpdates().length > 0) fn("userSettingsUpdates",this.get_userSettingsUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_userSettingsUpdates() == null) this.set_userSettingsUpdates([]);
				this.get_userSettingsUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$setting()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Update_$user_$settings_$request
	,__properties__: {set_userSettingsUpdates:"set_userSettingsUpdates",get_userSettingsUpdates:"get_userSettingsUpdates"}
});
var agario_proto_Update_$user_$settings_$response = function() {
	protohx_Message.call(this);
	this.set_updatedUserSettings([]);
};
$hxClasses["agario.proto.Update_user_settings_response"] = agario_proto_Update_$user_$settings_$response;
agario_proto_Update_$user_$settings_$response.__name__ = ["agario","proto","Update_user_settings_response"];
agario_proto_Update_$user_$settings_$response.__super__ = protohx_Message;
agario_proto_Update_$user_$settings_$response.prototype = $extend(protohx_Message.prototype,{
	updatedUserSettings: null
	,setUpdatedUserSettings: function(value) {
		this.set_updatedUserSettings(value);
		return this;
	}
	,set_updatedUserSettings: function(value) {
		return this.updatedUserSettings = value;
	}
	,get_updatedUserSettings: function() {
		return this.updatedUserSettings;
	}
	,addUpdatedUserSettings: function(value) {
		if(this.get_updatedUserSettings() == null) this.set_updatedUserSettings([value]); else this.get_updatedUserSettings().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_updatedUserSettings() != null) {
			var _g = 0;
			var _g1 = this.get_updatedUserSettings();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_updatedUserSettings() != null && this.get_updatedUserSettings().length > 0) fn("updatedUserSettings",this.get_updatedUserSettings());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_updatedUserSettings() == null) this.set_updatedUserSettings([]);
				this.get_updatedUserSettings().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$setting()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Update_$user_$settings_$response
	,__properties__: {set_updatedUserSettings:"set_updatedUserSettings",get_updatedUserSettings:"get_updatedUserSettings"}
});
var agario_proto_User_$boost_$item = function() {
	protohx_Message.call(this);
	this.set_productId("");
	this.set_expiresInSeconds(0);
};
$hxClasses["agario.proto.User_boost_item"] = agario_proto_User_$boost_$item;
agario_proto_User_$boost_$item.__name__ = ["agario","proto","User_boost_item"];
agario_proto_User_$boost_$item.__super__ = protohx_Message;
agario_proto_User_$boost_$item.prototype = $extend(protohx_Message.prototype,{
	productId: null
	,setProductId: function(value) {
		this.set_productId(value);
		return this;
	}
	,set_productId: function(value) {
		return this.productId = value;
	}
	,get_productId: function() {
		return this.productId;
	}
	,expiresInSeconds: null
	,setExpiresInSeconds: function(value) {
		this.set_expiresInSeconds(value);
		return this;
	}
	,set_expiresInSeconds: function(value) {
		return this.expiresInSeconds = value;
	}
	,get_expiresInSeconds: function() {
		return this.expiresInSeconds;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_productId());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_expiresInSeconds());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("productId",this.get_productId());
		fn("expiresInSeconds",this.get_expiresInSeconds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var product_id__count = 0;
		var expires_in_seconds__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(product_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_boost_item.productId cannot be set twice."));
				++product_id__count;
				this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(expires_in_seconds__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_boost_item.expiresInSeconds cannot be set twice."));
				++expires_in_seconds__count;
				this.set_expiresInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$boost_$item
	,__properties__: {set_expiresInSeconds:"set_expiresInSeconds",get_expiresInSeconds:"get_expiresInSeconds",set_productId:"set_productId",get_productId:"get_productId"}
});
var agario_proto_User_$data_$update = function() {
	protohx_Message.call(this);
	this.set_type(0);
};
$hxClasses["agario.proto.User_data_update"] = agario_proto_User_$data_$update;
agario_proto_User_$data_$update.__name__ = ["agario","proto","User_data_update"];
agario_proto_User_$data_$update.__super__ = protohx_Message;
agario_proto_User_$data_$update.prototype = $extend(protohx_Message.prototype,{
	type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,xpLevelField: null
	,setXpLevelField: function(value) {
		this.set_xpLevelField(value);
		return this;
	}
	,clearXpLevelField: function() {
		this.set_xpLevelField(null);
	}
	,hasXpLevelField: function() {
		return this.get_xpLevelField() != null;
	}
	,set_xpLevelField: function(value) {
		return this.xpLevelField = value;
	}
	,get_xpLevelField: function() {
		return this.xpLevelField;
	}
	,productField: null
	,setProductField: function(value) {
		this.set_productField(value);
		return this;
	}
	,clearProductField: function() {
		this.set_productField(null);
	}
	,hasProductField: function() {
		return this.get_productField() != null;
	}
	,set_productField: function(value) {
		return this.productField = value;
	}
	,get_productField: function() {
		return this.productField;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		if(this.get_xpLevelField() != null) {
			protohx_WriteUtils.writeTag(output,2,10);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_xpLevelField());
		}
		if(this.get_productField() != null) {
			protohx_WriteUtils.writeTag(output,2,20);
			protohx_WriteUtils.write__TYPE_MESSAGE(output,this.get_productField());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("type",this.get_type());
		if(this.get_xpLevelField() != null) fn("xpLevelField",this.get_xpLevelField());
		if(this.get_productField() != null) fn("productField",this.get_productField());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var type__count = 0;
		var xp_level_field__count = 0;
		var product_field__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 10:
				if(xp_level_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.xpLevelField cannot be set twice."));
				++xp_level_field__count;
				this.set_xpLevelField(new agario_proto_Xp_$level_$update());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_xpLevelField());
				break;
			case 20:
				if(product_field__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_data_update.productField cannot be set twice."));
				++product_field__count;
				this.set_productField(new agario_proto_Product_$update());
				protohx_ReadUtils.read__TYPE_MESSAGE(input,this.get_productField());
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$data_$update
	,__properties__: {set_productField:"set_productField",get_productField:"get_productField",set_xpLevelField:"set_xpLevelField",get_xpLevelField:"get_xpLevelField",set_type:"set_type",get_type:"get_type"}
});
var agario_proto_User_$gift = function() {
	protohx_Message.call(this);
	this.set_facebookIdFrom("");
	this.set_productId("");
	this.set_amount(0);
};
$hxClasses["agario.proto.User_gift"] = agario_proto_User_$gift;
agario_proto_User_$gift.__name__ = ["agario","proto","User_gift"];
agario_proto_User_$gift.__super__ = protohx_Message;
agario_proto_User_$gift.prototype = $extend(protohx_Message.prototype,{
	facebookIdFrom: null
	,setFacebookIdFrom: function(value) {
		this.set_facebookIdFrom(value);
		return this;
	}
	,set_facebookIdFrom: function(value) {
		return this.facebookIdFrom = value;
	}
	,get_facebookIdFrom: function() {
		return this.facebookIdFrom;
	}
	,productId: null
	,setProductId: function(value) {
		this.set_productId(value);
		return this;
	}
	,set_productId: function(value) {
		return this.productId = value;
	}
	,get_productId: function() {
		return this.productId;
	}
	,amount: null
	,setAmount: function(value) {
		this.set_amount(value);
		return this;
	}
	,set_amount: function(value) {
		return this.amount = value;
	}
	,get_amount: function() {
		return this.amount;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_facebookIdFrom());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_productId());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_amount());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("facebookIdFrom",this.get_facebookIdFrom());
		fn("productId",this.get_productId());
		fn("amount",this.get_amount());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var facebook_id_from__count = 0;
		var product_id__count = 0;
		var amount__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(facebook_id_from__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.facebookIdFrom cannot be set twice."));
				++facebook_id_from__count;
				this.set_facebookIdFrom(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(product_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.productId cannot be set twice."));
				++product_id__count;
				this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(amount__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_gift.amount cannot be set twice."));
				++amount__count;
				this.set_amount(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$gift
	,__properties__: {set_amount:"set_amount",get_amount:"get_amount",set_productId:"set_productId",get_productId:"get_productId",set_facebookIdFrom:"set_facebookIdFrom",get_facebookIdFrom:"get_facebookIdFrom"}
});
var agario_proto_User_$gifts = function() {
	protohx_Message.call(this);
	this.set_claimable([]);
	this.set_claimedFrom([]);
	this.set_sentTo([]);
	this.set_requestedTo([]);
	this.set_requestedFrom([]);
};
$hxClasses["agario.proto.User_gifts"] = agario_proto_User_$gifts;
agario_proto_User_$gifts.__name__ = ["agario","proto","User_gifts"];
agario_proto_User_$gifts.__super__ = protohx_Message;
agario_proto_User_$gifts.prototype = $extend(protohx_Message.prototype,{
	claimable: null
	,setClaimable: function(value) {
		this.set_claimable(value);
		return this;
	}
	,set_claimable: function(value) {
		return this.claimable = value;
	}
	,get_claimable: function() {
		return this.claimable;
	}
	,addClaimable: function(value) {
		if(this.get_claimable() == null) this.set_claimable([value]); else this.get_claimable().push(value);
	}
	,claimedFrom: null
	,setClaimedFrom: function(value) {
		this.set_claimedFrom(value);
		return this;
	}
	,set_claimedFrom: function(value) {
		return this.claimedFrom = value;
	}
	,get_claimedFrom: function() {
		return this.claimedFrom;
	}
	,addClaimedFrom: function(value) {
		if(this.get_claimedFrom() == null) this.set_claimedFrom([value]); else this.get_claimedFrom().push(value);
	}
	,sentTo: null
	,setSentTo: function(value) {
		this.set_sentTo(value);
		return this;
	}
	,set_sentTo: function(value) {
		return this.sentTo = value;
	}
	,get_sentTo: function() {
		return this.sentTo;
	}
	,addSentTo: function(value) {
		if(this.get_sentTo() == null) this.set_sentTo([value]); else this.get_sentTo().push(value);
	}
	,requestedTo: null
	,setRequestedTo: function(value) {
		this.set_requestedTo(value);
		return this;
	}
	,set_requestedTo: function(value) {
		return this.requestedTo = value;
	}
	,get_requestedTo: function() {
		return this.requestedTo;
	}
	,addRequestedTo: function(value) {
		if(this.get_requestedTo() == null) this.set_requestedTo([value]); else this.get_requestedTo().push(value);
	}
	,requestedFrom: null
	,setRequestedFrom: function(value) {
		this.set_requestedFrom(value);
		return this;
	}
	,set_requestedFrom: function(value) {
		return this.requestedFrom = value;
	}
	,get_requestedFrom: function() {
		return this.requestedFrom;
	}
	,addRequestedFrom: function(value) {
		if(this.get_requestedFrom() == null) this.set_requestedFrom([value]); else this.get_requestedFrom().push(value);
	}
	,writeToBuffer: function(output) {
		if(this.get_claimable() != null) {
			var _g = 0;
			var _g1 = this.get_claimable();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,1);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		if(this.get_claimedFrom() != null) {
			var _g2 = 0;
			var _g11 = this.get_claimedFrom();
			while(_g2 < _g11.length) {
				var value1 = _g11[_g2];
				++_g2;
				protohx_WriteUtils.writeTag(output,2,2);
				protohx_WriteUtils.write__TYPE_STRING(output,value1);
			}
		}
		if(this.get_sentTo() != null) {
			var _g3 = 0;
			var _g12 = this.get_sentTo();
			while(_g3 < _g12.length) {
				var value2 = _g12[_g3];
				++_g3;
				protohx_WriteUtils.writeTag(output,2,3);
				protohx_WriteUtils.write__TYPE_STRING(output,value2);
			}
		}
		if(this.get_requestedTo() != null) {
			var _g4 = 0;
			var _g13 = this.get_requestedTo();
			while(_g4 < _g13.length) {
				var value3 = _g13[_g4];
				++_g4;
				protohx_WriteUtils.writeTag(output,2,4);
				protohx_WriteUtils.write__TYPE_STRING(output,value3);
			}
		}
		if(this.get_requestedFrom() != null) {
			var _g5 = 0;
			var _g14 = this.get_requestedFrom();
			while(_g5 < _g14.length) {
				var value4 = _g14[_g5];
				++_g5;
				protohx_WriteUtils.writeTag(output,2,5);
				protohx_WriteUtils.write__TYPE_STRING(output,value4);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		if(this.get_claimable() != null && this.get_claimable().length > 0) fn("claimable",this.get_claimable());
		if(this.get_claimedFrom() != null && this.get_claimedFrom().length > 0) fn("claimedFrom",this.get_claimedFrom());
		if(this.get_sentTo() != null && this.get_sentTo().length > 0) fn("sentTo",this.get_sentTo());
		if(this.get_requestedTo() != null && this.get_requestedTo().length > 0) fn("requestedTo",this.get_requestedTo());
		if(this.get_requestedFrom() != null && this.get_requestedFrom().length > 0) fn("requestedFrom",this.get_requestedFrom());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(this.get_claimable() == null) this.set_claimable([]);
				this.get_claimable().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$gift()));
				break;
			case 2:
				if(this.get_claimedFrom() == null) this.set_claimedFrom([]);
				this.get_claimedFrom().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(this.get_sentTo() == null) this.set_sentTo([]);
				this.get_sentTo().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 4:
				if(this.get_requestedTo() == null) this.set_requestedTo([]);
				this.get_requestedTo().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 5:
				if(this.get_requestedFrom() == null) this.set_requestedFrom([]);
				this.get_requestedFrom().push(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$gifts
	,__properties__: {set_requestedFrom:"set_requestedFrom",get_requestedFrom:"get_requestedFrom",set_requestedTo:"set_requestedTo",get_requestedTo:"get_requestedTo",set_sentTo:"set_sentTo",get_sentTo:"get_sentTo",set_claimedFrom:"set_claimedFrom",get_claimedFrom:"get_claimedFrom",set_claimable:"set_claimable",get_claimable:"get_claimable"}
});
var agario_proto_User_$info = function() {
	protohx_Message.call(this);
	this.set_id("");
	this.set_displayName("");
	this.set_xp(0);
	this.set_level(0);
	this.set_isPayingUser(false);
	this.set_hasLoggedIntoMobile(false);
};
$hxClasses["agario.proto.User_info"] = agario_proto_User_$info;
agario_proto_User_$info.__name__ = ["agario","proto","User_info"];
agario_proto_User_$info.__super__ = protohx_Message;
agario_proto_User_$info.prototype = $extend(protohx_Message.prototype,{
	id: null
	,setId: function(value) {
		this.set_id(value);
		return this;
	}
	,set_id: function(value) {
		return this.id = value;
	}
	,get_id: function() {
		return this.id;
	}
	,displayName: null
	,setDisplayName: function(value) {
		this.set_displayName(value);
		return this;
	}
	,set_displayName: function(value) {
		return this.displayName = value;
	}
	,get_displayName: function() {
		return this.displayName;
	}
	,xp: null
	,setXp: function(value) {
		this.set_xp(value);
		return this;
	}
	,set_xp: function(value) {
		return this.xp = value;
	}
	,get_xp: function() {
		return this.xp;
	}
	,level: null
	,setLevel: function(value) {
		this.set_level(value);
		return this;
	}
	,set_level: function(value) {
		return this.level = value;
	}
	,get_level: function() {
		return this.level;
	}
	,isPayingUser: null
	,setIsPayingUser: function(value) {
		this.set_isPayingUser(value);
		return this;
	}
	,set_isPayingUser: function(value) {
		return this.isPayingUser = value;
	}
	,get_isPayingUser: function() {
		return this.isPayingUser;
	}
	,hasLoggedIntoMobile: null
	,setHasLoggedIntoMobile: function(value) {
		this.set_hasLoggedIntoMobile(value);
		return this;
	}
	,set_hasLoggedIntoMobile: function(value) {
		return this.hasLoggedIntoMobile = value;
	}
	,get_hasLoggedIntoMobile: function() {
		return this.hasLoggedIntoMobile;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_id());
		protohx_WriteUtils.writeTag(output,2,2);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_displayName());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_xp());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_level());
		protohx_WriteUtils.writeTag(output,0,5);
		protohx_WriteUtils.write__TYPE_BOOL(output,this.get_isPayingUser());
		protohx_WriteUtils.writeTag(output,0,6);
		protohx_WriteUtils.write__TYPE_BOOL(output,this.get_hasLoggedIntoMobile());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("id",this.get_id());
		fn("displayName",this.get_displayName());
		fn("xp",this.get_xp());
		fn("level",this.get_level());
		fn("isPayingUser",this.get_isPayingUser());
		fn("hasLoggedIntoMobile",this.get_hasLoggedIntoMobile());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var id__count = 0;
		var display_name__count = 0;
		var xp__count = 0;
		var level__count = 0;
		var is_paying_user__count = 0;
		var has_logged_into_mobile__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.id cannot be set twice."));
				++id__count;
				this.set_id(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(display_name__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.displayName cannot be set twice."));
				++display_name__count;
				this.set_displayName(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 3:
				if(xp__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.xp cannot be set twice."));
				++xp__count;
				this.set_xp(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 4:
				if(level__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.level cannot be set twice."));
				++level__count;
				this.set_level(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 5:
				if(is_paying_user__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.isPayingUser cannot be set twice."));
				++is_paying_user__count;
				this.set_isPayingUser(protohx_ReadUtils.read__TYPE_BOOL(input));
				break;
			case 6:
				if(has_logged_into_mobile__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_info.hasLoggedIntoMobile cannot be set twice."));
				++has_logged_into_mobile__count;
				this.set_hasLoggedIntoMobile(protohx_ReadUtils.read__TYPE_BOOL(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$info
	,__properties__: {set_hasLoggedIntoMobile:"set_hasLoggedIntoMobile",get_hasLoggedIntoMobile:"get_hasLoggedIntoMobile",set_isPayingUser:"set_isPayingUser",get_isPayingUser:"get_isPayingUser",set_level:"set_level",get_level:"get_level",set_xp:"set_xp",get_xp:"get_xp",set_displayName:"set_displayName",get_displayName:"get_displayName",set_id:"set_id",get_id:"get_id"}
});
var agario_proto_User_$setting = function() {
	this.hasField__0 = 0;
	protohx_Message.call(this);
	this.set_type(0);
	this.set_key(0);
};
$hxClasses["agario.proto.User_setting"] = agario_proto_User_$setting;
agario_proto_User_$setting.__name__ = ["agario","proto","User_setting"];
agario_proto_User_$setting.__super__ = protohx_Message;
agario_proto_User_$setting.prototype = $extend(protohx_Message.prototype,{
	type: null
	,setType: function(value) {
		this.set_type(value);
		return this;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_type: function() {
		return this.type;
	}
	,key: null
	,setKey: function(value) {
		this.set_key(value);
		return this;
	}
	,set_key: function(value) {
		return this.key = value;
	}
	,get_key: function() {
		return this.key;
	}
	,valueString: null
	,setValueString: function(value) {
		this.set_valueString(value);
		return this;
	}
	,clearValueString: function() {
		this.set_valueString(null);
	}
	,hasValueString: function() {
		return this.get_valueString() != null;
	}
	,set_valueString: function(value) {
		return this.valueString = value;
	}
	,get_valueString: function() {
		return this.valueString;
	}
	,valueInt32: null
	,setValueInt32: function(value) {
		this.set_valueInt32(value);
		return this;
	}
	,hasField__0: null
	,clearValueInt32: function() {
		this.hasField__0 = this.hasField__0 & -2;
		this.set_valueInt32(0);
	}
	,hasValueInt32: function() {
		return (this.hasField__0 & 1) != 0;
	}
	,set_valueInt32: function(value) {
		this.hasField__0 = this.hasField__0 | 1;
		return this.valueInt32 = value;
	}
	,get_valueInt32: function() {
		return this.valueInt32;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_type());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_ENUM(output,this.get_key());
		if(this.get_valueString() != null) {
			protohx_WriteUtils.writeTag(output,2,3);
			protohx_WriteUtils.write__TYPE_STRING(output,this.get_valueString());
		}
		if((this.hasField__0 & 1) != 0) {
			protohx_WriteUtils.writeTag(output,0,4);
			protohx_WriteUtils.write__TYPE_INT32(output,this.get_valueInt32());
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("type",this.get_type());
		fn("key",this.get_key());
		if(this.get_valueString() != null) fn("valueString",this.get_valueString());
		if((this.hasField__0 & 1) != 0) fn("valueInt32",this.get_valueInt32());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var type__count = 0;
		var key__count = 0;
		var value_string__count = 0;
		var value_int32__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(type__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.type cannot be set twice."));
				++type__count;
				this.set_type(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 2:
				if(key__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.key cannot be set twice."));
				++key__count;
				this.set_key(protohx_ReadUtils.read__TYPE_ENUM(input));
				break;
			case 3:
				if(value_string__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.valueString cannot be set twice."));
				++value_string__count;
				this.set_valueString(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 4:
				if(value_int32__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_setting.valueInt32 cannot be set twice."));
				++value_int32__count;
				this.set_valueInt32(protohx_ReadUtils.read__TYPE_INT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$setting
	,__properties__: {set_valueInt32:"set_valueInt32",get_valueInt32:"get_valueInt32",set_valueString:"set_valueString",get_valueString:"get_valueString",set_key:"set_key",get_key:"get_key",set_type:"set_type",get_type:"get_type"}
});
var agario_proto_User_$stats = function() {
	protohx_Message.call(this);
	this.set_gamesPlayed(0);
	this.set_massConsumed(0);
	this.set_allTimeScore(0);
	this.set_highestMass(0);
	this.set_longestTimeAlive(0);
	this.set_mostCellsEaten(0);
};
$hxClasses["agario.proto.User_stats"] = agario_proto_User_$stats;
agario_proto_User_$stats.__name__ = ["agario","proto","User_stats"];
agario_proto_User_$stats.__super__ = protohx_Message;
agario_proto_User_$stats.prototype = $extend(protohx_Message.prototype,{
	gamesPlayed: null
	,setGamesPlayed: function(value) {
		this.set_gamesPlayed(value);
		return this;
	}
	,set_gamesPlayed: function(value) {
		return this.gamesPlayed = value;
	}
	,get_gamesPlayed: function() {
		return this.gamesPlayed;
	}
	,massConsumed: null
	,setMassConsumed: function(value) {
		this.set_massConsumed(value);
		return this;
	}
	,set_massConsumed: function(value) {
		return this.massConsumed = value;
	}
	,get_massConsumed: function() {
		return this.massConsumed;
	}
	,allTimeScore: null
	,setAllTimeScore: function(value) {
		this.set_allTimeScore(value);
		return this;
	}
	,set_allTimeScore: function(value) {
		return this.allTimeScore = value;
	}
	,get_allTimeScore: function() {
		return this.allTimeScore;
	}
	,highestMass: null
	,setHighestMass: function(value) {
		this.set_highestMass(value);
		return this;
	}
	,set_highestMass: function(value) {
		return this.highestMass = value;
	}
	,get_highestMass: function() {
		return this.highestMass;
	}
	,longestTimeAlive: null
	,setLongestTimeAlive: function(value) {
		this.set_longestTimeAlive(value);
		return this;
	}
	,set_longestTimeAlive: function(value) {
		return this.longestTimeAlive = value;
	}
	,get_longestTimeAlive: function() {
		return this.longestTimeAlive;
	}
	,mostCellsEaten: null
	,setMostCellsEaten: function(value) {
		this.set_mostCellsEaten(value);
		return this;
	}
	,set_mostCellsEaten: function(value) {
		return this.mostCellsEaten = value;
	}
	,get_mostCellsEaten: function() {
		return this.mostCellsEaten;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_gamesPlayed());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_massConsumed());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_allTimeScore());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_highestMass());
		protohx_WriteUtils.writeTag(output,0,5);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_longestTimeAlive());
		protohx_WriteUtils.writeTag(output,0,6);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_mostCellsEaten());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("gamesPlayed",this.get_gamesPlayed());
		fn("massConsumed",this.get_massConsumed());
		fn("allTimeScore",this.get_allTimeScore());
		fn("highestMass",this.get_highestMass());
		fn("longestTimeAlive",this.get_longestTimeAlive());
		fn("mostCellsEaten",this.get_mostCellsEaten());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var games_played__count = 0;
		var mass_consumed__count = 0;
		var all_time_score__count = 0;
		var highest_mass__count = 0;
		var longest_time_alive__count = 0;
		var most_cells_eaten__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(games_played__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.gamesPlayed cannot be set twice."));
				++games_played__count;
				this.set_gamesPlayed(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 2:
				if(mass_consumed__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.massConsumed cannot be set twice."));
				++mass_consumed__count;
				this.set_massConsumed(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 3:
				if(all_time_score__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.allTimeScore cannot be set twice."));
				++all_time_score__count;
				this.set_allTimeScore(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 4:
				if(highest_mass__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.highestMass cannot be set twice."));
				++highest_mass__count;
				this.set_highestMass(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 5:
				if(longest_time_alive__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.longestTimeAlive cannot be set twice."));
				++longest_time_alive__count;
				this.set_longestTimeAlive(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 6:
				if(most_cells_eaten__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_stats.mostCellsEaten cannot be set twice."));
				++most_cells_eaten__count;
				this.set_mostCellsEaten(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$stats
	,__properties__: {set_mostCellsEaten:"set_mostCellsEaten",get_mostCellsEaten:"get_mostCellsEaten",set_longestTimeAlive:"set_longestTimeAlive",get_longestTimeAlive:"get_longestTimeAlive",set_highestMass:"set_highestMass",get_highestMass:"get_highestMass",set_allTimeScore:"set_allTimeScore",get_allTimeScore:"get_allTimeScore",set_massConsumed:"set_massConsumed",get_massConsumed:"get_massConsumed",set_gamesPlayed:"set_gamesPlayed",get_gamesPlayed:"get_gamesPlayed"}
});
var agario_proto_User_$timed_$event = function() {
	protohx_Message.call(this);
	this.set_eventId("");
	this.set_nextAvailableInSeconds(0);
};
$hxClasses["agario.proto.User_timed_event"] = agario_proto_User_$timed_$event;
agario_proto_User_$timed_$event.__name__ = ["agario","proto","User_timed_event"];
agario_proto_User_$timed_$event.__super__ = protohx_Message;
agario_proto_User_$timed_$event.prototype = $extend(protohx_Message.prototype,{
	eventId: null
	,setEventId: function(value) {
		this.set_eventId(value);
		return this;
	}
	,set_eventId: function(value) {
		return this.eventId = value;
	}
	,get_eventId: function() {
		return this.eventId;
	}
	,nextAvailableInSeconds: null
	,setNextAvailableInSeconds: function(value) {
		this.set_nextAvailableInSeconds(value);
		return this;
	}
	,set_nextAvailableInSeconds: function(value) {
		return this.nextAvailableInSeconds = value;
	}
	,get_nextAvailableInSeconds: function() {
		return this.nextAvailableInSeconds;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_eventId());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_nextAvailableInSeconds());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("eventId",this.get_eventId());
		fn("nextAvailableInSeconds",this.get_nextAvailableInSeconds());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var event_id__count = 0;
		var next_available_in_seconds__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(event_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_timed_event.eventId cannot be set twice."));
				++event_id__count;
				this.set_eventId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(next_available_in_seconds__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_timed_event.nextAvailableInSeconds cannot be set twice."));
				++next_available_in_seconds__count;
				this.set_nextAvailableInSeconds(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$timed_$event
	,__properties__: {set_nextAvailableInSeconds:"set_nextAvailableInSeconds",get_nextAvailableInSeconds:"get_nextAvailableInSeconds",set_eventId:"set_eventId",get_eventId:"get_eventId"}
});
var agario_proto_User_$wallet_$item = function() {
	protohx_Message.call(this);
	this.set_productId("");
	this.set_quantity(0);
};
$hxClasses["agario.proto.User_wallet_item"] = agario_proto_User_$wallet_$item;
agario_proto_User_$wallet_$item.__name__ = ["agario","proto","User_wallet_item"];
agario_proto_User_$wallet_$item.__super__ = protohx_Message;
agario_proto_User_$wallet_$item.prototype = $extend(protohx_Message.prototype,{
	productId: null
	,setProductId: function(value) {
		this.set_productId(value);
		return this;
	}
	,set_productId: function(value) {
		return this.productId = value;
	}
	,get_productId: function() {
		return this.productId;
	}
	,quantity: null
	,setQuantity: function(value) {
		this.set_quantity(value);
		return this;
	}
	,set_quantity: function(value) {
		return this.quantity = value;
	}
	,get_quantity: function() {
		return this.quantity;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_productId());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_quantity());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("productId",this.get_productId());
		fn("quantity",this.get_quantity());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var product_id__count = 0;
		var quantity__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(product_id__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_wallet_item.productId cannot be set twice."));
				++product_id__count;
				this.set_productId(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(quantity__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: User_wallet_item.quantity cannot be set twice."));
				++quantity__count;
				this.set_quantity(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_User_$wallet_$item
	,__properties__: {set_quantity:"set_quantity",get_quantity:"get_quantity",set_productId:"set_productId",get_productId:"get_productId"}
});
var agario_proto_Wallet_$updates = function() {
	protohx_Message.call(this);
	this.set_originPlatform("");
	this.set_productUpdates([]);
};
$hxClasses["agario.proto.Wallet_updates"] = agario_proto_Wallet_$updates;
agario_proto_Wallet_$updates.__name__ = ["agario","proto","Wallet_updates"];
agario_proto_Wallet_$updates.__super__ = protohx_Message;
agario_proto_Wallet_$updates.prototype = $extend(protohx_Message.prototype,{
	originPlatform: null
	,setOriginPlatform: function(value) {
		this.set_originPlatform(value);
		return this;
	}
	,set_originPlatform: function(value) {
		return this.originPlatform = value;
	}
	,get_originPlatform: function() {
		return this.originPlatform;
	}
	,productUpdates: null
	,setProductUpdates: function(value) {
		this.set_productUpdates(value);
		return this;
	}
	,set_productUpdates: function(value) {
		return this.productUpdates = value;
	}
	,get_productUpdates: function() {
		return this.productUpdates;
	}
	,addProductUpdates: function(value) {
		if(this.get_productUpdates() == null) this.set_productUpdates([value]); else this.get_productUpdates().push(value);
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,2,1);
		protohx_WriteUtils.write__TYPE_STRING(output,this.get_originPlatform());
		if(this.get_productUpdates() != null) {
			var _g = 0;
			var _g1 = this.get_productUpdates();
			while(_g < _g1.length) {
				var value = _g1[_g];
				++_g;
				protohx_WriteUtils.writeTag(output,2,2);
				protohx_WriteUtils.write__TYPE_MESSAGE(output,value);
			}
		}
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("originPlatform",this.get_originPlatform());
		if(this.get_productUpdates() != null && this.get_productUpdates().length > 0) fn("productUpdates",this.get_productUpdates());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var origin_platform__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(origin_platform__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Wallet_updates.originPlatform cannot be set twice."));
				++origin_platform__count;
				this.set_originPlatform(protohx_ReadUtils.read__TYPE_STRING(input));
				break;
			case 2:
				if(this.get_productUpdates() == null) this.set_productUpdates([]);
				this.get_productUpdates().push(protohx_ReadUtils.read__TYPE_MESSAGE(input,new agario_proto_User_$data_$update()));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Wallet_$updates
	,__properties__: {set_productUpdates:"set_productUpdates",get_productUpdates:"get_productUpdates",set_originPlatform:"set_originPlatform",get_originPlatform:"get_originPlatform"}
});
var agario_proto_Xp_$level_$update = function() {
	protohx_Message.call(this);
	this.set_finalXpForLevel(0);
	this.set_deltaXp(0);
	this.set_finalLevel(0);
	this.set_deltaLevel(0);
};
$hxClasses["agario.proto.Xp_level_update"] = agario_proto_Xp_$level_$update;
agario_proto_Xp_$level_$update.__name__ = ["agario","proto","Xp_level_update"];
agario_proto_Xp_$level_$update.__super__ = protohx_Message;
agario_proto_Xp_$level_$update.prototype = $extend(protohx_Message.prototype,{
	finalXpForLevel: null
	,setFinalXpForLevel: function(value) {
		this.set_finalXpForLevel(value);
		return this;
	}
	,set_finalXpForLevel: function(value) {
		return this.finalXpForLevel = value;
	}
	,get_finalXpForLevel: function() {
		return this.finalXpForLevel;
	}
	,deltaXp: null
	,setDeltaXp: function(value) {
		this.set_deltaXp(value);
		return this;
	}
	,set_deltaXp: function(value) {
		return this.deltaXp = value;
	}
	,get_deltaXp: function() {
		return this.deltaXp;
	}
	,finalLevel: null
	,setFinalLevel: function(value) {
		this.set_finalLevel(value);
		return this;
	}
	,set_finalLevel: function(value) {
		return this.finalLevel = value;
	}
	,get_finalLevel: function() {
		return this.finalLevel;
	}
	,deltaLevel: null
	,setDeltaLevel: function(value) {
		this.set_deltaLevel(value);
		return this;
	}
	,set_deltaLevel: function(value) {
		return this.deltaLevel = value;
	}
	,get_deltaLevel: function() {
		return this.deltaLevel;
	}
	,writeToBuffer: function(output) {
		protohx_WriteUtils.writeTag(output,0,1);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_finalXpForLevel());
		protohx_WriteUtils.writeTag(output,0,2);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_deltaXp());
		protohx_WriteUtils.writeTag(output,0,3);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_finalLevel());
		protohx_WriteUtils.writeTag(output,0,4);
		protohx_WriteUtils.write__TYPE_UINT32(output,this.get_deltaLevel());
		protohx_Message.prototype.writeExtensionOrUnknownFields.call(this,output);
	}
	,forEachFields: function(fn) {
		fn("finalXpForLevel",this.get_finalXpForLevel());
		fn("deltaXp",this.get_deltaXp());
		fn("finalLevel",this.get_finalLevel());
		fn("deltaLevel",this.get_deltaLevel());
	}
	,readFromSlice: function(input,bytesAfterSlice) {
		var final_xp_for_level__count = 0;
		var delta_xp__count = 0;
		var final_level__count = 0;
		var delta_level__count = 0;
		while(input.buf.totlen - input.buf.pos > bytesAfterSlice) {
			var tag = protohx_ReadUtils.read__TYPE_UINT32(input);
			var _g = tag >> 3;
			switch(_g) {
			case 1:
				if(final_xp_for_level__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.finalXpForLevel cannot be set twice."));
				++final_xp_for_level__count;
				this.set_finalXpForLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 2:
				if(delta_xp__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.deltaXp cannot be set twice."));
				++delta_xp__count;
				this.set_deltaXp(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 3:
				if(final_level__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.finalLevel cannot be set twice."));
				++final_level__count;
				this.set_finalLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			case 4:
				if(delta_level__count != 0) throw new js__$Boot_HaxeError(new protohx_CommonError("Bad data format: Xp_level_update.deltaLevel cannot be set twice."));
				++delta_level__count;
				this.set_deltaLevel(protohx_ReadUtils.read__TYPE_UINT32(input));
				break;
			default:
				protohx_Message.prototype.readUnknown.call(this,input,tag);
			}
		}
	}
	,__class__: agario_proto_Xp_$level_$update
	,__properties__: {set_deltaLevel:"set_deltaLevel",get_deltaLevel:"get_deltaLevel",set_finalLevel:"set_finalLevel",get_finalLevel:"get_finalLevel",set_deltaXp:"set_deltaXp",get_deltaXp:"get_deltaXp",set_finalXpForLevel:"set_finalXpForLevel",get_finalXpForLevel:"get_finalXpForLevel"}
});
var agario_proto_cell_$state_Cell_$type_$enum = function() { };
$hxClasses["agario.proto.cell_state.Cell_type_enum"] = agario_proto_cell_$state_Cell_$type_$enum;
agario_proto_cell_$state_Cell_$type_$enum.__name__ = ["agario","proto","cell_state","Cell_type_enum"];
var agario_proto_device_Platform_$enum = function() { };
$hxClasses["agario.proto.device.Platform_enum"] = agario_proto_device_Platform_$enum;
agario_proto_device_Platform_$enum.__name__ = ["agario","proto","device","Platform_enum"];
var agario_proto_disconnect_Reason_$enum = function() { };
$hxClasses["agario.proto.disconnect.Reason_enum"] = agario_proto_disconnect_Reason_$enum;
agario_proto_disconnect_Reason_$enum.__name__ = ["agario","proto","disconnect","Reason_enum"];
var agario_proto_envelope_Content_$type_$enum = function() { };
$hxClasses["agario.proto.envelope.Content_type_enum"] = agario_proto_envelope_Content_$type_$enum;
agario_proto_envelope_Content_$type_$enum.__name__ = ["agario","proto","envelope","Content_type_enum"];
var agario_proto_inapp_$purchase_$response_Result_$enum = function() { };
$hxClasses["agario.proto.inapp_purchase_response.Result_enum"] = agario_proto_inapp_$purchase_$response_Result_$enum;
agario_proto_inapp_$purchase_$response_Result_$enum.__name__ = ["agario","proto","inapp_purchase_response","Result_enum"];
var agario_proto_login_$request_Realm_$enum = function() { };
$hxClasses["agario.proto.login_request.Realm_enum"] = agario_proto_login_$request_Realm_$enum;
agario_proto_login_$request_Realm_$enum.__name__ = ["agario","proto","login_request","Realm_enum"];
var agario_proto_login_$response_Current_$game_$state_$enum = function() { };
$hxClasses["agario.proto.login_response.Current_game_state_enum"] = agario_proto_login_$response_Current_$game_$state_$enum;
agario_proto_login_$response_Current_$game_$state_$enum.__name__ = ["agario","proto","login_response","Current_game_state_enum"];
var agario_proto_login_$response_Realm_$enum = function() { };
$hxClasses["agario.proto.login_response.Realm_enum"] = agario_proto_login_$response_Realm_$enum;
agario_proto_login_$response_Realm_$enum.__name__ = ["agario","proto","login_response","Realm_enum"];
var agario_proto_product_$update_Origin_$enum = function() { };
$hxClasses["agario.proto.product_update.Origin_enum"] = agario_proto_product_$update_Origin_$enum;
agario_proto_product_$update_Origin_$enum.__name__ = ["agario","proto","product_update","Origin_enum"];
var agario_proto_product_$update_Type_$enum = function() { };
$hxClasses["agario.proto.product_update.Type_enum"] = agario_proto_product_$update_Type_$enum;
agario_proto_product_$update_Type_$enum.__name__ = ["agario","proto","product_update","Type_enum"];
var agario_proto_realm_$upgrade_$request_Realm_$enum = function() { };
$hxClasses["agario.proto.realm_upgrade_request.Realm_enum"] = agario_proto_realm_$upgrade_$request_Realm_$enum;
agario_proto_realm_$upgrade_$request_Realm_$enum.__name__ = ["agario","proto","realm_upgrade_request","Realm_enum"];
var agario_proto_realm_$upgrade_$response_Realm_$enum = function() { };
$hxClasses["agario.proto.realm_upgrade_response.Realm_enum"] = agario_proto_realm_$upgrade_$response_Realm_$enum;
agario_proto_realm_$upgrade_$response_Realm_$enum.__name__ = ["agario","proto","realm_upgrade_response","Realm_enum"];
var agario_proto_req_Type_$enum = function() { };
$hxClasses["agario.proto.req.Type_enum"] = agario_proto_req_Type_$enum;
agario_proto_req_Type_$enum.__name__ = ["agario","proto","req","Type_enum"];
var agario_proto_soft_$purchase_$response_Result_$enum = function() { };
$hxClasses["agario.proto.soft_purchase_response.Result_enum"] = agario_proto_soft_$purchase_$response_Result_$enum;
agario_proto_soft_$purchase_$response_Result_$enum.__name__ = ["agario","proto","soft_purchase_response","Result_enum"];
var agario_proto_user_$data_$update_Type_$enum = function() { };
$hxClasses["agario.proto.user_data_update.Type_enum"] = agario_proto_user_$data_$update_Type_$enum;
agario_proto_user_$data_$update_Type_$enum.__name__ = ["agario","proto","user_data_update","Type_enum"];
var agario_proto_user_$setting_Key_$enum = function() { };
$hxClasses["agario.proto.user_setting.Key_enum"] = agario_proto_user_$setting_Key_$enum;
agario_proto_user_$setting_Key_$enum.__name__ = ["agario","proto","user_setting","Key_enum"];
var agario_proto_user_$setting_Type_$enum = function() { };
$hxClasses["agario.proto.user_setting.Type_enum"] = agario_proto_user_$setting_Type_$enum;
agario_proto_user_$setting_Type_$enum.__name__ = ["agario","proto","user_setting","Type_enum"];
var oaktree_ext_security_IAuthenticationService = function() { };
$hxClasses["oaktree.ext.security.IAuthenticationService"] = oaktree_ext_security_IAuthenticationService;
oaktree_ext_security_IAuthenticationService.__name__ = ["oaktree","ext","security","IAuthenticationService"];
oaktree_ext_security_IAuthenticationService.__interfaces__ = [openfl_events_IEventDispatcher,oaktree_ext_services_IService];
oaktree_ext_security_IAuthenticationService.prototype = {
	get_available: null
	,get_loggedIn: null
	,get_user: null
	,get_authToken: null
	,set_authToken: null
	,login: null
	,logout: null
	,__class__: oaktree_ext_security_IAuthenticationService
	,__properties__: {set_authToken:"set_authToken",get_authToken:"get_authToken",get_user:"get_user",get_loggedIn:"get_loggedIn",get_available:"get_available"}
};
var agario_security_AuthenticationService = function() {
	this._usedCache = false;
	this._loggedIn = false;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["agario.security.AuthenticationService"] = agario_security_AuthenticationService;
agario_security_AuthenticationService.__name__ = ["agario","security","AuthenticationService"];
agario_security_AuthenticationService.__interfaces__ = [oaktree_ext_security_IAuthenticationService];
agario_security_AuthenticationService.__super__ = openfl_events_EventDispatcher;
agario_security_AuthenticationService.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_available: function() {
		return true;
	}
	,_loggedIn: null
	,get_loggedIn: function() {
		if(this._serverModel != null && this._serverModel.status == oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED) return false;
		return this._loggedIn;
	}
	,_user: null
	,get_user: function() {
		return this._user;
	}
	,_authToken: null
	,get_authToken: function() {
		return this._authToken;
	}
	,set_authToken: function(value) {
		this._authToken = value;
		return this._authToken;
	}
	,_usedCache: null
	,_serverModel: null
	,create: function() {
	}
	,initialize: function() {
		this._serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
		this._serverModel.register(11,$bind(this,this.onServerMessage));
		this._serverModel.register(20,$bind(this,this.onServerDisconnect));
		this._serverModel.onConnect.add($bind(this,this.sendLoginMessage));
	}
	,onServerDisconnect: function(type,userData) {
		this._loggedIn = false;
		if(type == 20) {
			haxe_Log.trace("d / authenticationservice / " + "Got Server disconnect",{ fileName : "AuthenticationService.hx", lineNumber : 76, className : "agario.security.AuthenticationService", methodName : "onServerDisconnect"});
			var disconnectMessage = userData;
			if(disconnectMessage.get_reason() == 4) Core.services.gameui.doLogout();
		}
	}
	,onUpdate: function(type,userData) {
		this.onServerMessage(type,userData);
	}
	,onServerMessage: function(type,msg) {
		switch(type) {
		case 11:
			haxe_Log.trace("d / authenticationservice / " + "Got login response",{ fileName : "AuthenticationService.hx", lineNumber : 94, className : "agario.security.AuthenticationService", methodName : "onServerMessage"});
			var loginMsg;
			loginMsg = js_Boot.__cast(msg , agario_proto_Login_$response);
			this._loggedIn = true;
			Core.user.handleUserData(loginMsg);
			Core.get_events().dispatchEventWith(oaktree_core_events_UserEvent.USER_LOGGED);
			break;
		default:
			haxe_Log.trace("d / authenticationservice / " + "received message on serverMessage and not handled",{ fileName : "AuthenticationService.hx", lineNumber : 103, className : "agario.security.AuthenticationService", methodName : "onServerMessage"});
		}
	}
	,login: function() {
		this.sendLoginMessage();
	}
	,logout: function() {
		if(Core.user != null) {
			Core.user.destroy();
			Core.user = null;
		}
		Core.user = new agario_module_shop_models_GameUser("","");
		this._authToken = null;
		this._loggedIn = false;
		this._serverModel.disconnect();
		Core.services.gameui.closeShop();
		Core.services.shop.isShopAvailable = false;
	}
	,sendLoginMessage: function() {
		if(this._authToken == null || this._authToken == "" || this._authToken == "undefined") return;
		if(this._authToken == undefined) return;
		haxe_Log.trace("d / authenticationservice / " + ("login auth =" + this._authToken),{ fileName : "AuthenticationService.hx", lineNumber : 144, className : "agario.security.AuthenticationService", methodName : "sendLoginMessage"});
		var loginMessage = new agario_proto_Login_$request();
		loginMessage.set_authToken(this._authToken);
		loginMessage.set_device(new agario_proto_Device());
		if(Core.environment.authenticationProvider == agario_services_WebAuthProvider.Google) loginMessage.set_realm(3); else loginMessage.set_realm(2);
		var _g = Core.environment.platform;
		switch(_g[1]) {
		case 0:
			loginMessage.get_device().set_platform(3);
			break;
		case 1:
			loginMessage.get_device().set_platform(4);
			break;
		default:
			loginMessage.get_device().set_platform(5);
		}
		loginMessage.get_device().set_version(agario_models_VersionModel.VERSION);
		loginMessage.get_device().set_width(0);
		loginMessage.get_device().set_height(0);
		this._serverModel.sendMessage(10,loginMessage);
		haxe_Log.trace("d / authenticationservice / " + "Sending login message",{ fileName : "AuthenticationService.hx", lineNumber : 177, className : "agario.security.AuthenticationService", methodName : "sendLoginMessage"});
	}
	,__class__: agario_security_AuthenticationService
	,__properties__: {set_authToken:"set_authToken",get_authToken:"get_authToken",get_user:"get_user",get_loggedIn:"get_loggedIn",get_available:"get_available"}
});
var agario_services_ConfigurationService = function() {
	this._loadedConfig = "";
	this.isInitialized = false;
	this._assetsManifest = new haxe_ds_StringMap();
};
$hxClasses["agario.services.ConfigurationService"] = agario_services_ConfigurationService;
agario_services_ConfigurationService.__name__ = ["agario","services","ConfigurationService"];
agario_services_ConfigurationService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_ConfigurationService.setConfigID = function(pConfigID) {
	if(pConfigID != agario_services_ConfigurationService.configID) {
		agario_services_ConfigurationService.configID = pConfigID;
		Core.get_events().fire("config.id_updated",pConfigID);
	}
};
agario_services_ConfigurationService.prototype = {
	_assetsManifest: null
	,_config: null
	,currentConfig: null
	,isInitialized: null
	,_loadedConfig: null
	,create: function() {
	}
	,initialize: function() {
		Core.get_events().listen("config.id_updated",$bind(this,this.handleConfigurationIdUpdate));
	}
	,getLocalizationFile: function(pLangCode) {
		return this.getConfigUrl("" + pLangCode + "_text.json");
	}
	,getConfigUrl: function(id) {
		var localLocalConfig = agario_config_Configs.getProperty("load_local_configuration") == "true";
		if(localLocalConfig) return this.getRootUrl("config/" + agario_services_ConfigurationService.configID + "/" + id);
		var assetUrl = this.getAssetFromManifest(id);
		if(assetUrl == null) return agario_config_Configs.getProperty("config_url") + ("/" + agario_services_ConfigurationService.configID + "/" + id); else return agario_config_Configs.getProperty("config_url") + ("/" + assetUrl);
	}
	,getRootUrl: function(id) {
		if(Core.environment.get_isLocal()) {
			var prefix = window.ASSETS_ROOT;
			if(prefix == undefined) prefix = "";
			return "" + prefix + "mc/" + id;
		}
		return agario_config_Configs.getProperty("root_url") + ("mc/" + id);
	}
	,getAssetFromManifest: function(assetId) {
		if(this._assetsManifest.exists(assetId)) return this._assetsManifest.get(assetId).base + "/" + this._assetsManifest.get(assetId).id;
		return null;
	}
	,handleConfigurationIdUpdate: function(event) {
		var _g = this;
		var configToLoad = event.data;
		if(this._loadedConfig == agario_services_ConfigurationService.configID) {
			haxe_Log.trace("Not updating the configuration since they have the sameID",{ fileName : "ConfigurationService.hx", lineNumber : 122, className : "agario.services.ConfigurationService", methodName : "handleConfigurationIdUpdate"});
			return;
		}
		var gotConfiguration = this.loadConfiguration().then($bind(this,this.parseConfiguration)).pipe($bind(this,this.loadLocalizations)).then($bind(this,this.parseLocalization)).then($bind(this,this.loadAssetsManifest)).then(function(_) {
			_g._loadedConfig = configToLoad;
			return;
		}).catchError($bind(this,this.handleError));
	}
	,handleError: function(data) {
		haxe_Log.trace("Failed to load Configuration",{ fileName : "ConfigurationService.hx", lineNumber : 138, className : "agario.services.ConfigurationService", methodName : "handleError"});
		haxe_Log.trace("d / configurationservice / " + haxe_format_JsonPrinter.print(data,null,null),{ fileName : "ConfigurationService.hx", lineNumber : 139, className : "agario.services.ConfigurationService", methodName : "handleError"});
		throw new js__$Boot_HaxeError(data);
	}
	,loadConfiguration: function(data) {
		var defer = new promhx_deferred_DeferredPromise();
		var config_url = this.getConfigUrl("GameConfiguration.json");
		if(Core.environment.get_isLocal()) {
		}
		var configurationLoader = new assets_manager_loaders_TextLoader(config_url);
		configurationLoader.addEventListener("complete",function(e) {
			defer.resolve(configurationLoader.data);
		});
		configurationLoader.start();
		return defer.boundPromise;
	}
	,parseConfiguration: function(data) {
		var configurationModel;
		try {
			configurationModel = new agario_module_shop_models_ShopModel(new haxe_format_JsonParser(data).parseRec().gameConfig);
			this._config = configurationModel;
		} catch( msg ) {
			haxe_CallStack.lastException = msg;
			if (msg instanceof js__$Boot_HaxeError) msg = msg.val;
			if( js_Boot.__instanceof(msg,String) ) {
				haxe_Log.trace("Error parsing the configuration!",{ fileName : "ConfigurationService.hx", lineNumber : 174, className : "agario.services.ConfigurationService", methodName : "parseConfiguration"});
				return false;
			} else throw(msg);
		}
		this.isInitialized = true;
		Core.get_events().dispatchEventWith("ShopEvent::CONFIGURATION_LOADED",this._config);
		return true;
	}
	,loadLocalizations: function(_) {
		var defer = new promhx_deferred_DeferredPromise();
		var localization_url = this.getLocalizationFile(Core.user.selectedLanguage);
		if(Core.environment.get_isLocal()) {
		}
		var i18nloader = new assets_manager_loaders_TextLoader(localization_url);
		i18nloader.addEventListener("complete",function(e) {
			defer.resolve(i18nloader.data);
		});
		i18nloader.start();
		return defer.boundPromise;
	}
	,parseLocalization: function(text) {
		oaktree_ext_localization_I18n.init(new haxe_format_JsonParser(text).parseRec().texts);
		return true;
	}
	,loadAssetsManifest: function(_) {
		var _g = this;
		var config_url = this.getConfigUrl("checksums/_manifestBase.json");
		var manifestData;
		if(Core.environment.get_isLocal()) {
		}
		var manifestLoader = new assets_manager_loaders_TextLoader(config_url);
		manifestLoader.addEventListener("complete",function(e) {
			_g.loadManifest(haxe_Json.parse(manifestLoader.data));
		});
		manifestLoader.start();
		return false;
	}
	,loadManifest: function(data) {
		var manifest = new oaktree_objects_ManifestVO(data);
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			var _g2 = asset.type;
			switch(_g2) {
			case "atlas":
				var value = new oaktree_objects_AssetVO({ id : asset.texture, base : asset.base});
				this._assetsManifest.set(asset.texture,value);
				var value1 = new oaktree_objects_AssetVO({ id : asset.metafile, base : asset.base});
				this._assetsManifest.set(asset.metafile,value1);
				var atlasImage = this.getConfigUrl(asset.texture);
				var atlasInfo = this.getConfigUrl(asset.metafile);
				Core.get_assets().registerExternalAtlas(asset.id,atlasImage,atlasInfo);
				haxe_Log.trace("d / configurationservice / " + ("Registered atlas " + asset.id),{ fileName : "ConfigurationService.hx", lineNumber : 254, className : "agario.services.ConfigurationService", methodName : "loadManifest"});
				break;
			default:
			}
			this._assetsManifest.set(asset.id,asset);
		}
	}
	,get_currentConfig: function() {
		return this._config;
	}
	,__class__: agario_services_ConfigurationService
	,__properties__: {get_currentConfig:"get_currentConfig"}
};
var agario_services_EnvironmentService = function() {
};
$hxClasses["agario.services.EnvironmentService"] = agario_services_EnvironmentService;
agario_services_EnvironmentService.__name__ = ["agario","services","EnvironmentService"];
agario_services_EnvironmentService.prototype = {
	platform: null
	,authenticationProvider: null
	,webEnv: null
	,initialize: function() {
		this.webEnv = new agario_services_web_WebEnvironment();
		this.checkWebPlatform();
	}
	,checkWebPlatform: function() {
		if(this.webEnv.hasParameter("fb")) this.platform = agario_services_WebPlatform.Facebook; else if(this.webEnv.hasParameter("miniclip")) this.platform = agario_services_WebPlatform.Miniclip; else this.platform = agario_services_WebPlatform.Web;
	}
	,environment: null
	,get_environment: function() {
		if(agario_config_Configs.getProperty("env_local") != agario_config_Configs.NOT_FOUND) return agario_services_DeployEnv.Local;
		if(agario_config_Configs.getProperty("env_development") != agario_config_Configs.NOT_FOUND) return agario_services_DeployEnv.Development;
		if(agario_config_Configs.getProperty("env_staging") != agario_config_Configs.NOT_FOUND) return agario_services_DeployEnv.Staging;
		if(agario_config_Configs.getProperty("env_production") != agario_config_Configs.NOT_FOUND) return agario_services_DeployEnv.Live;
		return agario_services_DeployEnv.Local;
	}
	,isLocal: null
	,get_isLocal: function() {
		return this.get_environment() == agario_services_DeployEnv.Local;
	}
	,isInFacebook: null
	,get_isInFacebook: function() {
		return this.platform == agario_services_WebPlatform.Facebook;
	}
	,__class__: agario_services_EnvironmentService
	,__properties__: {get_isInFacebook:"get_isInFacebook",get_isLocal:"get_isLocal",get_environment:"get_environment"}
};
var agario_services_WebPlatform = $hxClasses["agario.services.WebPlatform"] = { __ename__ : true, __constructs__ : ["Facebook","Miniclip","Web","NonWeb"] };
agario_services_WebPlatform.Facebook = ["Facebook",0];
agario_services_WebPlatform.Facebook.toString = $estr;
agario_services_WebPlatform.Facebook.__enum__ = agario_services_WebPlatform;
agario_services_WebPlatform.Miniclip = ["Miniclip",1];
agario_services_WebPlatform.Miniclip.toString = $estr;
agario_services_WebPlatform.Miniclip.__enum__ = agario_services_WebPlatform;
agario_services_WebPlatform.Web = ["Web",2];
agario_services_WebPlatform.Web.toString = $estr;
agario_services_WebPlatform.Web.__enum__ = agario_services_WebPlatform;
agario_services_WebPlatform.NonWeb = ["NonWeb",3];
agario_services_WebPlatform.NonWeb.toString = $estr;
agario_services_WebPlatform.NonWeb.__enum__ = agario_services_WebPlatform;
var agario_services_WebAuthProvider = $hxClasses["agario.services.WebAuthProvider"] = { __ename__ : true, __constructs__ : ["Facebook","Google","Guest"] };
agario_services_WebAuthProvider.Facebook = ["Facebook",0];
agario_services_WebAuthProvider.Facebook.toString = $estr;
agario_services_WebAuthProvider.Facebook.__enum__ = agario_services_WebAuthProvider;
agario_services_WebAuthProvider.Google = ["Google",1];
agario_services_WebAuthProvider.Google.toString = $estr;
agario_services_WebAuthProvider.Google.__enum__ = agario_services_WebAuthProvider;
agario_services_WebAuthProvider.Guest = ["Guest",2];
agario_services_WebAuthProvider.Guest.toString = $estr;
agario_services_WebAuthProvider.Guest.__enum__ = agario_services_WebAuthProvider;
var agario_services_DeployEnv = $hxClasses["agario.services.DeployEnv"] = { __ename__ : true, __constructs__ : ["Local","Development","Staging","Live"] };
agario_services_DeployEnv.Local = ["Local",0];
agario_services_DeployEnv.Local.toString = $estr;
agario_services_DeployEnv.Local.__enum__ = agario_services_DeployEnv;
agario_services_DeployEnv.Development = ["Development",1];
agario_services_DeployEnv.Development.toString = $estr;
agario_services_DeployEnv.Development.__enum__ = agario_services_DeployEnv;
agario_services_DeployEnv.Staging = ["Staging",2];
agario_services_DeployEnv.Staging.toString = $estr;
agario_services_DeployEnv.Staging.__enum__ = agario_services_DeployEnv;
agario_services_DeployEnv.Live = ["Live",3];
agario_services_DeployEnv.Live.toString = $estr;
agario_services_DeployEnv.Live.__enum__ = agario_services_DeployEnv;
var oaktree_ext_services_IConfigurable = function() { };
$hxClasses["oaktree.ext.services.IConfigurable"] = oaktree_ext_services_IConfigurable;
oaktree_ext_services_IConfigurable.__name__ = ["oaktree","ext","services","IConfigurable"];
oaktree_ext_services_IConfigurable.prototype = {
	configure: null
	,__class__: oaktree_ext_services_IConfigurable
};
var agario_services_IPayment = function() { };
$hxClasses["agario.services.IPayment"] = agario_services_IPayment;
agario_services_IPayment.__name__ = ["agario","services","IPayment"];
agario_services_IPayment.__interfaces__ = [oaktree_ext_services_IService];
agario_services_IPayment.prototype = {
	buyProduct: null
	,getCurrencyCode: null
	,overrideCurrencyCode: null
	,__class__: agario_services_IPayment
};
var agario_services_FBPaymentService = function() {
	this.loginComplete = false;
	this.configurationLoaded = false;
	this.currency_code = "USD";
};
$hxClasses["agario.services.FBPaymentService"] = agario_services_FBPaymentService;
agario_services_FBPaymentService.__name__ = ["agario","services","FBPaymentService"];
agario_services_FBPaymentService.__interfaces__ = [oaktree_ext_services_IConfigurable,agario_services_IPayment];
agario_services_FBPaymentService.prototype = {
	payment_endpoint: null
	,exchange_rate: null
	,original_currency_code: null
	,currency_code: null
	,_models: null
	,_authModel: null
	,configurationLoaded: null
	,loginComplete: null
	,create: function() {
	}
	,initialize: function() {
		haxe_Log.trace("d / fbpaymentservice / " + "Initialized",{ fileName : "FBPaymentService.hx", lineNumber : 45, className : "agario.services.FBPaymentService", methodName : "initialize"});
		this._models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
		this._models.onConfigurationLoaded.add($bind(this,this.onConfigurationLoaded));
		this._authModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_security_IAuthenticationService);
		Core.get_events().addEventListener(oaktree_core_events_UserEvent.USER_LOGGED,$bind(this,this.onLoginSuccess));
	}
	,configure: function(config) {
		this.payment_endpoint = config.endpoint;
	}
	,onConfigurationLoaded: function() {
		this.configurationLoaded = true;
		this.fetchExchangeRate();
	}
	,onLoginSuccess: function(e) {
		this.loginComplete = true;
		this.fetchExchangeRate();
	}
	,getCurrencyCode: function() {
		return this.currency_code;
	}
	,overrideCurrencyCode: function(code) {
		this.currency_code = code;
		return code;
	}
	,buyProduct: function(userId,productId,currency_code) {
		var buyOptions = { method : "pay", action : "purchaseItem", product : "" + this.payment_endpoint + "?purchase_id=" + productId, quantity : 1};
		FB.ui(buyOptions,$bind(this,this.handleBuyProduct));
		Core.get_states().enable("state_xsolla_iframe");
	}
	,handleBuyProduct: function(response) {
		Core.get_states().disable("state_xsolla_iframe");
	}
	,fetchExchangeRate: function() {
		if(!this.configurationLoaded || !this.loginComplete) return;
		var callbackMethod = $bind(this,this.handleExchangeResponse);
		FB.api("/me/?fields=currency",callbackMethod);
	}
	,handleExchangeResponse: function(response) {
		if(response != null && response.currency != null) {
			var exchange = new agario_module_shop_models_vo_ExchangeRateVO(response.currency);
			this.currency_code = this.original_currency_code = exchange.user_currency;
			this.exchange_rate = exchange;
			this._models.refreshShopItems();
		} else haxe_Log.trace("d / fbpaymentservice / " + "Failed to set exchangeRate",{ fileName : "FBPaymentService.hx", lineNumber : 125, className : "agario.services.FBPaymentService", methodName : "handleExchangeResponse"});
		Core.get_events().dispatchEventWith("payment_event::got_currency_code");
	}
	,__class__: agario_services_FBPaymentService
};
var oaktree_ext_networking_IServer = function() { };
$hxClasses["oaktree.ext.networking.IServer"] = oaktree_ext_networking_IServer;
oaktree_ext_networking_IServer.__name__ = ["oaktree","ext","networking","IServer"];
oaktree_ext_networking_IServer.__interfaces__ = [oaktree_ext_services_IService];
oaktree_ext_networking_IServer.prototype = {
	status: null
	,onConnect: null
	,onDisconnect: null
	,connect: null
	,disconnect: null
	,sendMessage: null
	,register: null
	,unregister: null
	,isConnected: null
	,__class__: oaktree_ext_networking_IServer
};
var agario_services_GameServerService = function() {
	this.disconnectedByRequest = false;
	this.pingQueueSize = 10;
	this.pingInterval = 30;
};
$hxClasses["agario.services.GameServerService"] = agario_services_GameServerService;
agario_services_GameServerService.__name__ = ["agario","services","GameServerService"];
agario_services_GameServerService.__interfaces__ = [oaktree_ext_services_IConfigurable,oaktree_ext_networking_IServer];
agario_services_GameServerService.encapsulateMessage = function(messageType,data) {
	var request = new agario_proto_Req();
	request.set_type(messageType);
	var _g = request.get_type();
	switch(_g) {
	case 30:
		request.set_pingField(js_Boot.__cast(data , agario_proto_Ping));
		break;
	case 31:
		request.set_pongField(js_Boot.__cast(data , agario_proto_Pong));
		break;
	case 70:
		request.set_softPurchaseRequestField(js_Boot.__cast(data , agario_proto_Soft_$purchase_$request));
		haxe_Log.trace("d / gameserverservice / " + "sending soft_purchase_request",{ fileName : "GameServerService.hx", lineNumber : 192, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
		break;
	case 20:
		request.set_disconnectField(js_Boot.__cast(data , agario_proto_Disconnect));
		haxe_Log.trace("d / gameserverservice / " + "sending disconnect",{ fileName : "GameServerService.hx", lineNumber : 195, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
		break;
	case 10:
		request.set_loginRequestField(js_Boot.__cast(data , agario_proto_Login_$request));
		break;
	case 80:
		haxe_Log.trace("d / gameserverservice / " + "sending update_user_settings",{ fileName : "GameServerService.hx", lineNumber : 199, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
		request.set_updateUserSettingsRequestField(js_Boot.__cast(data , agario_proto_Update_$user_$settings_$request));
		break;
	case 42:
		haxe_Log.trace("d / gameserverservice / " + "sending activate_boost_request",{ fileName : "GameServerService.hx", lineNumber : 202, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
		request.set_activateBoostRequestField(js_Boot.__cast(data , agario_proto_Activate_$boost_$request));
		break;
	case 62:
		request.set_gameOverField(js_Boot.__cast(data , agario_proto_Game_$over));
		break;
	case 75:
		haxe_Log.trace("d / gameserverservice / " + "sending Activate_timed_event_request",{ fileName : "GameServerService.hx", lineNumber : 207, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
		request.set_activateTimedEventRequestField(js_Boot.__cast(data , agario_proto_Activate_$timed_$event_$request));
		break;
	default:
		haxe_Log.trace("d / gameserverservice / " + ("Trying to send message of unknown type: " + request.get_type()),{ fileName : "GameServerService.hx", lineNumber : 210, className : "agario.services.GameServerService", methodName : "encapsulateMessage"});
	}
	return agario_services_GameServerService.packageMessage(request);
};
agario_services_GameServerService.packageMessage = function(request) {
	var e = new agario_proto_Envelope();
	e.set_type(1);
	e.set_uncompressedData(request);
	return e;
};
agario_services_GameServerService.prototype = {
	status: null
	,onConnect: null
	,onDisconnect: null
	,uri: null
	,pingInterval: null
	,pingQueueSize: null
	,_pingModel: null
	,messageMapping: null
	,disconnectedByRequest: null
	,pingEnabled: null
	,set_pingEnabled: function(value) {
		if(value != this.pingEnabled && this._pingModel != null) {
			if(value) this._pingModel.start(); else this._pingModel.stop();
			this.pingEnabled = value;
		}
		return value;
	}
	,create: function() {
		haxe_Log.trace("d / gameserverservice / " + "Construct GameServerModel",{ fileName : "GameServerService.hx", lineNumber : 80, className : "agario.services.GameServerService", methodName : "create"});
		this.onConnect = new msignal_Signal0();
		this.onDisconnect = new msignal_Signal1();
		this.messageMapping = new haxe_ds_IntMap();
	}
	,initialize: function() {
		this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED;
		this._pingModel = new agario_services_KeepAlive(this.pingInterval,this.pingQueueSize);
		this.onConnect.add($bind(this,this.handleConnect));
		this.onDisconnect.add($bind(this,this.handleDisconnect));
		var dataManager = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
		dataManager.onConfigurationLoaded.addOnce($bind(this,this.onConfigurationLoaded));
	}
	,configure: function(config) {
		if(config.pingInterval == null) config.pingInterval = 30;
		config.pingInterval;
		this.pingInterval = config.pingInterval;
	}
	,onConfigurationLoaded: function() {
		var commSettings = Core.models.defaultCommunicationSettings;
		if(commSettings != null && (__map_reserved.tcpPingInterval != null?commSettings.existsReserved("tcpPingInterval"):commSettings.h.hasOwnProperty("tcpPingInterval"))) {
			var newPingValue = Std.parseInt(__map_reserved.tcpPingInterval != null?commSettings.getReserved("tcpPingInterval"):commSettings.h["tcpPingInterval"]);
			if(newPingValue > 5) {
				haxe_Log.trace("d / gameserverservice / " + ("Setting ping value to " + newPingValue),{ fileName : "GameServerService.hx", lineNumber : 115, className : "agario.services.GameServerService", methodName : "onConfigurationLoaded"});
				this.pingInterval = newPingValue;
				this._pingModel.pingInterval = newPingValue;
			}
		}
	}
	,handleDisconnect: function(pByRequest) {
		haxe_Log.trace("d / gameserverservice / " + "closed!",{ fileName : "GameServerService.hx", lineNumber : 125, className : "agario.services.GameServerService", methodName : "handleDisconnect"});
		this.set_pingEnabled(false);
		this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED;
		this.disconnectedByRequest = false;
		Core.get_events().dispatchEventWith("ShopEvent::connectionLost");
	}
	,handleConnect: function() {
		this.set_pingEnabled(true);
		this.status = oaktree_ext_networking_ServerConnectionStatus.CONNECTED;
	}
	,connect: function(host,force) {
		if(force == null) force = false;
	}
	,disconnect: function() {
		if(this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED || this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTING) {
			this.disconnectedByRequest = true;
			this.status = oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED;
		}
	}
	,sendMessage: function(messageType,data) {
		var message = agario_services_GameServerService.encapsulateMessage(messageType,data);
		var bytes = new haxe_io_BytesOutput();
		message.writeTo(bytes);
		var dataInByteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes.getBytes());
		var dataInArrayBuffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(dataInByteArray);
		var byteData = dataInArrayBuffer['bytes'];
		if (window.core) window.core.proxyMobileData(byteData);
	}
	,register: function(messageType,handler) {
		var callbacks;
		if(this.messageMapping.h.hasOwnProperty(messageType)) callbacks = this.messageMapping.h[messageType]; else {
			callbacks = [];
			this.messageMapping.h[messageType] = callbacks;
		}
		var _g = 0;
		while(_g < callbacks.length) {
			var temporaryHandler = callbacks[_g];
			++_g;
			if(temporaryHandler == handler) {
				haxe_Log.trace("d / gameserverservice / " + "handler is already registered",{ fileName : "GameServerService.hx", lineNumber : 249, className : "agario.services.GameServerService", methodName : "register"});
				return false;
			}
		}
		callbacks.push(handler);
		return true;
	}
	,unregister: function(messageType,handler) {
		if(this.messageMapping.h.hasOwnProperty(messageType)) {
			var _this = this.messageMapping.h[messageType];
			return HxOverrides.remove(_this,handler);
		}
		return false;
	}
	,injectPacket: function(msg) {
		this.deliverRequest(this.parseInboxPacket(msg),true);
	}
	,handleSocketData: function(t) {
		this.deliverRequest(this.parseInboxPacket(t),false);
	}
	,parseInboxPacket: function(t) {
		var bytesReceived = t;
		var req = null;
		try {
			var env = new agario_proto_Envelope();
			env.mergeFrom(t);
			if(env.get_type() == 1) req = env.get_uncompressedData(); else {
				req = new agario_proto_Req();
				var bytes = haxe_zip_Uncompress.run(env.get_compressedData());
				req.mergeFrom(bytes);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("Got invalid message from server",{ fileName : "GameServerService.hx", lineNumber : 302, className : "agario.services.GameServerService", methodName : "parseInboxPacket"});
			haxe_Log.trace("d / gameserverservice / " + Std.string(e),{ fileName : "GameServerService.hx", lineNumber : 303, className : "agario.services.GameServerService", methodName : "parseInboxPacket"});
		}
		if(req == null) haxe_Log.trace("d / gameserverservice / " + "Got an invalid Req",{ fileName : "GameServerService.hx", lineNumber : 307, className : "agario.services.GameServerService", methodName : "parseInboxPacket"});
		return req;
	}
	,deliverRequest: function(pRequest,injected) {
		if(injected == null) injected = false;
		if(pRequest == null) return;
		if(!injected) haxe_Log.trace("d / gameserverservice / " + "Received message without being ejected!",{ fileName : "GameServerService.hx", lineNumber : 318, className : "agario.services.GameServerService", methodName : "deliverRequest"});
		if((function($this) {
			var $r;
			var key = pRequest.get_type();
			$r = $this.messageMapping.h.hasOwnProperty(key);
			return $r;
		}(this))) {
			var m = this.unpackageMessage(pRequest);
			var _g = 0;
			var _g1;
			var key1 = pRequest.get_type();
			_g1 = this.messageMapping.h[key1];
			while(_g < _g1.length) {
				var callback = _g1[_g];
				++_g;
				callback(pRequest.get_type(),m);
			}
		} else haxe_Log.trace("d / gameserverservice / " + ("Message with type " + pRequest.get_type() + " not handled!"),{ fileName : "GameServerService.hx", lineNumber : 333, className : "agario.services.GameServerService", methodName : "deliverRequest"});
	}
	,unpackageMessage: function(r) {
		var returnMessage = new protohx_Message();
		var _g = r.get_type();
		switch(_g) {
		case 30:
			returnMessage = r.get_pingField();
			break;
		case 31:
			returnMessage = r.get_pongField();
			break;
		case 71:
			returnMessage = r.get_softPurchaseResponseField();
			break;
		case 74:
			returnMessage = r.get_inappPurchaseResponseField();
			break;
		case 20:
			returnMessage = r.get_disconnectField();
			break;
		case 43:
			returnMessage = r.get_activateBoostResponseField();
			break;
		case 11:
			returnMessage = r.get_loginResponseField();
			break;
		case 10:
			returnMessage = r.get_loginRequestField();
			break;
		case 81:
			returnMessage = r.get_updateUserSettingsResponseField();
			break;
		case 76:
			returnMessage = r.get_activateTimedEventResponseField();
			break;
		case 78:
			returnMessage = r.get_purchaseWalletUpdatesField();
			break;
		case 62:
			returnMessage = r.get_gameOverField();
			break;
		case 77:
			returnMessage = r.get_walletUpdatesField();
			break;
		default:
			haxe_Log.trace("d / gameserverservice / " + ("Trying to unpackage message of unknown type: " + r.get_type()),{ fileName : "GameServerService.hx", lineNumber : 380, className : "agario.services.GameServerService", methodName : "unpackageMessage"});
		}
		return returnMessage;
	}
	,isConnected: function() {
		return this.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED;
	}
	,__class__: agario_services_GameServerService
	,__properties__: {set_pingEnabled:"set_pingEnabled"}
};
var agario_services_GamepadControllerService = function() {
};
$hxClasses["agario.services.GamepadControllerService"] = agario_services_GamepadControllerService;
agario_services_GamepadControllerService.__name__ = ["agario","services","GamepadControllerService"];
agario_services_GamepadControllerService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_GamepadControllerService.prototype = {
	gamepadAxisUpdate: null
	,sendMitosisCallback: null
	,ejectMassCallback: null
	,create: function() {
	}
	,initialize: function() {
		haxe_Log.trace("d / gamepadcontrollerservice / " + "initialized",{ fileName : "GamepadControllerService.hx", lineNumber : 30, className : "agario.services.GamepadControllerService", methodName : "initialize"});
		lime_ui_Gamepad.onConnect.add($bind(this,this.onConnect));
	}
	,onConnect: function(gamepad) {
		haxe_Log.trace("new gamepad connected: " + gamepad.id,{ fileName : "GamepadControllerService.hx", lineNumber : 36, className : "agario.services.GamepadControllerService", methodName : "onConnect"});
		Core.services.gameui.showGamepadConnected();
		gamepad.onDisconnect.add($bind(this,this.onDisconnect));
		gamepad.onButtonDown.add($bind(this,this.onButtonDown));
		gamepad.onButtonUp.add($bind(this,this.onButtonUp));
		gamepad.onAxisMove.add($bind(this,this.onAxisMove));
	}
	,onAxisMove: function(axis,value) {
		if(this.gamepadAxisUpdate != null) this.gamepadAxisUpdate(axis,value);
	}
	,onButtonDown: function(button) {
		if(button == 0 && this.sendMitosisCallback != null) this.sendMitosisCallback();
		if(button == 1 && this.ejectMassCallback != null) this.ejectMassCallback();
	}
	,onButtonUp: function(button) {
		haxe_Log.trace("button released:" + (function($this) {
			var $r;
			switch(button) {
			case 0:
				$r = "A";
				break;
			case 1:
				$r = "B";
				break;
			case 2:
				$r = "X";
				break;
			case 3:
				$r = "Y";
				break;
			case 4:
				$r = "BACK";
				break;
			case 5:
				$r = "GUIDE";
				break;
			case 6:
				$r = "START";
				break;
			case 7:
				$r = "LEFT_STICK";
				break;
			case 8:
				$r = "RIGHT_STICK";
				break;
			case 9:
				$r = "LEFT_SHOULDER";
				break;
			case 10:
				$r = "RIGHT_SHOULDER";
				break;
			case 11:
				$r = "DPAD_UP";
				break;
			case 12:
				$r = "DPAD_DOWN";
				break;
			case 13:
				$r = "DPAD_LEFT";
				break;
			case 14:
				$r = "DPAD_RIGHT";
				break;
			default:
				$r = "UNKNOWN (" + button + ")";
			}
			return $r;
		}(this)),{ fileName : "GamepadControllerService.hx", lineNumber : 68, className : "agario.services.GamepadControllerService", methodName : "onButtonUp"});
	}
	,onDisconnect: function() {
		Core.services.gameui.showGamepadDisconnected();
		haxe_Log.trace("gamepad disconnected",{ fileName : "GamepadControllerService.hx", lineNumber : 75, className : "agario.services.GamepadControllerService", methodName : "onDisconnect"});
	}
	,__class__: agario_services_GamepadControllerService
};
var agario_services_PaymentEvent = function() { };
$hxClasses["agario.services.PaymentEvent"] = agario_services_PaymentEvent;
agario_services_PaymentEvent.__name__ = ["agario","services","PaymentEvent"];
var agario_services_KeepAlive = function(pingInterval,pingQueueSize) {
	this.latestPing = -1;
	this.pingId = 0;
	this.pingQueueSize = 10;
	this.pingInterval = 30;
	this.pingInterval = pingInterval;
	this.pingQueueSize = pingQueueSize;
	this._server = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
	this._server.register(31,$bind(this,this.onPongMessage));
};
$hxClasses["agario.services.KeepAlive"] = agario_services_KeepAlive;
agario_services_KeepAlive.__name__ = ["agario","services","KeepAlive"];
agario_services_KeepAlive.prototype = {
	pingInterval: null
	,pingQueueSize: null
	,pingQueue: null
	,pingId: null
	,pingTimer: null
	,first: null
	,latestPing: null
	,_server: null
	,start: function() {
		this.first = true;
		this.pingQueue = new haxe_ds_IntMap();
		this.pingTimer = new haxe_Timer(this.pingInterval * 1000);
		this.pingTimer.run = $bind(this,this.doPing);
		oaktree_debug_MetricsManager.addMetric("ping","Ping");
		oaktree_debug_MetricsManager.setMetricValue("ping",0);
	}
	,stop: function() {
		if(this.pingTimer != null) this.pingTimer.stop();
		oaktree_debug_MetricsManager.removeMetric("ping");
	}
	,onPongMessage: function(type,userData) {
		if(type == 31) this.onPong(js_Boot.__cast(userData , agario_proto_Pong));
	}
	,nextId: function(id) {
		return (id + 1) % this.pingQueueSize;
	}
	,previousId: function(id) {
		if(id > 0) return id - 1; else return this.pingQueueSize - 1;
	}
	,getPreviousPingRoundtrip: function() {
		var idx = this.pingId;
		while(true) {
			if(idx > 0) idx = idx - 1; else idx = this.pingQueueSize - 1;
			if(this.pingQueue.h.hasOwnProperty(idx)) {
				if((function($this) {
					var $r;
					var a = $this.pingQueue.h[idx].roundtrip;
					$r = a != null;
					return $r;
				}(this))) return this.pingQueue.h[idx].roundtrip;
			}
			if(idx == this.pingId) return null;
		}
	}
	,doPing: function() {
		var pingMessage = new agario_proto_Ping();
		pingMessage.set_id((this.pingId + 1) % this.pingQueueSize);
		this.pingId = (this.pingId + 1) % this.pingQueueSize;
		var roundTrip = this.getPreviousPingRoundtrip();
		if(!this.first && roundTrip != null) pingMessage.set_previousRoundtrip(roundTrip); else this.first = false;
		var key = pingMessage.get_id();
		var value = { id : pingMessage.get_id(), sent : openfl_Lib.getTimer(), roundtrip : null};
		this.pingQueue.h[key] = value;
		this._server.sendMessage(30,pingMessage);
	}
	,onPong: function(message) {
		if((function($this) {
			var $r;
			var key = message.get_pingId();
			$r = $this.pingQueue.h.hasOwnProperty(key);
			return $r;
		}(this))) {
			var roundTrip;
			roundTrip = openfl_Lib.getTimer() - ((function($this) {
				var $r;
				var key1 = message.get_pingId();
				$r = $this.pingQueue.h[key1];
				return $r;
			}(this))).sent;
			((function($this) {
				var $r;
				var key2 = message.get_pingId();
				$r = $this.pingQueue.h[key2];
				return $r;
			}(this))).roundtrip = roundTrip;
			oaktree_debug_MetricsManager.setMetricValue("ping",oaktree_utils_Maths.fixed(_$UInt_UInt_$Impl_$.toFloat(roundTrip),3));
		}
	}
	,__class__: agario_services_KeepAlive
};
var agario_services_ServicesManager = function() {
	this.initialize();
};
$hxClasses["agario.services.ServicesManager"] = agario_services_ServicesManager;
agario_services_ServicesManager.__name__ = ["agario","services","ServicesManager"];
agario_services_ServicesManager.prototype = {
	shop: null
	,gameui: null
	,config: null
	,view: null
	,initialize: function() {
		this.gameui = new agario_services_gameui_backend_js_GameUIService();
		this.shop = oaktree_ext_services_ServiceManager.getService(agario_services_ShopService);
		this.config = oaktree_ext_services_ServiceManager.getService(agario_services_ConfigurationService);
		this.view = oaktree_ext_services_ServiceManager.getService(agario_services_ViewService);
	}
	,__class__: agario_services_ServicesManager
};
var agario_services_ShopService = function() {
	this.isOpen = false;
	this.isShopAvailable = false;
	this.shouldShowUseInfo = true;
};
$hxClasses["agario.services.ShopService"] = agario_services_ShopService;
agario_services_ShopService.__name__ = ["agario","services","ShopService"];
agario_services_ShopService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_ShopService.prototype = {
	_gameServer: null
	,_payModel: null
	,shouldShowUseInfo: null
	,onSoftPurchaseResponse: null
	,onUseResponse: null
	,onIAPComplete: null
	,onLocalizationInit: null
	,S_notEnoughCoins: null
	,playerInfoData: null
	,isShopAvailable: null
	,isOpen: null
	,create: function() {
		this.onSoftPurchaseResponse = new msignal_Signal1();
		this.onUseResponse = new msignal_Signal1();
		this.S_notEnoughCoins = new msignal_Signal0();
		this.onIAPComplete = new msignal_Signal1();
		this.onLocalizationInit = new msignal_Signal0();
		Core.get_events().addEventListener("ShopEvent::BUY",$bind(this,this.makePurchase));
		Core.get_events().addEventListener("ShopEvent::USE",$bind(this,this.useItem));
		Core.get_events().addEventListener("ShopEvent::UNEQUIP",$bind(this,this.unequipSkin));
	}
	,initialize: function() {
		this._payModel = oaktree_ext_services_ServiceManager.getService(agario_services_IPayment);
		this._gameServer = oaktree_ext_services_ServiceManager.getService(agario_services_GameServerService);
		this._gameServer.register(71,$bind(this,this.handleMessage));
		this._gameServer.register(43,$bind(this,this.handleMessage));
		this._gameServer.register(78,$bind(this,this.handleMessage));
		this._gameServer.register(77,$bind(this,this.handleMessage));
		this._gameServer.onConnect.add($bind(this,this.handleConnectionOpen));
		this._gameServer.onDisconnect.add($bind(this,this.handleConnectionClosed));
		Core.get_events().listen(oaktree_core_events_UserEvent.USER_LOGGED,$bind(this,this.onUserLogin));
		Core.get_events().listen("ShopEvent::CONFIGURATION_LOADED",$bind(this,this.onConfigurationLoaded));
	}
	,onUserLogin: function() {
		Core.views.closeAllViews();
		Core.user.isConnecting = false;
		haxe_Log.trace("d / shopservice / " + ("onUserLogin: Core.user.loggedIn: " + Std.string(Core.user.loggedIn)),{ fileName : "ShopService.hx", lineNumber : 102, className : "agario.services.ShopService", methodName : "onUserLogin"});
		if(!Core.user.loggedIn) return;
		this.isShopAvailable = true;
		if(Core.user.userSettings == null || Core.user.userSettings.length == 0) this.setDefaultSkin();
		Core.services.gameui.setUserCoins(Core.user.get_coins());
		Core.services.gameui.setMobileUser(Core.user.userInfo.hasLoggedIntoMobile);
		this.checkUserGifts();
	}
	,checkUserGifts: function() {
		var fbService = new oaktree_ext_social_fb_FBService();
		if(Core.environment.webEnv.getParameter("request_ids") != null) Core.get_events().dispatchEventWith("shop_event::showGiftUnavailable");
		return;
	}
	,onAppRequestError: function(e) {
		haxe_Log.trace(e,{ fileName : "ShopService.hx", lineNumber : 142, className : "agario.services.ShopService", methodName : "onAppRequestError"});
	}
	,onAppRequests: function(requestsData) {
		haxe_Log.trace("d / shopservice / " + haxe_format_JsonPrinter.print(requestsData,null,null),{ fileName : "ShopService.hx", lineNumber : 147, className : "agario.services.ShopService", methodName : "onAppRequests"});
		if(requestsData.gifts.length > 0) Core.get_events().dispatchEventWith("shop_event::showGiftUnavailable");
	}
	,onConfigurationLoaded: function(e) {
		Core.get_events().unlisten("ShopEvent::CONFIGURATION_LOADED",$bind(this,this.onConfigurationLoaded));
		this.checkIfShopCanBeShown();
	}
	,checkIfShopCanBeShown: function() {
		var isConfigInitialized = Core.services.config.isInitialized;
		var isConnectionInitialized = this._gameServer.status == oaktree_ext_networking_ServerConnectionStatus.CONNECTED;
		var hasLoginIntent = Core.services.gameui.hasLoginIntent();
		if(!isConfigInitialized || !isConnectionInitialized) return;
		if(!hasLoginIntent) Core.services.gameui.enableShop();
	}
	,handleConnectionOpen: function() {
		this.checkIfShopCanBeShown();
	}
	,handleConnectionClosed: function(byRequest) {
		this.isShopAvailable = false;
		Core.user.isConnecting = true;
		Core.services.gameui.disableShop();
		if(this.isOpen) Core.get_events().dispatchEventWith("ShopEvent::connectionLost");
	}
	,handleMessage: function(t,m) {
		switch(t) {
		case 71:
			this.shouldShowUseInfo = false;
			haxe_Log.trace("d / shopservice / " + "received soft_purchase_response",{ fileName : "ShopService.hx", lineNumber : 208, className : "agario.services.ShopService", methodName : "handleMessage"});
			this.onSoftPurchaseResponse.dispatch(js_Boot.__cast(m , agario_proto_Soft_$purchase_$response));
			break;
		case 43:
			haxe_Log.trace("d / shopservice / " + "received activate_boost_response",{ fileName : "ShopService.hx", lineNumber : 211, className : "agario.services.ShopService", methodName : "handleMessage"});
			this.handleUserBoostUpdate(js_Boot.__cast(m , agario_proto_Activate_$boost_$response));
			break;
		case 78:
			haxe_Log.trace("d / shopservice / " + "received purchase_wallet_updates",{ fileName : "ShopService.hx", lineNumber : 214, className : "agario.services.ShopService", methodName : "handleMessage"});
			this.handlePurchaseWalletUpdates(js_Boot.__cast(m , agario_proto_Purchase_$wallet_$updates));
			break;
		case 77:
			haxe_Log.trace("d / shopservice / " + "received wallet_updates",{ fileName : "ShopService.hx", lineNumber : 217, className : "agario.services.ShopService", methodName : "handleMessage"});
			this.handleWalletUpdate(js_Boot.__cast(m , agario_proto_Wallet_$updates));
			break;
		default:
			haxe_Log.trace("d / shopservice / " + ("Message with type " + t + " not being handled."),{ fileName : "ShopService.hx", lineNumber : 220, className : "agario.services.ShopService", methodName : "handleMessage"});
		}
	}
	,handleWalletUpdate: function(updates) {
		haxe_Log.trace("d / shopservice / " + ("Received wallet update with: " + updates.get_originPlatform()),{ fileName : "ShopService.hx", lineNumber : 226, className : "agario.services.ShopService", methodName : "handleWalletUpdate"});
		Core.user.handleUserUpdates(updates.get_productUpdates());
	}
	,handlePurchaseWalletUpdates: function(purchaseWalletUpdates) {
		var purchaseId = purchaseWalletUpdates.get_purchaseId();
		var walletUpdates = purchaseWalletUpdates.get_walletUpdates();
		var productUpdates = walletUpdates.get_productUpdates();
		if(productUpdates.length <= 0) return;
		this.onIAPComplete.dispatch(purchaseId);
		Core.user.handleUserUpdates(productUpdates);
	}
	,makeInAppPurchase: function(purchaseId) {
		this._payModel.buyProduct(Core.user.id,purchaseId,this._payModel.getCurrencyCode());
	}
	,activateTimedEvent: function(eventId) {
		var req = new agario_proto_Activate_$timed_$event_$request();
		req.set_eventId(eventId);
		this._gameServer.sendMessage(75,req);
	}
	,makeSoftPurchase: function(purchaseId) {
		haxe_Log.trace("d / shopservice / " + "Make soft purchase!",{ fileName : "ShopService.hx", lineNumber : 260, className : "agario.services.ShopService", methodName : "makeSoftPurchase"});
		if(Core.models.shopItems.getItemByPurchaseId(purchaseId).price > Core.user.get_coins()) this.S_notEnoughCoins.dispatch(); else {
			var purchaseRequest = new agario_proto_Soft_$purchase_$request();
			purchaseRequest.set_purchaseId(purchaseId);
			haxe_Log.trace("d / shopservice / " + "send Purchase Message",{ fileName : "ShopService.hx", lineNumber : 271, className : "agario.services.ShopService", methodName : "makeSoftPurchase"});
			this._gameServer.sendMessage(70,purchaseRequest);
		}
	}
	,makePurchase: function(e) {
		if(Core.user.isGuest) {
			Core.get_events().fire("ShopEvent::show_guest_conversion");
			return;
		}
		haxe_Log.trace("d / shopservice / " + "Make Purchase...",{ fileName : "ShopService.hx", lineNumber : 284, className : "agario.services.ShopService", methodName : "makePurchase"});
		var itemId = e.data;
		var shopItem = Core.models.shopItems.getItemByPurchaseId(itemId);
		if(shopItem.type == agario_module_shop_models_types_ShopItemType.INAPP) this.makeInAppPurchase(itemId); else {
			this.makeSoftPurchase(itemId);
			if(shopItem.price > Core.user.get_coins()) return;
			var purchaseConfirmationDlg = new agario_module_shop_view_PurchaseCompleteDialog();
			Core.views.openView(purchaseConfirmationDlg,{ animate : true, allowClickClose : false, callerView : MiniclipAPI.instance.shopDialog});
			Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		}
	}
	,useItem: function(e) {
		var item = e.data;
		if(js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopSkinItemVO)) {
			this.setSkin((js_Boot.__cast(item , agario_module_shop_models_vo_ShopSkinItemVO)).productIdToQuantify);
			var _g = 0;
			var _g1 = Core.models.shopSkinsModel.skinList;
			while(_g < _g1.length) {
				var skin = _g1[_g];
				++_g;
				skin.set_inUse(false);
			}
			item.set_inUse(true);
			this.shouldShowUseInfo = false;
		} else if(js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopBoostItemVO)) {
			var req = new agario_proto_Activate_$boost_$request();
			req.set_productId((js_Boot.__cast(item , agario_module_shop_models_vo_ShopBoostItemVO)).gameplayInfo.productId);
			this._gameServer.sendMessage(42,req);
		}
		if(this.shouldShowUseInfo) {
			var dialog = new agario_module_shop_view_ProductUseDialog("0");
			Core.views.openView(dialog,{ animate : true, allowClickClose : false, callerView : MiniclipAPI.instance.shopDialog});
			Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		}
		this.shouldShowUseInfo = true;
	}
	,unequipSkin: function(e) {
		this.setDefaultSkin();
	}
	,setDefaultSkin: function() {
		if(Core.models.defaultSettings.settingList != null && Core.user.defaultSkin == "") Core.user.defaultSkin = Core.models.defaultSettings.getSettingByKey("skinUnequippedTag");
		this.setSkin(Core.user.defaultSkin);
	}
	,setSkin: function(value) {
		var updateSettings = new agario_proto_Update_$user_$settings_$request();
		var skinSetting = new agario_proto_User_$setting();
		skinSetting.set_valueString(value);
		skinSetting.set_type(1);
		skinSetting.set_key(1);
		updateSettings.get_userSettingsUpdates().push(skinSetting);
		this._gameServer.sendMessage(80,updateSettings);
		Core.models.shopItems.setSkinUse(value);
		var selectedSkin = Core.models.shopSkinsModel.getItemById(value);
		if(value != Core.user.defaultSkin && selectedSkin != null) {
			var skinLocation = selectedSkin.gamePlayInfo.get_shopImage();
			Core.services.gameui.setUserSkin(skinLocation,selectedSkin.gamePlayInfo.get_cellColor(),selectedSkin.tab);
		} else Core.services.gameui.setUserSkin(Core.user.defaultSkin);
		Core.views.updateViews();
	}
	,handleUserBoostUpdate: function(response) {
		haxe_Log.trace("d / shopservice / " + haxe_format_JsonPrinter.print(response,null,null),{ fileName : "ShopService.hx", lineNumber : 394, className : "agario.services.ShopService", methodName : "handleUserBoostUpdate"});
		var isCategoryInUse = false;
		Core.user.evaluateWallet();
		if(response.get_userBoostItem().get_productId() == null || (function($this) {
			var $r;
			var a = response.get_userBoostItem().get_expiresInSeconds();
			$r = _$UInt_UInt_$Impl_$.gte(0,a);
			return $r;
		}(this))) {
			Core.get_events().dispatchEventWith("ShopEvent::useProductFailed");
			return;
		}
		var activeBoost = new agario_proto_User_$boost_$item();
		activeBoost.set_productId(response.get_userBoostItem().get_productId());
		activeBoost.set_expiresInSeconds(response.get_userBoostItem().get_expiresInSeconds());
		var boostItem = Core.models.shopBoostItems.getItemByProductId(activeBoost.get_productId());
		var _g1 = 0;
		var _g = Core.user.userBoosts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var temp = Core.models.shopBoostItems.getItemByProductId(Core.user.userBoosts[i].get_productId());
			if(temp.categoryShopId == boostItem.categoryShopId) {
				isCategoryInUse = true;
				HxOverrides.remove(Core.user.userBoosts,Core.user.userBoosts[i]);
			}
		}
		Core.user.userBoosts.push(activeBoost);
		Core.user.evaluateWallet();
		Core.user.handleUserUpdates((js_Boot.__cast(response , agario_proto_Activate_$boost_$response)).get_productUpdates());
		if(!isCategoryInUse) {
			if(this.shouldShowUseInfo) {
				this.onUseResponse.dispatch(Core.models.shopBoostItems.getItemByProductId(activeBoost.get_productId()));
				this.shouldShowUseInfo = true;
			}
		}
		Core.views.updateViews();
	}
	,__class__: agario_services_ShopService
};
var agario_services_ViewService = function() {
};
$hxClasses["agario.services.ViewService"] = agario_services_ViewService;
agario_services_ViewService.__name__ = ["agario","services","ViewService"];
agario_services_ViewService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_ViewService.prototype = {
	create: function() {
		Core.get_events().addEventListener("ShopEvent::show_guest_conversion",$bind(this,this.showGuest));
		Core.get_events().addEventListener("shop_event::showGiftUnavailable",$bind(this,this.showGiftUnavailable));
	}
	,initialize: function() {
	}
	,showGiftUnavailable: function(e) {
		Core.get_events().removeEventListener("shop_event::showGiftUnavailable",$bind(this,this.showGiftUnavailable));
		Core.services.gameui.showContainer();
		var giftUnavailableDialog = new agario_views_GiftUnavailableDialog();
		Core.views.openView(giftUnavailableDialog,{ animate : true, allowClickClose : true});
		giftUnavailableDialog.addEventListener("close",$bind(this,this.onGuestClose));
		Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",false);
	}
	,showGuest: function(e) {
		if(Core.get_states().isEnabled("state_guest_login_dialog")) return;
		var guestDialog = new agario_views_GuestLoginDialog();
		Core.views.openView(guestDialog,{ animate : true, allowClickClose : true});
		guestDialog.addEventListener("close",$bind(this,this.onGuestClose));
		Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		Core.get_events().dispatchEventWith("shop_event::allow_disable_close",false);
	}
	,onGuestClose: function(e) {
		if(!Core.get_states().getState("state_shop_dialog",true).enabled) {
			Core.services.gameui.hideContainer();
			return;
		}
		MiniclipAPI.instance.shopDialog.enable();
	}
	,__class__: agario_services_ViewService
};
var agario_services_XsollaPaymentService = function() {
	this.currencyCode = "USD";
};
$hxClasses["agario.services.XsollaPaymentService"] = agario_services_XsollaPaymentService;
agario_services_XsollaPaymentService.__name__ = ["agario","services","XsollaPaymentService"];
agario_services_XsollaPaymentService.__interfaces__ = [oaktree_ext_services_IConfigurable,agario_services_IPayment];
agario_services_XsollaPaymentService.prototype = {
	payment_endpoint: null
	,currencyCode: null
	,_models: null
	,create: function() {
	}
	,initialize: function() {
		this._models = oaktree_ext_services_ServiceManager.getService(agario_models_DataManager);
		this._models.onConfigurationLoaded.add($bind(this,this.fetchStoreItems));
	}
	,configure: function(config) {
		this.payment_endpoint = config.endpoint;
	}
	,buyProduct: function(userId,productId,currencyCode) {
		this.doShowPaymentModal("" + this.payment_endpoint + "/pay/" + userId + "/" + productId + "/" + currencyCode);
	}
	,doShowPaymentModal: function(iframe_url) {
		var _g = this;
		$.get(iframe_url,function(data) {
			$("#modal-payment-link").attr("href",data.iframe_url);
			jQuery(".xsolla_container").magnificPopup({ type : "iframe", mainClass : "mfp-fade", preloader : true, fixedContentPos : false, callbacks : { close : function() {
				_g.onIframeClose();
			}}});
			$("#modal-payment-link").click();
		});
		Core.get_states().enable("state_xsolla_iframe");
	}
	,onIframeClose: function() {
		Core.get_states().disable("state_xsolla_iframe");
	}
	,handleBuyProduct: function(response) {
		haxe_Log.trace("d / xsollapaymentservice / " + ("GOT: " + response),{ fileName : "XsollaPaymentService.hx", lineNumber : 92, className : "agario.services.XsollaPaymentService", methodName : "handleBuyProduct"});
	}
	,getCurrencyCode: function() {
		return this.currencyCode;
	}
	,overrideCurrencyCode: function(code) {
		this.currencyCode = code;
		return code;
	}
	,fetchStoreItems: function() {
		var request = new haxe_Http("" + this.payment_endpoint + "/shop-items");
		request.onData = $bind(this,this.handleFetchStore);
		request.onError = function(msg) {
			haxe_Log.trace("d / xsollapaymentservice / " + ("failed to fetch shop-items:" + msg),{ fileName : "XsollaPaymentService.hx", lineNumber : 113, className : "agario.services.XsollaPaymentService", methodName : "fetchStoreItems"});
		};
		request.request();
	}
	,handleFetchStore: function(data) {
		var storeItems = new agario_module_shop_models_vo_XsollaShopItemsVO(new haxe_format_JsonParser(data).parseRec());
		if(storeItems == null) {
			haxe_Log.trace("d / xsollapaymentservice / " + "failed to load shop-items",{ fileName : "XsollaPaymentService.hx", lineNumber : 123, className : "agario.services.XsollaPaymentService", methodName : "handleFetchStore"});
			return;
		}
		this.currencyCode = storeItems.currency_code;
		var bundle = "com.miniclip.agario.";
		var _g = 0;
		var _g1 = storeItems.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var shopItem = this._models.shopItems.getItemByPurchaseId("" + item.sku);
			if(shopItem != null) shopItem.price = item.price;
		}
		Core.get_events().dispatchEventWith("payment_event::got_currency_code");
	}
	,__class__: agario_services_XsollaPaymentService
};
var agario_services_gameui_BaseGameUIService = function() {
};
$hxClasses["agario.services.gameui.BaseGameUIService"] = agario_services_gameui_BaseGameUIService;
agario_services_gameui_BaseGameUIService.__name__ = ["agario","services","gameui","BaseGameUIService"];
agario_services_gameui_BaseGameUIService.prototype = {
	enableShop: function() {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 12, className : "agario.services.gameui.BaseGameUIService", methodName : "enableShop"});
	}
	,setUserSkin: function(targetSkin,borderColor,tab) {
		if(tab == null) tab = "";
		if(borderColor == null) borderColor = "";
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 14, className : "agario.services.gameui.BaseGameUIService", methodName : "setUserSkin"});
	}
	,setUserXPBoost: function(balance) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 15, className : "agario.services.gameui.BaseGameUIService", methodName : "setUserXPBoost"});
	}
	,setUserMassBoost: function(balance) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 16, className : "agario.services.gameui.BaseGameUIService", methodName : "setUserMassBoost"});
	}
	,setBoostPlus: function(type) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 18, className : "agario.services.gameui.BaseGameUIService", methodName : "setBoostPlus"});
	}
	,setBoostQuantity: function(type,balance) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 20, className : "agario.services.gameui.BaseGameUIService", methodName : "setBoostQuantity"});
	}
	,showRetryOption: function() {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 22, className : "agario.services.gameui.BaseGameUIService", methodName : "showRetryOption"});
	}
	,setTimerForBoost: function(type,time,callback,productId) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 27, className : "agario.services.gameui.BaseGameUIService", methodName : "setTimerForBoost"});
	}
	,closeShop: function() {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 35, className : "agario.services.gameui.BaseGameUIService", methodName : "closeShop"});
	}
	,setIcon: function(type,path) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 37, className : "agario.services.gameui.BaseGameUIService", methodName : "setIcon"});
	}
	,setUserCoins: function(coinAmount) {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 41, className : "agario.services.gameui.BaseGameUIService", methodName : "setUserCoins"});
	}
	,setUserName: function(name) {
	}
	,setUserAvatar: function(url) {
	}
	,getUserSocialId: function(callback) {
		callback("100000415416793");
	}
	,disableShop: function() {
		haxe_Log.trace("d / gameuiservice / " + "Needs to implement this method",{ fileName : "GameUIService.hx", lineNumber : 47, className : "agario.services.gameui.BaseGameUIService", methodName : "disableShop"});
	}
	,setVersionTag: function(tag) {
		haxe_Log.trace("d / gameuiservice / " + "setting version tag. Need to implement this",{ fileName : "GameUIService.hx", lineNumber : 50, className : "agario.services.gameui.BaseGameUIService", methodName : "setVersionTag"});
	}
	,setUserIdTag: function(tag) {
		haxe_Log.trace("d / gameuiservice / " + "setting user-id tag. Need to implement this",{ fileName : "GameUIService.hx", lineNumber : 51, className : "agario.services.gameui.BaseGameUIService", methodName : "setUserIdTag"});
	}
	,doLogout: function() {
		haxe_Log.trace("d / gameuiservice / " + "Need to implement doLogout()",{ fileName : "GameUIService.hx", lineNumber : 54, className : "agario.services.gameui.BaseGameUIService", methodName : "doLogout"});
	}
	,setMobileUser: function(hasLoggedIntoMobile) {
		haxe_Log.trace("d / gameuiservice / " + "Need to implement setMobileUser()",{ fileName : "GameUIService.hx", lineNumber : 55, className : "agario.services.gameui.BaseGameUIService", methodName : "setMobileUser"});
	}
	,showGamepadConnected: function() {
		haxe_Log.trace("d / gameuiservice / " + "Need to implement showGamepadConnected",{ fileName : "GameUIService.hx", lineNumber : 57, className : "agario.services.gameui.BaseGameUIService", methodName : "showGamepadConnected"});
	}
	,showGamepadDisconnected: function() {
		haxe_Log.trace("d / gameuiservice / " + "Need to implement showGamepadDisconnected",{ fileName : "GameUIService.hx", lineNumber : 58, className : "agario.services.gameui.BaseGameUIService", methodName : "showGamepadDisconnected"});
	}
	,setAccountData: function(data,shouldAnimate) {
	}
	,setGuestInfo: function() {
	}
	,clearTimers: function() {
	}
	,showContainer: function() {
	}
	,hideContainer: function() {
	}
	,openOfferWall: function() {
	}
	,closeOfferWall: function() {
	}
	,openVideoAd: function() {
	}
	,closeVideoAd: function() {
	}
	,getUserEngagement: function() {
		return false;
	}
	,hasLoginIntent: function() {
		return false;
	}
	,__class__: agario_services_gameui_BaseGameUIService
};
var agario_services_gameui_backend_js_GameUIService = function() {
	this.runningTimers = [];
	agario_services_gameui_BaseGameUIService.call(this);
	Core.get_events().addEventListener(oaktree_core_events_UserEvent.USER_LOGGED,$bind(this,this.onUserLogged));
};
$hxClasses["agario.services.gameui.backend.js.GameUIService"] = agario_services_gameui_backend_js_GameUIService;
agario_services_gameui_backend_js_GameUIService.__name__ = ["agario","services","gameui","backend","js","GameUIService"];
agario_services_gameui_backend_js_GameUIService.__super__ = agario_services_gameui_BaseGameUIService;
agario_services_gameui_backend_js_GameUIService.prototype = $extend(agario_services_gameui_BaseGameUIService.prototype,{
	runningTimers: null
	,onUserLogged: function(e) {
		this.setUserIdTag("User id: " + Core.user.userInfo.displayName);
		Core.user.userInfo.xpNeeded = Core.models.xpModel.getMaxXpForLevel(Core.user.userInfo.level);
		agarApp.core.trigger("user_login",[Core.user]);
		if(Core.user.userInfo.level >= Core.models.xpModel.xpList.length) Core.user.userInfo.xp = Core.user.userInfo.xpNeeded;
		agarApp.account.setUserData(Core.user.userInfo);
		this.enableShop();
	}
	,setUserSkin: function(targetSkin,borderColor,tab) {
		if(tab == null) tab = "";
		if(borderColor == null) borderColor = "";
		var skinTarget = $("#skinButton img");
		skinTarget.addClass("circle bordered");
		skinTarget.height("90px");
		if(targetSkin == Core.user.defaultSkin) {
			var skinLabel = $("#skinLabel");
			skinLabel.fadeIn(100);
			skinTarget.fadeOut(100);
			skinTarget.attr("src","");
			$("#skinButton").addClass("circle bordered");
			$("#skinButton").height("90px");
		} else {
			var skinLabel1 = $("#skinLabel");
			skinTarget.attr("src",targetSkin);
			skinTarget.css("border","3px solid " + StringTools.replace(borderColor,"0x","#"));
			skinLabel1.fadeOut(100);
			skinTarget.fadeIn(100);
			$("#skinButton").removeClass("circle bordered");
		}
		$("#skinButton").attr("data-type",tab);
	}
	,setMobileUser: function(hasLoggedIntoMobile) {
		if(hasLoggedIntoMobile == false) {
			$(".agario-promo").fadeOut(400);
			$("#agario-web-incentive").delay(800).fadeIn(400);
		}
	}
	,setUserXPBoost: function(balance) {
		var targetElement = this.getTargetHTML(agario_module_shop_models_types_BoostType.XP_BOOST);
		var boostButton = $(targetElement + " div");
		boostButton.attr("class","circle small red");
		if(balance == "0" || balance == "+") {
			balance = "+";
			this.setBoostPlus(agario_module_shop_models_types_BoostType.XP_BOOST);
		} else this.setBoostQuantity(agario_module_shop_models_types_BoostType.XP_BOOST,balance);
	}
	,setUserMassBoost: function(balance) {
		var targetElement = this.getTargetHTML(agario_module_shop_models_types_BoostType.MASS_BOOST);
		var boostButton = $(targetElement + " div");
		boostButton.attr("class","circle small red");
		if(balance == "0" || balance == "+") {
			balance = "+";
			this.setBoostPlus(agario_module_shop_models_types_BoostType.MASS_BOOST);
		} else this.setBoostQuantity(agario_module_shop_models_types_BoostType.MASS_BOOST,balance);
	}
	,setBoostPlus: function(type) {
		var targetElement = this.getTargetHTML(type);
		var boostButton = $(targetElement + " div");
		boostButton.attr("class","circle small green");
		this.setBoostQuantity(type,"+");
	}
	,setBoostQuantity: function(type,balance) {
		var targetElement = this.getTargetHTML(type);
		var boostButton = $(targetElement + " div");
		boostButton.children("span").text(balance);
		$(targetElement + " .outlined-text").removeClass("plus-text");
		if(balance == "+") $(targetElement + " .outlined-text").addClass("plus-text");
	}
	,enableShop: function() {
		$("#openShopBtn").removeAttr("disabled");
		$(".shop-left-container").show();
		$(".shop-right-container").show();
		$(".vertical-line").show();
		$(".agario-shop-panel .text-muted").html("");
		$(".agario-shop-panel").fadeIn(200);
		$("#retryBtn").hide();
		$(".shop-blocker").fadeOut(100);
	}
	,disableShop: function() {
		$("#openShopBtn").attr("disabled","");
		$(".shop-blocker").fadeIn(100);
		this.setUserXPBoost("0");
		this.setUserMassBoost("0");
		this.setUserSkin("");
	}
	,showRetryOption: function() {
		$(".shop-left-container").hide();
		$(".shop-right-container").hide();
		$(".vertical-line").hide();
		$(".shop-blocker").fadeOut(100);
		$("#retryBtn").show();
		$(".agario-shop-panel .text-muted").html("");
		$(".agario-shop-panel .text-muted").html(oaktree_ext_localization_I18n.text("shop_unavailable_message"));
	}
	,setTimerForBoost: function(type,time,callback,productId) {
		var targetElement = this.getTargetHTML(type);
		var timerLabel = $(targetElement + " .timer");
		$(targetElement + " div").attr("class","circle small gray");
		timerLabel.show();
		this.setTimer(targetElement,time,callback,productId);
	}
	,setIcon: function(type,path) {
		$(this.getTargetHTML(type) + " img").attr("src",ApplicationMain.config.assetsPrefix + path);
	}
	,getTargetHTML: function(type) {
		var targetElement = "";
		switch(type) {
		case "xp_boost":
			targetElement = "#boostButton";
			break;
		case "mass_boost":
			targetElement = "#massButton";
			break;
		}
		return targetElement;
	}
	,closeShop: function() {
		var timerLen = this.runningTimers.length;
		var _g = 0;
		while(_g < timerLen) {
			var i = _g++;
			if(this.runningTimers[i] == null) continue;
			this.runningTimers[i].stop();
			$(Std.string(this.runningTimers[i].data.container) + " .timer").text("");
			HxOverrides.remove(this.runningTimers,this.runningTimers[i]);
		}
		this.setUserSkin("");
	}
	,setUserCoins: function(coinAmount) {
		var coinAmountString = oaktree_utils_StringUtility.formatNumber(coinAmount,"n"," ");
		$(".agario-wallet-label").text(coinAmountString == null?"null":"" + coinAmountString);
	}
	,setUserName: function(name) {
		$(".agario-profile-name").text(name);
	}
	,setUserAvatar: function(url) {
		$(".agario-profile-picture").attr("src",url);
	}
	,setVersionTag: function(tag) {
		$("#version-tag").text(tag);
	}
	,setUserIdTag: function(tag) {
		$("#user-id-tag").text(tag);
	}
	,hasLoginIntent: function() {
		return window.storageInfo.loginIntent == "1";
	}
	,getUserSocialId: function(callback) {
		FB.api("/me",function(response) {
			if(response && !response.error) callback(response.id);
		});
	}
	,doLogout: function() {
		window.logout();
	}
	,showGamepadConnected: function() {
		if('gamepad' in queryString) $("#controller_alert_connected").fadeIn(500).delay(3000).fadeOut(500);
	}
	,showGamepadDisconnected: function() {
		if('gamepad' in queryString) $("#controller_alert_disconnected").fadeIn(500).delay(3000).fadeOut(500);
	}
	,setAccountData: function(data,shouldAnimate) {
		agarApp.account.setAccountData(data,shouldAnimate);
	}
	,setGuestInfo: function() {
		this.setAccountData({ 'level' : 1, 'xp' : 0, 'xpNeeded' : 50},false);
		this.setUserCoins(100);
		this.setUserName("Guest");
		this.setUserAvatar(Core.services.config.getRootUrl("img/profilepic_guest.png"));
		this.setUserXPBoost("0");
		this.setUserMassBoost("0");
		$("#agario-web-incentive").fadeOut(100);
		$(".agario-promo").delay(200).fadeIn(400);
	}
	,setTimer: function(container,time,callback,productId) {
		var alreadyRunning = false;
		var _g1 = 0;
		var _g = this.runningTimers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.runningTimers[i].data.productId == productId) alreadyRunning = true;
		}
		if(!alreadyRunning) {
			var timer = new oaktree_utils_DataTimer(1000);
			timer.data.targetDate = new Date().getTime() + time * 1000;
			timer.data.container = container;
			timer.data.productId = productId;
			timer.addEventListener("timer",$bind(this,this.onTimerTick));
			timer.data.callBack = callback;
			timer.start();
			this.runningTimers.push(timer);
		}
	}
	,onTimerTick: function(t) {
		var timerData = t.currentTarget.data;
		var remainTime = timerData.targetDate - new Date().getTime();
		var secs = remainTime / 1000 | 0;
		var mins = secs / 60 | 0;
		var hours = mins / 60 | 0;
		var strFinal = hours % 60 + "h " + mins % 60 + "m " + secs % 60 + "s";
		if(hours < 1) strFinal = mins % 60 + "m " + secs % 60 + "s";
		if(remainTime <= 0) {
			var x = this.runningTimers.filter(function(item) {
				return item.data.productId == timerData.productId;
			})[0];
			HxOverrides.remove(this.runningTimers,x);
			t.currentTarget.stop();
			remainTime = 0;
			strFinal = "";
			Reflect.callMethod({ },timerData.callBack,[timerData.productId]);
		}
		var timerLabel = $(Std.string(timerData.container) + " .timer");
		timerLabel.text(strFinal);
	}
	,clearTimers: function() {
		var _g1 = 0;
		var _g = this.runningTimers.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.runningTimers[i] != null && this.runningTimers[i].running) this.runningTimers[i].stop();
			this.runningTimers = [];
		}
	}
	,openOfferWall: function() {
		window.openOfferwall();
		Core.get_states().enable("state_offerwall_window");
	}
	,openVideoAd: function() {
		window.openVideoAd();
		Core.get_states().enable("state_video_window");
	}
	,closeVideoAd: function() {
		window.closeVideoAd();
	}
	,getUserEngagement: function() {
		return window.hasEngagement;
	}
	,showContainer: function() {
		var target = MiniclipAPI.instance.container;
		var overlay = MiniclipAPI.instance.overlay;
		if(overlay != "") $("#" + overlay).fadeIn();
		$("#" + target).fadeIn();
	}
	,hideContainer: function() {
		var target = MiniclipAPI.instance.container;
		var overlay = MiniclipAPI.instance.overlay;
		if(overlay != "") $("#" + overlay).fadeOut();
		$("#" + target).fadeOut();
		openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
	}
	,__class__: agario_services_gameui_backend_js_GameUIService
});
var agario_services_social_FBSocialService = function() {
};
$hxClasses["agario.services.social.FBSocialService"] = agario_services_social_FBSocialService;
agario_services_social_FBSocialService.__name__ = ["agario","services","social","FBSocialService"];
agario_services_social_FBSocialService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_social_FBSocialService.prototype = {
	create: function() {
	}
	,initialize: function() {
	}
	,share: function(name,caption,description,link,picture,action_name,action_link,callback) {
		var fbCallbackShare = callback;
		var shareOptions = { method : "feed", display : "iframe", name : name, caption : caption, description : description, link : link, picture : picture, actions : { 'name' : action_name, 'link' : action_link}};
		FB.ui(shareOptions,fbCallbackShare);
	}
	,__class__: agario_services_social_FBSocialService
};
var agario_services_social_GoogleSocialService = function() {
};
$hxClasses["agario.services.social.GoogleSocialService"] = agario_services_social_GoogleSocialService;
agario_services_social_GoogleSocialService.__name__ = ["agario","services","social","GoogleSocialService"];
agario_services_social_GoogleSocialService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_social_GoogleSocialService.prototype = {
	create: function() {
	}
	,initialize: function() {
	}
	,share: function(text) {
		js.JQuery("#externalGShare").trigger("click");
	}
	,setShareText: function(text) {
		window.fillSocialValues(text,"externalGShare");
	}
	,__class__: agario_services_social_GoogleSocialService
};
var agario_services_social_SocialService = function() {
};
$hxClasses["agario.services.social.SocialService"] = agario_services_social_SocialService;
agario_services_social_SocialService.__name__ = ["agario","services","social","SocialService"];
agario_services_social_SocialService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_social_SocialService.prototype = {
	fbSocial: null
	,twitterSocial: null
	,googleSocial: null
	,storyList: null
	,create: function() {
	}
	,initialize: function() {
		this.fbSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_FBSocialService);
		this.twitterSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_TwitterSocialService);
		this.googleSocial = oaktree_ext_services_ServiceManager.getService(agario_services_social_GoogleSocialService);
	}
	,getStoryById: function(id) {
		this.storyList = Core.services.config.get_currentConfig().externalSocialStories;
		return this.storyList.filter(function(item) {
			return item.id == id;
		})[0];
	}
	,shareFB: function(storyId,params,overrideImage) {
		var story = this.getStoryById(storyId);
		var title = oaktree_ext_localization_I18n.text(story.titleTag,params);
		var img = story.iconURL;
		if(overrideImage != null) img = overrideImage;
		this.fbSocial.share(title,oaktree_ext_localization_I18n.text(story.subtitleTag,params),oaktree_ext_localization_I18n.text(story.descriptionTag,params),"http://agar.io",img,oaktree_ext_localization_I18n.text("menu_play"),"http://agar.io",$bind(this,this.onShare));
	}
	,directShareFB: function(storyId,title,subtitle,description,overrideImage) {
		var story = this.getStoryById(storyId);
		var img = story.iconURL;
		if(overrideImage != null) img = overrideImage;
		this.fbSocial.share(title,subtitle,description,"http://agar.io",img,oaktree_ext_localization_I18n.text("menu_play"),"http://agar.io",$bind(this,this.onShare));
	}
	,shareTwitter: function(storyId,params) {
		var story = this.getStoryById(storyId);
		var title = StringTools.urlEncode(oaktree_ext_localization_I18n.text(story.twitterSubtitleTag,params));
		this.twitterSocial.share(title);
	}
	,shareGoogle: function(storyId,params) {
		var story = this.getStoryById(storyId);
		this.googleSocial.share(oaktree_ext_localization_I18n.text(story.titleTag,params) + " " + oaktree_ext_localization_I18n.text(story.subtitleTag,params));
	}
	,prepareGoogleShare: function(storyId,params) {
		var story = this.getStoryById(storyId);
		this.googleSocial.setShareText(oaktree_ext_localization_I18n.text(story.titleTag,[params[1]]) + " " + oaktree_ext_localization_I18n.text(story.subtitleTag,[params[0]]));
	}
	,onShare: function() {
		haxe_Log.trace("d / socialservice / " + "Share complete!",{ fileName : "SocialService.hx", lineNumber : 103, className : "agario.services.social.SocialService", methodName : "onShare"});
	}
	,__class__: agario_services_social_SocialService
};
var agario_services_social_TwitterSocialService = function() {
};
$hxClasses["agario.services.social.TwitterSocialService"] = agario_services_social_TwitterSocialService;
agario_services_social_TwitterSocialService.__name__ = ["agario","services","social","TwitterSocialService"];
agario_services_social_TwitterSocialService.__interfaces__ = [oaktree_ext_services_IService];
agario_services_social_TwitterSocialService.prototype = {
	create: function() {
	}
	,initialize: function() {
	}
	,share: function(description) {
		var params = "text=" + description;
		var targetUrl = "https://twitter.com/intent/tweet?" + params;
		var width = 660;
		var height = 310;
		var windowOptions = "width=" + width + ",height=" + height + ",menubar=no,toolbar=no,resizable=yes,scrollbars=no";
		window.open(targetUrl,"Agar.io",windowOptions + ",left=" + (window.screenX + window.innerWidth / 2 - width / 2) + ",top=" + ((window.innerHeight - height) / 2 | 0));
	}
	,__class__: agario_services_social_TwitterSocialService
};
var agario_services_web_WebEnvironment = function() {
	this._queryParameters = this.getQueryString();
};
$hxClasses["agario.services.web.WebEnvironment"] = agario_services_web_WebEnvironment;
agario_services_web_WebEnvironment.__name__ = ["agario","services","web","WebEnvironment"];
agario_services_web_WebEnvironment.prototype = {
	_queryParameters: null
	,getQueryString: function() {
		var tmp = window.location.search;
		if(tmp.charAt(0) == "?") tmp = HxOverrides.substr(tmp,1,null);
		var arr = tmp.split("&");
		var result = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < arr.length) {
			var item = arr[_g];
			++_g;
			var kv = item.split("=");
			result.set(kv[0],kv[1]);
		}
		return result;
	}
	,hasParameter: function(pKey) {
		return this._queryParameters.exists(pKey);
	}
	,getParameter: function(pKey) {
		return this._queryParameters.get(pKey);
	}
	,__class__: agario_services_web_WebEnvironment
};
var agario_views_DebugView = function() {
	oaktree_ext_ui_views_GenericDialog.call(this);
	this.maxWidth = 300;
	this.maxHeight = 300;
};
$hxClasses["agario.views.DebugView"] = agario_views_DebugView;
agario_views_DebugView.__name__ = ["agario","views","DebugView"];
agario_views_DebugView.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_views_DebugView.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	initialize: function() {
		var _g = this;
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		var gotAssets = [];
		gotAssets.push(Core.get_assets().getAtlas("menusCommonUI").load());
		promhx_Promise.whenAll(gotAssets).then($bind(this,this.buildUI)).catchError(function(e) {
			_g.close();
		});
		this.showLoading();
	}
	,buildUI: function(atlas) {
		this.hideLoading();
		var tmpImage = new openfl_display_Sprite();
		this.addChild(tmpImage);
		tmpImage.addChild(Core.get_assets().getAtlas("menusCommonUI").get("tapjoy_icon").asBitmap());
	}
	,__class__: agario_views_DebugView
});
var agario_views_FreeCoinsDialog = function() {
	this.hasEngagement = false;
	this.padding = 20;
	oaktree_ext_ui_views_GenericDialog.call(this,"state_free_coins_dialog");
	this.closeOnEscape = true;
	this.maxWidth = 500;
	this.maxHeight = 160;
	Core.get_events().addEventListener("ShopEvent::checkVideos",$bind(this,this.checkEngagement));
	Core.get_events().addEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
};
$hxClasses["agario.views.FreeCoinsDialog"] = agario_views_FreeCoinsDialog;
agario_views_FreeCoinsDialog.__name__ = ["agario","views","FreeCoinsDialog"];
agario_views_FreeCoinsDialog.freeCoinsBtn = null;
agario_views_FreeCoinsDialog.onFreeCoinsResponse = function() {
	if(agario_views_FreeCoinsDialog.freeCoinsBtn != null) agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(Core.user.freeCoinTimeLeft());
};
agario_views_FreeCoinsDialog.triggerFreeCoins = function() {
	var freeCoinTime = Core.user.freeCoinTimeLeft();
	var te = Core.user.userInfo.getTimedEvent("hourlyBonus");
	if(te == null || freeCoinTime > 0) return;
	var _serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
	_serverModel.unregister(76,agario_views_FreeCoinsDialog.onTimedEventResponse);
	_serverModel.register(76,agario_views_FreeCoinsDialog.onTimedEventResponse);
	Core.services.shop.activateTimedEvent(te.eventId);
};
agario_views_FreeCoinsDialog.onTimedEventResponse = function(type,msg) {
	if(type != 76) return;
	var message = msg;
	if(message.get_productUpdates().length == 0) Core.user.userInfo.setTimedEvent(new agario_module_shop_models_vo_TimedEventVO(message.get_userTimedEvent()));
	Core.get_events().dispatchEventWith("ShopEvent::freeCoinsResponse");
	Core.user.handleUserUpdates(message.get_productUpdates());
	Core.user.userInfo.setTimedEvent(new agario_module_shop_models_vo_TimedEventVO(message.get_userTimedEvent()));
	agario_views_FreeCoinsDialog.onFreeCoinsResponse();
	var _serverModel = oaktree_ext_services_ServiceManager.getService(oaktree_ext_networking_IServer);
	_serverModel.unregister(76,agario_views_FreeCoinsDialog.onTimedEventResponse);
};
agario_views_FreeCoinsDialog.openCollectDialog = function(waitForData,closeHandler,showVideoOfferBtn,instance) {
	if(showVideoOfferBtn == null) showVideoOfferBtn = true;
	var fcd = new agario_module_user_view_FreeCoinsCollectDialog(showVideoOfferBtn);
	if(closeHandler != null) fcd.onClose.addOnce(closeHandler);
	Core.views.openView(fcd,{ animate : true, allowClickClose : true, callerView : instance});
	if(!waitForData) fcd.onDataReady();
};
agario_views_FreeCoinsDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_views_FreeCoinsDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	titleLabel: null
	,padding: null
	,hasEngagement: null
	,videoBtn: null
	,offerBtn: null
	,btnContainer: null
	,redLbl: null
	,_serverModel: null
	,disconnectDialog: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.hasEngagement = Core.services.gameui.getUserEngagement();
		this.drawTitle();
		this.drawButtons();
		this.startCountingTimers();
		this.doLayout();
	}
	,onConnectionLost: function(e) {
		Core.views.closeAllViews(agario_views_FreeCoinsDialog);
		this.disable();
		this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
		Core.views.openView(this.disconnectDialog,{ animate : true, allowClickClose : false, callerView : this});
		Core.get_events().removeEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
		this.disconnectDialog.addEventListener("close",$bind(this,this.closeDisconnect));
	}
	,closeDisconnect: function(e) {
		Core.views.closeTopView();
	}
	,doLayout: function() {
		this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
		this.titleLabel.set_y(this.padding);
		this.videoBtn.set_x(150);
		this.offerBtn.set_x(300);
		this.btnContainer.set_y(80);
		this.btnContainer.set_x((this.maxWidth - this.btnContainer.get_width()) / 2);
		if(this.redLbl != null) {
			this.redLbl.set_x(this.videoBtn.get_x());
			this.redLbl.set_y(this.videoBtn.get_y() + this.videoBtn.get_height() + 5);
		}
	}
	,drawTitle: function() {
		var format = new openfl_text_TextFormat("Arial",30,0,true);
		format.align = 3;
		this.titleLabel = new openfl_text_TextField();
		this.titleLabel.set_defaultTextFormat(format);
		this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_main_free_coins"));
		this.titleLabel.set_width(this.maxWidth - this.padding);
		this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
		this.titleLabel.set_autoSize(1);
		this.titleLabel.set_selectable(false);
		this.titleLabel.set_embedFonts(false);
		this.titleLabel.set_textColor(5329233);
		this.addChild(this.titleLabel);
	}
	,drawButtons: function() {
		this.btnContainer = new openfl_display_Sprite();
		agario_views_FreeCoinsDialog.freeCoinsBtn = new agario_views_controls_FreeCoinsButton();
		agario_views_FreeCoinsDialog.freeCoinsBtn.addEventListener("click",$bind(this,this.onFreeCoinsClick));
		agario_views_FreeCoinsDialog.freeCoinsBtn.addEventListener("complete",$bind(this,this.onFreeCoinsComplete));
		this.btnContainer.addChild(agario_views_FreeCoinsDialog.freeCoinsBtn);
		var videoIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("freecoins_video").get_bitmapData());
		this.videoBtn = new agario_views_controls_ColorButton({ color : 5880408, overColor : 4294721, text : oaktree_ext_localization_I18n.text("menu_main_free_coins"), textColorOver : 16777215, textColor : 16777215, icon : videoIcon, iconPadding : 6, w : 140, h : 50, fontSize : 14, bold : true});
		this.btnContainer.addChild(this.videoBtn);
		this.videoBtn.addEventListener("click",$bind(this,this.onVideoClick));
		this.offerBtn = new agario_views_controls_ColorButton({ color : 110829, overColor : 621990, text : oaktree_ext_localization_I18n.text("free_coins_offers"), textColorOver : 16777215, textColor : 16777215, w : 140, h : 50, fontSize : 14, bold : true});
		this.btnContainer.addChild(this.offerBtn);
		this.offerBtn.addEventListener("click",$bind(this,this.onOfferWallClick));
		this.addChild(this.btnContainer);
		this.checkVideoAvailable();
	}
	,checkVideoAvailable: function() {
		if(!this.hasEngagement) {
			this.redLbl = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("free_coins_unavailable"), fontSize : 12, color : 16711680, bold : false});
			this.addChild(this.redLbl);
			this.videoBtn.set_alpha(0.6);
			this.videoBtn.set_enabled(false);
			this.redLbl.set_x(this.videoBtn.get_x() + (this.videoBtn.get_width() - this.redLbl.get_width()) / 2);
			this.redLbl.set_y(this.videoBtn.get_y() + this.videoBtn.get_height() + 5);
			this.btnContainer.addChild(this.redLbl);
		}
	}
	,onFreeCoinsComplete: function(e) {
		agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(0);
	}
	,onVideoClick: function(e) {
		if(!this.hasEngagement) return;
		this.disable();
		Core.services.gameui.openVideoAd();
	}
	,onOfferWallClick: function(e) {
		Core.services.gameui.openOfferWall();
	}
	,startCountingTimers: function() {
		var timeLeft = Core.user.freeCoinTimeLeft();
		agario_views_FreeCoinsDialog.freeCoinsBtn.setTimeLeft(timeLeft);
	}
	,onFreeCoinsClick: function(e) {
		var freeCoinTime = Core.user.freeCoinTimeLeft();
		if(freeCoinTime == 0) agario_views_FreeCoinsDialog.openCollectDialog(true,$bind(this,this.onCloseHandler),true,this); else agario_views_FreeCoinsDialog.openCollectDialog(false,$bind(this,this.onCloseHandler),true,this);
		this.disable();
		agario_views_FreeCoinsDialog.triggerFreeCoins();
	}
	,onCloseHandler: function() {
		this.enable();
		Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
	}
	,checkEngagement: function(e) {
		this.hasEngagement = Core.services.gameui.getUserEngagement();
		this.checkVideoAvailable();
	}
	,deinitialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.deinitialize.call(this);
		this.dispose();
	}
	,dispose: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
		this.offerBtn.removeEventListener("click",$bind(this,this.onOfferWallClick));
		this.videoBtn.removeEventListener("click",$bind(this,this.onVideoClick));
		agario_views_FreeCoinsDialog.freeCoinsBtn.removeEventListener("click",$bind(this,this.onFreeCoinsClick));
		agario_views_FreeCoinsDialog.freeCoinsBtn.removeEventListener("complete",$bind(this,this.onFreeCoinsComplete));
		Core.get_events().removeEventListener("ShopEvent::checkVideos",$bind(this,this.checkEngagement));
		Core.get_events().removeEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
	}
	,__class__: agario_views_FreeCoinsDialog
});
var agario_views_GiftUnavailableDialog = function() {
	oaktree_ext_ui_views_GenericDialog.call(this,"giftUnavailableDialog");
	this.closeOnEscape = true;
	this.maxWidth = 520;
	this.maxHeight = 450;
};
$hxClasses["agario.views.GiftUnavailableDialog"] = agario_views_GiftUnavailableDialog;
agario_views_GiftUnavailableDialog.__name__ = ["agario","views","GiftUnavailableDialog"];
agario_views_GiftUnavailableDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_views_GiftUnavailableDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	grayArea: null
	,img: null
	,title: null
	,subTitle: null
	,appleButton: null
	,androidButton: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.title = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_main_gifts"), bold : true, color : 0, fontSize : 34, width : this.maxWidth - 25, align : 0});
		this.title.mouseEnabled = false;
		this.addChild(this.title);
		this.subTitle = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("gifting_unavailable_subtitle"), bold : true, color : 0, fontSize : 21, width : this.maxWidth - 20, align : 0});
		this.addChild(this.subTitle);
		this.grayArea = new openfl_display_Sprite();
		this.grayArea.get_graphics().beginFill(16119285);
		this.grayArea.get_graphics().drawRect(0,0,this.maxWidth - 40,230);
		this.grayArea.get_graphics().endFill();
		this.addChild(this.grayArea);
		this.img = new openfl_display_Bitmap(Core.get_assets().getTexture("gifts_icon").get_bitmapData(),1,true);
		this.addChild(this.img);
		this.appleButton = new agario_views_controls_ImageButton(new openfl_display_Bitmap(Core.get_assets().getTexture("appstore").get_bitmapData(),1,true));
		this.addChild(this.appleButton);
		this.androidButton = new agario_views_controls_ImageButton(new openfl_display_Bitmap(Core.get_assets().getTexture("google_play").get_bitmapData(),1,true));
		this.addChild(this.androidButton);
		this.doLayout();
	}
	,doLayout: function() {
		this.title.set_x(20);
		this.title.set_y(20);
		this.subTitle.set_y(this.title.get_y() + this.title.get_height());
		this.subTitle.set_x(20);
		this.grayArea.set_x(20);
		this.grayArea.set_y(this.subTitle.get_y() + this.subTitle.get_height() + 10);
		this.img.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.img.get_width()) / 2);
		this.img.set_y(this.grayArea.get_y() + 20);
		this.appleButton.set_y(this.androidButton.set_y(this.grayArea.get_y() + this.grayArea.get_height() + 20));
		this.appleButton.set_x(130);
		this.appleButton.addEventListener("click",$bind(this,this.onAppleclick));
		this.androidButton.set_x(this.maxWidth - this.androidButton.get_width() - 130);
		this.androidButton.addEventListener("click",$bind(this,this.onAndroidClick));
	}
	,onAppleclick: function(e) {
		openfl_Lib.getURL(new openfl_net_URLRequest("https://itunes.apple.com/app/agar.io/id995999703?mt=8&at=1l3vajp"));
	}
	,onAndroidClick: function(e) {
		openfl_Lib.getURL(new openfl_net_URLRequest("https://play.google.com/store/apps/details?id=com.miniclip.agar.io"));
	}
	,__class__: agario_views_GiftUnavailableDialog
});
var agario_views_GuestLoginDialog = function() {
	oaktree_ext_ui_views_GenericDialog.call(this,"state_guest_login_dialog");
	this.closeOnEscape = true;
	this.maxWidth = 415;
	this.maxHeight = 630;
};
$hxClasses["agario.views.GuestLoginDialog"] = agario_views_GuestLoginDialog;
agario_views_GuestLoginDialog.__name__ = ["agario","views","GuestLoginDialog"];
agario_views_GuestLoginDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_views_GuestLoginDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	grayArea: null
	,title: null
	,img: null
	,txtDescription: null
	,fbLoginBtn: null
	,googleBtn: null
	,subTitle: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		Core.get_events().addEventListener("deactivate",$bind(this,this.onDeactivate));
		this.title = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_not_avail_title"), bold : true, color : 0, fontSize : 34, width : this.maxWidth - 25, align : 0});
		this.title.mouseEnabled = false;
		this.addChild(this.title);
		this.subTitle = new oaktree_ext_ui_Label({ text : oaktree_ext_localization_I18n.text("menu_guest_login_subtitle"), bold : true, color : 14699578, fontSize : 26, width : this.maxWidth - 20, align : 0});
		this.addChild(this.subTitle);
		this.grayArea = new openfl_display_Sprite();
		this.grayArea.get_graphics().beginFill(16119285);
		this.grayArea.get_graphics().drawRect(0,0,this.maxWidth - 40,340);
		this.grayArea.get_graphics().endFill();
		this.addChild(this.grayArea);
		this.img = new openfl_display_Bitmap(Core.get_assets().getTexture("not_for_guests").get_bitmapData(),1,true);
		this.addChild(this.img);
		this.txtDescription = new oaktree_ext_ui_Label({ text : "• Bonus starting mass •\n• Earn XP and level up •\n• Earn Coins •\n• Get boosts and Premium skins •\n• Save your stats •\n• Play on multiple devices •", color : 4225790, fontSize : 16, width : this.grayArea.get_width(), leading : 8, align : 0});
		this.addChild(this.txtDescription);
		this.createFbLogin();
		this.createGoogleLogin();
		this.doLayout();
	}
	,onDeactivate: function(e) {
		Core.views.closeTopView();
	}
	,createGoogleLogin: function() {
		var googleIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("gplus_icon").get_bitmapData());
		this.googleBtn = new agario_views_controls_ColorButton({ color : 14699578, overColor : 14699578, text : "Sign in with Google", textColorOver : 16777215, textColor : 16777215, icon : googleIcon, iconPosition : "left", iconPadding : 25, w : 320, h : 35, fontSize : 18, bold : true});
		this.addChild(this.googleBtn);
		this.googleBtn.addEventListener("click",function(e) {
			$("#gplusLogin").trigger("click");
			Core.get_events().dispatchEventWith("deactivate");
			Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
		});
	}
	,createFbLogin: function() {
		var fbIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("fb_icon").get_bitmapData());
		this.fbLoginBtn = new agario_views_controls_ColorButton({ color : 3625371, overColor : 3625371, text : "Sign in with Facebook", textColorOver : 16777215, textColor : 16777215, icon : fbIcon, iconPosition : "left", iconPadding : 25, w : 320, h : 35, fontSize : 18, bold : true});
		this.addChild(this.fbLoginBtn);
		this.fbLoginBtn.addEventListener("click",function(e) {
			window.facebookLogin();
			Core.get_events().dispatchEventWith("deactivate");
			Core.get_events().dispatchEventWith("ShopEvent::ENABLE_SHOP");
		});
	}
	,dispose: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
		Core.get_events().removeEventListener("deactivate",$bind(this,this.onDeactivate));
	}
	,doLayout: function() {
		this.title.set_x(20);
		this.title.set_y(20);
		this.subTitle.set_x(20);
		this.subTitle.set_y(this.title.get_y() + this.title.get_height());
		this.grayArea.set_x(20);
		this.grayArea.set_y(this.subTitle.get_y() + this.subTitle.get_height() + 10);
		this.img.set_x(this.grayArea.get_x() + (this.grayArea.get_width() - this.img.get_width()) / 2);
		this.img.set_y(this.grayArea.get_y() + 10);
		this.txtDescription.set_x(this.grayArea.get_x());
		this.txtDescription.set_y(this.img.get_y() + this.img.get_height() + 10);
		this.fbLoginBtn.set_x(this.googleBtn.set_x((this.maxWidth - this.fbLoginBtn.get_width()) / 2));
		this.fbLoginBtn.set_y(this.grayArea.get_y() + this.grayArea.get_height() + 20);
		this.googleBtn.set_y(this.fbLoginBtn.get_y() + this.fbLoginBtn.get_height() + 10);
	}
	,__class__: agario_views_GuestLoginDialog
});
var agario_views_ShopDialog = function() {
	this.redirect_to = "";
	this.initialized = false;
	this.currentCategory = "";
	this.lastCategory = "";
	oaktree_ext_ui_views_GenericDialog.call(this,"state_shop_dialog");
	this.maxWidth = 760;
	this.maxHeight = 560;
};
$hxClasses["agario.views.ShopDialog"] = agario_views_ShopDialog;
agario_views_ShopDialog.__name__ = ["agario","views","ShopDialog"];
agario_views_ShopDialog.__super__ = oaktree_ext_ui_views_GenericDialog;
agario_views_ShopDialog.prototype = $extend(oaktree_ext_ui_views_GenericDialog.prototype,{
	lastCategory: null
	,currentCategory: null
	,initialized: null
	,viewContainer: null
	,currentView: null
	,backButton: null
	,titleLabel: null
	,viewMain: null
	,viewCoins: null
	,viewMass: null
	,viewSkins: null
	,viewBoosts: null
	,hud: null
	,_container: null
	,redirect_to: null
	,redirect_data: null
	,redirect_path: null
	,disconnectDialog: null
	,initialize: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.initialize.call(this);
		this.showLoading();
		this._container = new openfl_display_Sprite();
		this.addChild(this._container);
		this._container.set_alpha(0);
		Core.get_events().addEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
		this.onShopReady(null);
	}
	,onConnectionLost: function(e) {
		Core.views.closeAllViews(agario_views_ShopDialog);
		this.disable();
		this.disconnectDialog = new agario_module_shop_view_ConnectionLostDialog();
		Core.views.openView(this.disconnectDialog,{ animate : true, allowClickClose : false, callerView : this});
		Core.get_events().removeEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
		this.disconnectDialog.addEventListener("close",$bind(this,this.closeDisconnect));
	}
	,closeDisconnect: function(e) {
		Core.views.closeTopView();
	}
	,onShopReady: function(e) {
		Core.get_events().removeEventListener("ShopEvent::Ready",$bind(this,this.onShopReady));
		Core.services.shop.isShopAvailable = true;
		this.buildUI();
		motion_Actuate.tween(this._container,0.5,{ alpha : 1});
		this.hideLoading();
		if(this.redirect_to != "") {
			this.openCategory(this.redirect_to,this.redirect_path,this.redirect_data);
			this.redirect_to = "";
		}
	}
	,buildUI: function() {
		var _g = this;
		this.backButton = new agario_views_controls_ArrowCircleButton();
		this._container.addChild(this.backButton);
		this.backButton.set_visible(false);
		var format = new openfl_text_TextFormat("Arial",30,0,true);
		format.align = 3;
		this.titleLabel = new openfl_text_TextField();
		this.titleLabel.set_defaultTextFormat(format);
		this.titleLabel.set_text(oaktree_ext_localization_I18n.text("menu_main_shop"));
		this.titleLabel.set_width(this.maxWidth - 20);
		this.titleLabel.set_height(this.titleLabel.get_textHeight() + 5);
		this.titleLabel.set_autoSize(1);
		this.titleLabel.set_selectable(false);
		this.titleLabel.set_embedFonts(false);
		this.titleLabel.set_textColor(5329233);
		this._container.addChild(this.titleLabel);
		this.hud = new agario_views_controls_ShopHUD();
		this.hud.mouseChildren = false;
		this.hud.buttonMode = true;
		this._container.addChild(this.hud);
		this.hud.addEventListener("click",$bind(this,this.onHudClick));
		this.hud.set_y(35);
		this.hud.set_x(this.maxWidth - this.hud.get_width() / 2 - 20);
		this.viewContainer = new openfl_display_Sprite();
		this._container.addChild(this.viewContainer);
		this.viewMain = new agario_module_shop_screens_ShopMainScreen();
		this.viewCoins = new agario_module_shop_screens_ShopCoinsScreen();
		this.viewMass = new agario_module_shop_screens_ShopMassScreen();
		this.viewSkins = new agario_module_shop_screens_ShopSkinsScreen();
		this.viewBoosts = new agario_module_shop_screens_ShopXPScreen();
		this.setView(this.viewMain);
		this.viewMain.coinsSectionBtn.addEventListener("click",$bind(this,this.handleCurrencySectionClick));
		this.viewMain.massSectionBtn.addEventListener("click",$bind(this,this.handleMassSectionClick));
		this.viewMain.skinsSectionBtn.addEventListener("click",$bind(this,this.handleSkinsSectionClick));
		this.viewMain.xpSectionBtn.addEventListener("click",$bind(this,this.handleBoostSectionClick));
		this.backButton.addEventListener("click",$bind(this,this.handleBackButton));
		var shop = Core.services.shop;
		shop.onSoftPurchaseResponse.add($bind(this,this.handleSoftPurchaseComplete));
		shop.onUseResponse.add($bind(this,this.handleUseResponse));
		shop.S_notEnoughCoins.add($bind(this,this.notEnoughCoins));
		shop.onIAPComplete.add($bind(this,this.handleIAPComplete));
		Core.get_events().addEventListener("ShopEvent::ENABLE_SHOP",$bind(this,this.enableShop));
		Core.get_events().addEventListener("ShopEvent::DISABLE_SHOP",$bind(this,this.disableShop));
		Core.get_events().addEventListener("shop_event::allow_disable_close",$bind(this,this.handleAllowDisableCloseEvent));
		this.addEventListener("close",function(e) {
			Core.get_events().dispatchEventWith("ShopEvent::SHOP_ENABLED");
			_g.enable();
			_g.closeButton.set_enabled(true);
		},false,0,true);
		this.initialized = true;
	}
	,handleAllowDisableCloseEvent: function(e) {
		var status = e.data;
		this.allowDisableClose = status;
	}
	,enableShop: function(e) {
		this.enable();
	}
	,enable: function() {
		oaktree_ext_ui_views_GenericDialog.prototype.enable.call(this);
		this.closeButton.set_enabled(true);
	}
	,disableShop: function(e) {
		this.closeButton.set_enabled(false);
		this.disable();
	}
	,onCloseHandler: function() {
		this.enableShop();
	}
	,onHudClick: function(e) {
		if(this.currentCategory == "shopCurrency") return;
		this.lastCategory = this.currentCategory;
		this.openCategory("shopCurrency");
	}
	,notEnoughCoins: function() {
		this.lastCategory = this.currentCategory;
		this.openCategory("shopCurrency");
		this.setTitle(oaktree_ext_localization_I18n.text("menu_not_enough_coins_title"));
	}
	,getItem: function(itemId) {
		return Core.models.shopItems.getItemByPurchaseId(itemId);
	}
	,handleUseResponse: function(item) {
		var useItem = item;
		if(useItem != null) Core.get_events().dispatchEventWith("ShopEvent::useProductResponse",useItem,true);
	}
	,displayProductPurchaseScreen: function(purchaseId) {
		Core.views.closeAllViews(agario_views_ShopDialog);
		var purchaseConfirmationDlg = new agario_module_shop_view_PurchaseCompleteDialog();
		Core.views.openView(purchaseConfirmationDlg,{ animate : true, allowClickClose : false, callerView : MiniclipAPI.instance.shopDialog});
		Core.get_events().dispatchEventWith("ShopEvent::DISABLE_SHOP");
		var productItem = this.getItem(purchaseId);
		if(productItem == null) return;
		Core.get_events().dispatchEventWith("ShopEvent::INAPP_PURCHASE_COMPLETE",productItem);
		Core.get_events().dispatchEventWith("ShopEvent::useProductResponse",productItem);
	}
	,handleIAPComplete: function(purchaseId) {
		this.displayProductPurchaseScreen(purchaseId);
	}
	,handleSoftPurchaseComplete: function(purchaseResponse) {
		haxe_Log.trace("d / shopdialog / " + haxe_format_JsonPrinter.print(purchaseResponse,null,null),{ fileName : "ShopDialog.hx", lineNumber : 298, className : "agario.views.ShopDialog", methodName : "handleSoftPurchaseComplete"});
		var item = this.getItem(purchaseResponse.get_purchaseId());
		if(purchaseResponse.get_result() == 1 && item != null) {
			if(js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopSkinItemVO)) {
				item.set_owned(true);
				if(!Core.ui.state.isPlayerAlive) Core.get_events().dispatchEventWith("ShopEvent::USE",item);
			} else if(js_Boot.__instanceof(item,agario_module_shop_models_vo_ShopBoostItemVO)) {
				var walletItem = Core.user.getWalletItemById((js_Boot.__cast(item , agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify);
				if(walletItem == null) {
					walletItem = new agario_module_shop_models_vo_WalletItemVO({ productId : (js_Boot.__cast(item , agario_module_shop_models_vo_ShopBoostItemVO)).productIdToQuantify, balance : 1});
					Core.user.wallet.push(walletItem);
				}
				Core.get_events().dispatchEventWith("ShopEvent::USE",item);
			}
			Core.user.handleUserUpdates(purchaseResponse.get_productUpdates());
			Core.get_events().dispatchEventWith("ShopEvent::softPurchaseComplete",item);
		} else {
			haxe_Log.trace("d / shopdialog / " + "Something went wrong on purchase",{ fileName : "ShopDialog.hx", lineNumber : 331, className : "agario.views.ShopDialog", methodName : "handleSoftPurchaseComplete"});
			Core.get_events().dispatchEventWith("shopevent::soft_purchase_failed",item);
		}
		if(this.currentView != null) this.currentView.updateView();
	}
	,_update: function() {
		this.titleLabel.set_x((this.maxWidth - this.titleLabel.get_textWidth()) * 0.5);
		this.titleLabel.set_y(30);
		this.backButton.set_x(30);
		this.backButton.set_y(this.titleLabel.get_y() + (this.titleLabel.get_height() - this.backButton.get_height()) / 2);
		this.currentView.set_x((this.maxWidth - this.currentView.maxWidth) / 2);
		this.currentView.set_y(this.titleLabel.get_y() + this.titleLabel.get_height() + 15);
		this.currentView.updateView();
		return this;
	}
	,setView: function(newView,title) {
		if(this.currentView != null) {
			this.viewContainer.removeChild(this.currentView);
			this.currentView.deinitialize();
			this.currentView = null;
		}
		if(!this.viewContainer.contains(newView)) {
			var innerMaxWidth = Math.floor(this.maxWidth - 20);
			var innerMaxHeight = Math.floor(this.maxHeight - this.titleLabel.get_height() - 50);
			newView.maxWidth = innerMaxWidth;
			newView.maxHeight = innerMaxHeight;
			this.viewContainer.addChild(newView);
			if(title != null && title != "") newView.set_name(title);
		}
		this.viewContainer.setChildIndex(newView,this.viewContainer.get_numChildren() - 1);
		newView.set_visible(true);
		this.currentView = newView;
		this.titleLabel.set_text(this.currentView.get_name());
		this._update();
	}
	,setTitle: function(title) {
		if(this.currentView != null) this.titleLabel.set_text(title);
		this._update();
	}
	,handleBackButton: function(e) {
		if(this.lastCategory != "" && this.lastCategory != this.currentCategory) {
			this.openCategory(this.lastCategory);
			this.lastCategory = this.currentCategory;
		} else {
			this.lastCategory = "shopMain";
			this.openCategory("shopMain");
		}
	}
	,handleCurrencySectionClick: function(e) {
		this.openCategory("shopCurrency",true);
	}
	,handleMassSectionClick: function(e) {
		this.openCategory("shopMass",true);
	}
	,handleSkinsSectionClick: function(e) {
		this.openCategory("shopSkins",true);
	}
	,handleBoostSectionClick: function(e) {
		this.openCategory("shopBoost",true);
	}
	,openCategory: function(target,reset_path,data) {
		if(reset_path == null) reset_path = false;
		if(this.lastCategory == "" || reset_path) this.lastCategory = "shopMain";
		if(!this.initialized) {
			if(data != null) this.redirect_data = data;
			if(reset_path != null) this.redirect_path = reset_path;
			this.redirect_to = target;
			return;
		}
		this.currentCategory = target;
		switch(target) {
		case "shopCurrency":
			this.setView(this.viewCoins);
			this.backButton.set_visible(true);
			break;
		case "shopMass":
			this.setView(this.viewMass);
			this.backButton.set_visible(true);
			break;
		case "shopSkins":
			this.setView(this.viewSkins);
			if(data != null) this.viewSkins.showTab(data.tab);
			this.backButton.set_visible(true);
			break;
		case "shopBoost":
			this.setView(this.viewBoosts);
			this.backButton.set_visible(true);
			break;
		default:
			this.setView(this.viewMain);
			this.backButton.set_visible(false);
		}
		this.redirect_to = "";
		this.redirect_data = null;
		this.redirect_path = false;
		openfl_Lib.current.stage.set_focus(openfl_Lib.current.stage);
	}
	,updateView: function() {
		if(this.currentView != null) this.currentView.updateView();
	}
	,destroy: function() {
		var shop = Core.services.shop;
		shop.onSoftPurchaseResponse.removeAll();
		shop.onUseResponse.removeAll();
		shop.S_notEnoughCoins.removeAll();
		shop.onIAPComplete.removeAll();
		Core.get_events().removeEventListener("ShopEvent::ENABLE_SHOP",$bind(this,this.enableShop));
		Core.get_events().removeEventListener("ShopEvent::DISABLE_SHOP",$bind(this,this.disableShop));
		Core.get_events().removeEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
		if(this.disconnectDialog != null) this.disconnectDialog.removeEventListener("close",$bind(this,this.closeDisconnect));
		this.viewMain.coinsSectionBtn.removeEventListener("click",$bind(this,this.handleCurrencySectionClick));
		this.viewMain.massSectionBtn.removeEventListener("click",$bind(this,this.handleMassSectionClick));
		this.viewMain.skinsSectionBtn.removeEventListener("click",$bind(this,this.handleSkinsSectionClick));
		this.viewMain.xpSectionBtn.removeEventListener("click",$bind(this,this.handleBoostSectionClick));
	}
	,dispose: function() {
		this.destroy();
		this.viewMain.dispose();
		this.viewCoins.dispose();
		this.viewMass.dispose();
		this.viewSkins.dispose();
		this.viewBoosts.dispose();
		Core.get_events().removeEventListener("ShopEvent::connectionLost",$bind(this,this.onConnectionLost));
		oaktree_ext_ui_views_GenericDialog.prototype.dispose.call(this);
	}
	,onEscapePress: function() {
		if(!this.isTopState()) return false;
		if(this.currentView == this.viewMain) this.close(); else this.handleBackButton(null);
		return true;
	}
	,__class__: agario_views_ShopDialog
});
var agario_views_ViewManager = function() {
	this.openedViews = [];
};
$hxClasses["agario.views.ViewManager"] = agario_views_ViewManager;
agario_views_ViewManager.__name__ = ["agario","views","ViewManager"];
agario_views_ViewManager.prototype = {
	openedViews: null
	,hasViews: null
	,get_hasViews: function() {
		return this.openedViews.length > 0;
	}
	,onResize: function(newWidth,newHeight) {
		var _g = 0;
		var _g1 = this.openedViews;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			v.resize(newWidth,newHeight);
		}
	}
	,openView: function(targetView,options) {
		if(options.callerView != null) targetView.caller = options.callerView;
		if(HxOverrides.indexOf(this.openedViews,targetView,0) != -1) this.closeView(targetView);
		this.openedViews.push(targetView);
		targetView.set_x((Core.stage.stageWidth - targetView.maxWidth) / 2);
		targetView.set_y((Core.stage.stageHeight - targetView.maxHeight) / 2);
		targetView.allowDisableClose = options.allowClickClose;
		oaktree_OakTree.engine.addChild(targetView);
		targetView.open(options.animate);
		targetView.addEventListener(oaktree_ext_ui_views_GenericDialog.CLOSE,$bind(this,this.onCloseView));
	}
	,onCloseView: function(e) {
		if(js_Boot.__instanceof(e.data,oaktree_ext_ui_View)) this.closeView(e.data);
	}
	,closeView: function(targetView,overrideLoadingViews) {
		if(overrideLoadingViews == null) overrideLoadingViews = false;
		if(HxOverrides.indexOf(this.openedViews,targetView,0) != -1) {
			if(targetView.isLoading && !overrideLoadingViews) return;
			if(targetView.caller != null) targetView.caller.enable();
			HxOverrides.remove(this.openedViews,targetView);
			targetView.close();
			targetView.dispose();
			targetView.removeFromParent();
		}
	}
	,updateViews: function() {
		var _g = 0;
		var _g1 = this.openedViews;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			v.updateView();
		}
	}
	,getTopView: function() {
		if(this.openedViews.length > 0) return this.openedViews[this.openedViews.length - 1];
		return null;
	}
	,closeTopView: function() {
		if(this.openedViews.length > 0) this.closeView(this.openedViews[this.openedViews.length - 1]);
	}
	,closeAllViews: function(except) {
		var _g = 0;
		var _g1 = this.openedViews;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(except != null && Type.getClassName(v == null?null:js_Boot.getClass(v)) != Type.getClassName(except)) this.closeView(v,true); else if(except == null) {
				this.closeView(v,true);
				return;
			}
		}
	}
	,enableViews: function() {
		var _g = 0;
		var _g1 = this.openedViews;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			v.enable();
		}
	}
	,__class__: agario_views_ViewManager
	,__properties__: {get_hasViews:"get_hasViews"}
};
var agario_views_components_ImageWrap = function(_opts) {
	openfl_display_Sprite.call(this);
	if(_opts.w == null) _opts.w = -1;
	_opts.w;
	if(_opts.h == null) _opts.h = -1;
	_opts.h;
	this.options = _opts;
	this.init();
};
$hxClasses["agario.views.components.ImageWrap"] = agario_views_components_ImageWrap;
agario_views_components_ImageWrap.__name__ = ["agario","views","components","ImageWrap"];
agario_views_components_ImageWrap.__super__ = openfl_display_Sprite;
agario_views_components_ImageWrap.prototype = $extend(openfl_display_Sprite.prototype,{
	options: null
	,imageMask: null
	,init: function() {
		if(Core.remoteAssets.exists(this.options.url,"IMAGE")) Core.remoteAssets.getBitmapData(this.options.url).then($bind(this,this.handleImageLoading)); else {
			this.imageMask = new openfl_display_Sprite();
			if(this.options.w > 0) {
				if(this.options.h < 0) this.options.h = this.options.w;
				this.imageMask.get_graphics().beginFill(16777215,0.2);
				this.imageMask.get_graphics().drawRect(0,0,this.options.w,this.options.h);
				this.imageMask.get_graphics().endFill();
				this.addChild(this.imageMask);
			}
			Core.remoteAssets.loadBitmap(this.options.url,this.options.url).then($bind(this,this.handleImageLoading)).catchError($bind(this,this.handleError));
		}
	}
	,handleError: function(e) {
		haxe_Log.trace("d / imagewrap / " + ("failed to load " + this.options.url),{ fileName : "ImageWrap.hx", lineNumber : 64, className : "agario.views.components.ImageWrap", methodName : "handleError"});
	}
	,handleImageLoading: function(data) {
		if(data == null) return;
		var bitmap = new openfl_display_Bitmap(data);
		this.addChild(bitmap);
		var ratio = this.options.w / bitmap.get_width();
		bitmap.set_scaleX(bitmap.set_scaleY(ratio));
		bitmap.smoothing = true;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,__class__: agario_views_components_ImageWrap
});
var oaktree_ext_ui_controls_TabControl = function() {
	this.line = new openfl_display_Sprite();
	oaktree_ext_ui_Control.call(this,{ name : "tabcontrol"});
	this.items = [];
	this.onChange = new msignal_Signal1();
	this.addEventListener("addedToStage",$bind(this,this.onAdded));
};
$hxClasses["oaktree.ext.ui.controls.TabControl"] = oaktree_ext_ui_controls_TabControl;
oaktree_ext_ui_controls_TabControl.__name__ = ["oaktree","ext","ui","controls","TabControl"];
oaktree_ext_ui_controls_TabControl.__super__ = oaktree_ext_ui_Control;
oaktree_ext_ui_controls_TabControl.prototype = $extend(oaktree_ext_ui_Control.prototype,{
	line: null
	,items: null
	,length: null
	,get_length: function() {
		return this.items.length;
	}
	,selectedId: null
	,current: null
	,onChange: null
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.line = new openfl_display_Sprite();
		this.line.get_graphics().lineStyle(2,12566463,1);
		this.line.get_graphics().moveTo(10,0);
		this.line.get_graphics().lineTo(this.maxWidth - 80,0);
		this.line.set_y(30);
		this.addChild(this.line);
	}
	,setTab: function(tabId) {
		this.changeTab(this.items[tabId],true);
	}
	,setTabByName: function(tabName) {
		var t1 = this.items.filter(function(t) {
			return t.id == tabName;
		})[0];
		if(t1 != null) {
			haxe_Log.trace("d / tabcontrol / " + ("setTabByName: " + tabName),{ fileName : "TabControl.hx", lineNumber : 57, className : "oaktree.ext.ui.controls.TabControl", methodName : "setTabByName"});
			this.changeTab(t1,true);
		} else this.setTab(0);
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.removeChild(item);
			item.reset();
		}
		this.current = null;
		this.items = [];
	}
	,addTab: function(_tab) {
		if(this.items.length == 0) {
			_tab.set_selected(true);
			this.current = _tab;
			this.selectedId = 0;
		}
		this.items.push(_tab);
		this.addChild(_tab);
		_tab.onClick.add($bind(this,this.onItemClick));
		this.update_layout();
		return _tab;
	}
	,changeTab: function(_item,auto) {
		if(auto == null) auto = false;
		var _g1 = 0;
		var _g = this.items.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.items[i].set_selected(this.items[i] == _item);
			if(this.items[i].selected) {
				this.current = this.items[i];
				this.selectedId = i;
			}
		}
		if(!auto) this.onChange.dispatch(_item);
	}
	,onItemClick: function(_item) {
		this.changeTab(_item,false);
	}
	,update_layout: function() {
		var xx = 10;
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.set_x(xx);
			xx += Std["int"](item.get_width()) + 5;
		}
		this.update_bounds();
	}
	,__class__: oaktree_ext_ui_controls_TabControl
	,__properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__,{get_length:"get_length"})
});
var agario_views_components_SkinShopTabControl = function() {
	oaktree_ext_ui_controls_TabControl.call(this);
};
$hxClasses["agario.views.components.SkinShopTabControl"] = agario_views_components_SkinShopTabControl;
agario_views_components_SkinShopTabControl.__name__ = ["agario","views","components","SkinShopTabControl"];
agario_views_components_SkinShopTabControl.__super__ = oaktree_ext_ui_controls_TabControl;
agario_views_components_SkinShopTabControl.prototype = $extend(oaktree_ext_ui_controls_TabControl.prototype,{
	setTabByName: function(tabName) {
		var hasOwned = this.items.filter(function(t) {
			return t.id == "owned";
		}).length > 0;
		var selectedTabs = this.items.filter(function(t1) {
			return t1.id == tabName;
		});
		var selectedTab;
		if(selectedTabs.length > 0) selectedTab = selectedTabs[0]; else selectedTab = null;
		if(selectedTab != null) {
			haxe_Log.trace("d / skinshoptabcontrol / " + ("setTabByName: " + tabName),{ fileName : "SkinShopTabControl.hx", lineNumber : 24, className : "agario.views.components.SkinShopTabControl", methodName : "setTabByName"});
			this.changeTab(selectedTab,true);
		} else if(hasOwned && tabName.toUpperCase() != "OWNED") {
			haxe_Log.trace("d / skinshoptabcontrol / " + ("Tab not found: " + tabName),{ fileName : "SkinShopTabControl.hx", lineNumber : 30, className : "agario.views.components.SkinShopTabControl", methodName : "setTabByName"});
			this.setTabByName("OWNED");
		} else this.setTab(0);
	}
	,__class__: agario_views_components_SkinShopTabControl
});
var agario_views_controls_ArrowCircleButton = function() {
	var backButtonBitmapData = Core.get_assets().getTexture("back_button").get_bitmapData();
	this.upState = new openfl_display_Bitmap(backButtonBitmapData);
	this.upState.set_alpha(0.8);
	this.downState = new openfl_display_Bitmap(backButtonBitmapData);
	this.overState = new openfl_display_Bitmap(backButtonBitmapData);
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.views.controls.ArrowCircleButton"] = agario_views_controls_ArrowCircleButton;
agario_views_controls_ArrowCircleButton.__name__ = ["agario","views","controls","ArrowCircleButton"];
agario_views_controls_ArrowCircleButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_ArrowCircleButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_views_controls_ArrowCircleButton
});
var agario_views_controls_CloseButton = function() {
	var closeBitmapData = Core.get_assets().getAtlas("main_shop").getTexture("Close").get_bitmapData();
	var closeDisabledBitmapData = Core.get_assets().getAtlas("main_shop").getTexture("Close_disabled").get_bitmapData();
	this.upState = new openfl_display_Bitmap(closeBitmapData);
	this.overState = new openfl_display_Bitmap(closeDisabledBitmapData);
	this.downState = new openfl_display_Bitmap(closeBitmapData);
	this.disabledState = new openfl_display_Bitmap(closeDisabledBitmapData);
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.views.controls.CloseButton"] = agario_views_controls_CloseButton;
agario_views_controls_CloseButton.__name__ = ["agario","views","controls","CloseButton"];
agario_views_controls_CloseButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_CloseButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_views_controls_CloseButton
});
var agario_views_controls_ColorButton = function(_options) {
	this._options = _options;
	if(_options.color == null) _options.color = 16711680;
	_options.color;
	if(_options.overColor == null) _options.overColor = _options.color;
	_options.overColor;
	if(_options.w == null) _options.w = 140;
	_options.w;
	if(_options.h == null) _options.h = 30;
	_options.h;
	if(_options.radius == null) _options.radius = 10;
	_options.radius;
	if(_options.text == null) _options.text = "";
	_options.text;
	if(_options.textColor == null) _options.textColor = 16777215;
	_options.textColor;
	if(_options.textColorOver == null) _options.textColorOver = 3355443;
	_options.textColorOver;
	if(_options.icon == null) _options.icon = null;
	_options.icon;
	if(_options.fontSize == null) _options.fontSize = 12;
	_options.fontSize;
	if(_options.bold == null) _options.bold = false;
	_options.bold;
	if(_options.showOutline == null) _options.showOutline = false;
	_options.showOutline;
	if(_options.outlineColor == null) _options.outlineColor = 0;
	_options.outlineColor;
	if(_options.iconPosition == null) _options.iconPosition = "right";
	_options.iconPosition;
	if(_options.iconPadding == null) _options.iconPadding = 0;
	_options.iconPadding;
	var btnState = new openfl_display_Sprite();
	this.normalBtnFace = new openfl_display_Shape();
	var btnWidth = _options.w;
	if(_options.showOutline) {
		this.normalBtnFace.get_graphics().lineStyle(2,_options.outlineColor);
		btnWidth = _options.w - 1;
	}
	this.normalBtnFace.get_graphics().beginFill(_options.color,1);
	this.normalBtnFace.get_graphics().drawRoundRect(0,0,btnWidth,_options.h,_options.radius,_options.radius);
	this.normalBtnFace.get_graphics().endFill();
	btnState.addChild(this.normalBtnFace);
	this.overBtnFace = new openfl_display_Shape();
	if(_options.showOutline) this.overBtnFace.get_graphics().lineStyle(2,_options.outlineColor);
	this.overBtnFace.get_graphics().beginFill(_options.overColor,1);
	this.overBtnFace.get_graphics().drawRoundRect(0,0,btnWidth,_options.h,_options.radius,_options.radius);
	this.overBtnFace.get_graphics().endFill();
	btnState.addChild(this.overBtnFace);
	this.overBtnFace.set_visible(false);
	this.btnLabel = new oaktree_ext_ui_controls_IconLabel({ text : _options.text, fontSize : _options.fontSize, align : 0, color : 16777215, bold : _options.bold},_options.icon,_options.iconPosition,_options.iconPadding);
	btnState.addChild(this.btnLabel);
	this.upState = this.downState = this.overState = btnState;
	oaktree_ext_ui_controls_Button.call(this);
	this.position();
};
$hxClasses["agario.views.controls.ColorButton"] = agario_views_controls_ColorButton;
agario_views_controls_ColorButton.__name__ = ["agario","views","controls","ColorButton"];
agario_views_controls_ColorButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_ColorButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	btnLabel: null
	,normalBtnFace: null
	,overBtnFace: null
	,_options: null
	,text: null
	,get_text: function() {
		return this.text;
	}
	,set_text: function(value) {
		this.btnLabel.set_text(value);
		this.position();
		return this.text = value;
	}
	,position: function() {
		if(this._options.icon != null && this.btnLabel.get_height() <= this._options.icon.get_height()) this.btnLabel.set_y((this._options.h - this._options.icon.get_height() / 2) * 0.5); else this.btnLabel.set_y((this._options.h - this.btnLabel.get_height()) * 0.5);
	}
	,updateState: function() {
		oaktree_ext_ui_controls_Button.prototype.updateState.call(this);
		if(this.mouseIsOver) {
			this.overBtnFace.set_visible(true);
			this.normalBtnFace.set_visible(false);
			this.btnLabel.label.set_textColor(this._options.textColorOver);
		} else {
			this.overBtnFace.set_visible(false);
			this.normalBtnFace.set_visible(true);
			this.btnLabel.label.set_textColor(this._options.textColor);
		}
	}
	,hideIcon: function() {
		this.btnLabel.set_icon(null);
	}
	,__class__: agario_views_controls_ColorButton
	,__properties__: $extend(oaktree_ext_ui_controls_Button.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var agario_views_controls_FreeCoinsButton = function() {
	openfl_display_Sprite.call(this);
	this.freeCoinsBtn = new agario_views_controls_ColorButton({ color : 14699578, overColor : 14699578, text : "Free Coins \n 20 Coins", textColorOver : 16777215, textColor : 16777215, icon : this.freeCoinsIcon, w : 140, h : 50, fontSize : 14, bold : true});
	this.addChild(this.freeCoinsBtn);
	this.freeCoinsBtn.set_enabled(false);
	this.freeCoinsBtn.set_alpha(0.5);
	this.freeCoinsIcon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
};
$hxClasses["agario.views.controls.FreeCoinsButton"] = agario_views_controls_FreeCoinsButton;
agario_views_controls_FreeCoinsButton.__name__ = ["agario","views","controls","FreeCoinsButton"];
agario_views_controls_FreeCoinsButton.__super__ = openfl_display_Sprite;
agario_views_controls_FreeCoinsButton.prototype = $extend(openfl_display_Sprite.prototype,{
	freeCoinsBtn: null
	,timeLeft: null
	,freeCoinsIcon: null
	,setTimeLeft: function(timestampLeft) {
		this.timeLeft = timestampLeft;
		if(this.timeLeft > 0) {
			this.freeCoinsBtn = new agario_views_controls_ColorButton({ color : 14699578, overColor : 14699578, text : "Collect in: \n", textColorOver : 16777215, textColor : 16777215, icon : this.freeCoinsIcon, w : 140, h : 50, fontSize : 14, bold : true});
			this.startTimedEvents();
		} else this.freeCoinsBtn = new agario_views_controls_ColorButton({ color : 5880408, overColor : 4294721, textColorOver : 16777215, textColor : 16777215, text : "Free Coins \n 20 Coins", icon : this.freeCoinsIcon, w : 140, h : 50, fontSize : 14, bold : true});
		this.addChild(this.freeCoinsBtn);
		this.freeCoinsBtn.addEventListener("click",$bind(this,this.onFreeCoinsClick));
		this.freeCoinsBtn.set_x(0);
	}
	,onFreeCoinsClick: function(e) {
		e.stopImmediatePropagation();
		this.freeCoinsBtn.set_enabled(false);
		this.freeCoinsBtn.delayedEnable();
		this.dispatchEvent(e);
	}
	,startTimedEvents: function() {
		var _g = this;
		var timer = new haxe_Timer(1000);
		timer.run = function() {
			var secs = Math.round(_g.timeLeft / 1000);
			_g.freeCoinsBtn.set_text("Collect in: \n" + Math.floor(secs / 60) + "m " + (secs % 60 >= 10?"":"0") + secs % 60 + "s");
			_g.timeLeft -= 1000;
			if(secs <= 0) {
				secs = 0;
				timer.stop();
				_g.dispatchEvent(new openfl_events_Event("complete"));
				_g.freeCoinsBtn.set_enabled(true);
			}
		};
	}
	,__class__: agario_views_controls_FreeCoinsButton
});
var agario_views_controls_HintTooltip = function(displayText,w,h,direction) {
	if(direction == null) direction = "left";
	if(h == null) h = 80;
	if(w == null) w = 140;
	openfl_display_Sprite.call(this);
	var atlas = Core.get_assets().getAtlas("main_shop");
	this.icon = new openfl_display_Bitmap(atlas.get("hint").get_bitmapData());
	this.closeIcon = new openfl_display_Bitmap(atlas.get("Close").get_bitmapData());
	this.direction = direction;
	this.h = h;
	this.w = w;
	this.displayText = displayText;
	this.addEventListener("click",$bind(this,this.onHintClick));
	this.addChild(this.icon);
	this.closeIcon.set_x((this.icon.get_width() - this.closeIcon.get_width()) / 2);
	this.closeIcon.set_y((this.icon.get_height() - this.closeIcon.get_height()) / 2);
	this.drawShape();
	this.createLabel();
	this.doLayout();
	this.buttonMode = true;
	this.useHandCursor = true;
	this.opened = false;
};
$hxClasses["agario.views.controls.HintTooltip"] = agario_views_controls_HintTooltip;
agario_views_controls_HintTooltip.__name__ = ["agario","views","controls","HintTooltip"];
agario_views_controls_HintTooltip.__super__ = openfl_display_Sprite;
agario_views_controls_HintTooltip.prototype = $extend(openfl_display_Sprite.prototype,{
	icon: null
	,closeIcon: null
	,displayText: null
	,h: null
	,quadShape: null
	,direction: null
	,lbl: null
	,w: null
	,opened: null
	,doLayout: function() {
		if(this.direction.toLowerCase() == "left") {
			this.quadShape.set_x(-this.quadShape.get_width() + this.icon.get_width() + 5);
			this.quadShape.set_y(-5);
			this.lbl.set_x(this.quadShape.get_x() + (this.quadShape.get_width() - this.lbl.get_width()) / 2 - 10);
			this.lbl.set_y(this.quadShape.get_y() + (this.quadShape.get_height() - this.lbl.get_height()) / 2);
		}
	}
	,createLabel: function() {
		var _options = { };
		_options.align = 0;
		_options.text = this.displayText;
		_options.width = this.quadShape.get_width() - 40;
		_options.color = 3355443;
		this.lbl = new oaktree_ext_ui_Label(_options);
		this.lbl.set_selectable(false);
		this.lbl.mouseEnabled = false;
	}
	,drawShape: function() {
		this.quadShape = new openfl_display_Shape();
		this.quadShape.get_graphics().beginFill(16777215);
		this.quadShape.get_graphics().drawRoundRect(0,0,this.w,this.h,5,5);
		this.quadShape.get_graphics().endFill();
	}
	,onHintClick: function(e) {
		if(this.opened) {
			this.closeHint();
			this.dispatchEvent(new agario_module_shop_events_HintTooltipEvent(agario_module_shop_events_HintTooltipEvent.CLOSED));
		} else {
			this.openHint();
			this.dispatchEvent(new agario_module_shop_events_HintTooltipEvent(agario_module_shop_events_HintTooltipEvent.OPENED));
		}
	}
	,openHint: function() {
		this.addChild(this.quadShape);
		this.addChild(this.lbl);
		this.addChild(this.closeIcon);
		if(this.contains(this.icon)) this.removeChild(this.icon);
		this.opened = true;
	}
	,closeHint: function() {
		if(this.quadShape.parent != null) {
			this.quadShape.parent.removeChild(this.quadShape);
			this.lbl.parent.removeChild(this.lbl);
		}
		if(this.contains(this.closeIcon)) this.removeChild(this.closeIcon);
		this.addChild(this.icon);
		this.opened = false;
	}
	,__class__: agario_views_controls_HintTooltip
});
var agario_views_controls_ImageButton = function(bitmap) {
	this.upState = this.overState = this.downState = this.disabledState = bitmap;
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.views.controls.ImageButton"] = agario_views_controls_ImageButton;
agario_views_controls_ImageButton.__name__ = ["agario","views","controls","ImageButton"];
agario_views_controls_ImageButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_ImageButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_views_controls_ImageButton
});
var agario_views_controls_QuantityCircle = function(quantity) {
	openfl_display_Sprite.call(this);
	this.circle = new openfl_display_Sprite();
	this.circle.get_graphics().beginFill(15742775,1);
	this.circle.get_graphics().lineStyle(2,12783377);
	this.circle.get_graphics().drawCircle(0,0,10);
	this.circle.get_graphics().endFill();
	this.addChild(this.circle);
	this.quantityLabel = new oaktree_ext_ui_Label({ text : quantity == null?"null":"" + quantity, align : 3, color : 16777215});
	this.quantityLabel.set_autoSize(1);
	this.quantityLabel.set_selectable(false);
	this.addChild(this.quantityLabel);
	this.quantityLabel.addEventListener("addedToStage",$bind(this,this.onAdded));
};
$hxClasses["agario.views.controls.QuantityCircle"] = agario_views_controls_QuantityCircle;
agario_views_controls_QuantityCircle.__name__ = ["agario","views","controls","QuantityCircle"];
agario_views_controls_QuantityCircle.__super__ = openfl_display_Sprite;
agario_views_controls_QuantityCircle.prototype = $extend(openfl_display_Sprite.prototype,{
	quantityLabel: null
	,circle: null
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.doLayout();
	}
	,doLayout: function() {
		this.quantityLabel.set_x(-this.quantityLabel.get_width() / 2);
		this.quantityLabel.set_y(-this.quantityLabel.get_height() / 2);
	}
	,__class__: agario_views_controls_QuantityCircle
});
var agario_views_controls_SemiRoundButton = function(label,w,h) {
	if(h == null) h = 65;
	if(w == null) w = 85;
	var stateUp = new openfl_display_Sprite();
	var stateOver = new openfl_display_Sprite();
	var stateDown = new openfl_display_Sprite();
	var labelUp = new oaktree_ext_ui_Label({ text : label, fontSize : 18, align : 3, color : 16777215});
	var labelOver = new oaktree_ext_ui_Label({ text : label, fontSize : 18, align : 3, color : 16777215});
	var labelDown = new oaktree_ext_ui_Label({ text : label, fontSize : 18, align : 3, color : 16777215});
	labelUp.set_autoSize(1);
	labelOver.set_autoSize(1);
	labelDown.set_autoSize(1);
	var upBackground = new openfl_display_Shape();
	upBackground.get_graphics().beginFill(6349312);
	oaktree_utils_MCGraphics.drawRoundRectComplex(upBackground.get_graphics(),0,0,w,h,0,5,0,5);
	upBackground.get_graphics().endFill();
	stateUp.addChild(upBackground);
	stateUp.addChild(labelUp);
	var overBackground = new openfl_display_Shape();
	overBackground.get_graphics().beginFill(4760069);
	oaktree_utils_MCGraphics.drawRoundRectComplex(overBackground.get_graphics(),0,0,w,h,0,5,0,5);
	overBackground.get_graphics().endFill();
	stateOver.addChild(overBackground);
	stateOver.addChild(labelOver);
	var downBackground = new openfl_display_Shape();
	downBackground.get_graphics().beginFill(2446594);
	oaktree_utils_MCGraphics.drawRoundRectComplex(downBackground.get_graphics(),0,0,w,h,0,5,0,5);
	downBackground.get_graphics().endFill();
	stateDown.addChild(downBackground);
	stateDown.addChild(labelDown);
	this.upState = this.disabledState = stateUp;
	this.overState = stateOver;
	this.downState = stateDown;
	labelOver.set_y(labelUp.set_y(labelDown.set_y((h - labelUp.get_height()) / 2)));
	labelOver.set_x(labelUp.set_x(labelDown.set_x(20)));
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["agario.views.controls.SemiRoundButton"] = agario_views_controls_SemiRoundButton;
agario_views_controls_SemiRoundButton.__name__ = ["agario","views","controls","SemiRoundButton"];
agario_views_controls_SemiRoundButton.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_SemiRoundButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: agario_views_controls_SemiRoundButton
});
var agario_views_controls_ShopHUD = function() {
	this.amount = 0;
	this.backgroundShape = new openfl_display_Shape();
	this.stateUp = new openfl_display_Sprite();
	this.amountLabel = new oaktree_ext_ui_Label({ text : "", fontSize : 16, color : 3421236, align : 4});
	this.amountLabel.set_backgroundColor(16711935);
	this.amountLabel.set_name("0");
	this.icon = new openfl_display_Bitmap(Core.get_assets().getTexture("currency_icon").get_bitmapData());
	this.upState = this.disabledState = this.stateUp;
	this.overState = this.stateUp;
	this.downState = this.stateUp;
	oaktree_ext_ui_controls_Button.call(this);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["agario.views.controls.ShopHUD"] = agario_views_controls_ShopHUD;
agario_views_controls_ShopHUD.__name__ = ["agario","views","controls","ShopHUD"];
agario_views_controls_ShopHUD.__super__ = oaktree_ext_ui_controls_Button;
agario_views_controls_ShopHUD.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	amountLabel: null
	,outlineShape: null
	,backgroundShape: null
	,plusButton: null
	,stateUp: null
	,countDownTimer: null
	,icon: null
	,amount: null
	,get_amount: function() {
		return this.amount;
	}
	,set_amount: function(value) {
		this.updateAmount(value);
		return this.amount = value;
	}
	,onAddedToStage: function(e) {
		oaktree_ext_ui_controls_Button.prototype.onAddedToStage.call(this,e);
		this.clear();
		this.init();
		Core.get_events().addEventListener(agario_module_shop_events_WalletEvent.WALLET_UPDATED,$bind(this,this.handleWalletUpdate));
		this.updateAmount(Core.user.get_coins());
	}
	,handleWalletUpdate: function(event) {
		Core.services.gameui.setUserCoins(Core.user.get_coins());
		this.updateAmount(Core.user.get_coins());
	}
	,init: function() {
		if(this.plusButton == null) this.plusButton = this.drawPlusBtn();
		this.stateUp.addChild(this.plusButton);
		this.plusButton.set_x(0);
		this.icon.set_x(this.plusButton.get_x() - this.icon.get_width() - 5);
		this.icon.set_y(this.plusButton.get_y() + (this.plusButton.get_height() - this.icon.get_height()) / 2);
		this.addChild(this.icon);
		this.addChild(this.amountLabel);
		this.amountLabel.set_y(this.plusButton.get_y() + (this.plusButton.get_height() - this.amountLabel.get_height()) / 2 + 2);
		this.outlineShape = this.drawOutline(this.amountLabel.get_textWidth());
		this.outlineShape.set_x(this.plusButton.get_x() - (this.outlineShape.get_width() - this.plusButton.get_width()) + 1);
		this.outlineShape.set_y(this.plusButton.get_y() - 1);
		this.stateUp.addChild(this.outlineShape);
		this.backgroundShape = this.drawBackground(this.backgroundShape,this.outlineShape.get_width());
		this.backgroundShape.set_x(this.outlineShape.get_x());
		this.backgroundShape.set_y(this.outlineShape.get_y());
		this.stateUp.addChildAt(this.backgroundShape,0);
		this.upState = this.disabledState = this.stateUp;
		this.overState = this.stateUp;
		this.downState = this.stateUp;
	}
	,drawPlusBtn: function() {
		var plusBtn = new openfl_display_Sprite();
		var plusBg = new openfl_display_Shape();
		plusBg.get_graphics().beginFill(6349312);
		oaktree_utils_MCGraphics.drawRoundRectComplex(plusBg.get_graphics(),0,0,30,32,0,4,0,4);
		plusBg.get_graphics().endFill();
		plusBtn.addChild(plusBg);
		var plusLabel = new oaktree_ext_ui_Label({ text : "+", fontSize : 24, bold : true, color : 16777215});
		plusLabel.set_x((plusBg.get_width() - plusLabel.get_width()) / 2);
		plusLabel.set_y((plusBg.get_height() - plusLabel.get_height()) / 2);
		plusBtn.addChild(plusLabel);
		return plusBtn;
	}
	,drawBackground: function(pShape,pWidth) {
		pShape.get_graphics().clear();
		pShape.get_graphics().beginFill(16777215,1);
		pShape.get_graphics().drawRoundRect(0,0,pWidth,34,10,10);
		pShape.get_graphics().endFill();
		return pShape;
	}
	,drawOutline: function(textWidth) {
		var stateUpOutline = new openfl_display_Shape();
		stateUpOutline.get_graphics().lineStyle(2,5093376,1,true,2);
		stateUpOutline.get_graphics().drawRoundRect(0,0,textWidth + this.plusButton.get_width() + 40,34,10,10);
		stateUpOutline.set_cacheAsBitmap(true);
		return stateUpOutline;
	}
	,updateAmount: function(value) {
		this.countDownTimer = new haxe_Timer(1);
		this.countDown(this.amountLabel,value,$bind(this,this.onAmountUpdate));
	}
	,onAmountUpdate: function() {
		this.clear();
		this.amountLabel.set_x(this.icon.get_x() - this.amountLabel.get_textWidth() - 10);
		this.init();
	}
	,countDown: function(lbl,value,completeCallback) {
		var _g = this;
		var oldValue = Std.parseInt(lbl.get_name());
		var diff = Math.abs((value - oldValue) / 5);
		if(oldValue > value) {
			lbl.set_name(Std.string(oldValue - Math.ceil(diff)));
			this.updateHudValue(lbl);
		} else if(oldValue < value) {
			lbl.set_name(Std.string(oldValue + Math.ceil(diff)));
			this.updateHudValue(lbl);
		}
		if(oldValue != value) this.countDownTimer.run = function() {
			_g.countDown(lbl,value,completeCallback);
		}; else {
			lbl.set_name(value == null?"null":"" + value);
			this.updateHudValue(lbl);
			this.countDownTimer.stop();
		}
		completeCallback();
	}
	,updateHudValue: function(lbl) {
		var coinAmountString = oaktree_utils_StringUtility.formatNumber(Std.parseInt(lbl.get_name()),"n"," ");
		lbl.set_text(coinAmountString);
	}
	,clear: function() {
		while(this.stateUp.get_numChildren() > 0) this.stateUp.removeChildAt(0);
	}
	,__class__: agario_views_controls_ShopHUD
	,__properties__: $extend(oaktree_ext_ui_controls_Button.prototype.__properties__,{set_amount:"set_amount",get_amount:"get_amount"})
});
var agario_views_controls_StampSticker = function(txt) {
	openfl_display_Sprite.call(this);
	this.txt = txt;
	this.initialize();
};
$hxClasses["agario.views.controls.StampSticker"] = agario_views_controls_StampSticker;
agario_views_controls_StampSticker.__name__ = ["agario","views","controls","StampSticker"];
agario_views_controls_StampSticker.__super__ = openfl_display_Sprite;
agario_views_controls_StampSticker.prototype = $extend(openfl_display_Sprite.prototype,{
	txt: null
	,stamp: null
	,stampLabel: null
	,initialize: function() {
		this.stamp = new openfl_display_Bitmap(Core.get_assets().getTexture("sticker").get_bitmapData());
		this.addChild(this.stamp);
		this.stampLabel = new oaktree_ext_ui_Label({ text : this.txt, fontSize : 11, align : 0, color : 16777215, width : 60, bold : true});
		this.stampLabel.set_wordWrap(true);
		this.stampLabel.set_multiline(true);
		this.stampLabel.set_selectable(false);
		this.stampLabel.set_cacheAsBitmap(true);
		this.stampLabel.set_height(30);
		this.stampLabel.addEventListener("addedToStage",$bind(this,this.onAdded));
		this.addChild(this.stampLabel);
		this.stamp.set_x(-this.stamp.get_width() / 2);
		this.stamp.set_y(-this.stamp.get_height() / 2);
	}
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.stampLabel.set_x(-this.stampLabel.get_width() / 2);
		this.stampLabel.set_y(-this.stampLabel.get_height() / 2);
	}
	,__class__: agario_views_controls_StampSticker
});
var assets_manager_FileLoader = function(maxConnectionLimit) {
	if(maxConnectionLimit == null) maxConnectionLimit = 3;
	this.onFilesLoaded = new msignal_Signal1();
	this.onFileLoaded = new msignal_Signal1();
	this.uniqueCallbacks = new haxe_ds_StringMap();
	this.queuedFiles = [];
	this.manager = new assets_manager_loaders_LoaderManager(maxConnectionLimit);
	this.manager.addEventListener("complete",$bind(this,this.onManagerComplete));
	this.manager.addEventListener("evtFileLoadComplete",$bind(this,this.onManagerFileComplete));
};
$hxClasses["assets.manager.FileLoader"] = assets_manager_FileLoader;
assets_manager_FileLoader.__name__ = ["assets","manager","FileLoader"];
assets_manager_FileLoader.prototype = {
	manager: null
	,onFilesLoaded: null
	,onFileLoaded: null
	,queuedFiles: null
	,uniqueCallbacks: null
	,loadText: function(id,onComplete) {
		this.loadFile(id,assets_manager_misc_FileType.TEXT,onComplete);
	}
	,loadImage: function(id,onComplete) {
		this.loadFile(id,assets_manager_misc_FileType.IMAGE,onComplete);
	}
	,loadBinary: function(id,onComplete) {
		this.loadFile(id,assets_manager_misc_FileType.BINARY,onComplete);
	}
	,loadSound: function(id,onComplete) {
		this.loadFile(id,assets_manager_misc_FileType.SOUND,onComplete);
	}
	,loadFile: function(id,type,onComplete) {
		if(onComplete != null) this.storeCallback(id,onComplete);
		if(!this.exists(id)) this.addLoader(id,type);
		this.manager.loadList([id]);
	}
	,queueText: function(id,onComplete) {
		this.queueFile(id,assets_manager_misc_FileType.TEXT,onComplete);
	}
	,queueImage: function(id,onComplete) {
		this.queueFile(id,assets_manager_misc_FileType.IMAGE,onComplete);
	}
	,queueBinary: function(id,onComplete) {
		this.queueFile(id,assets_manager_misc_FileType.BINARY,onComplete);
	}
	,queueSound: function(id,onComplete) {
		this.queueFile(id,assets_manager_misc_FileType.SOUND,onComplete);
	}
	,queueFile: function(id,type,onComplete) {
		if(onComplete != null) this.storeCallback(id,onComplete);
		if(!this.exists(id)) this.addLoader(id,type);
		if(HxOverrides.indexOf(this.queuedFiles,id,0) == -1) this.queuedFiles.push(id);
	}
	,loadQueuedFiles: function() {
		if(this.queuedFiles.length == 0) return;
		var qf = this.queuedFiles.slice();
		this.queuedFiles = [];
		this.manager.loadList(qf);
	}
	,getLoadedImage: function(id) {
		var loader = this.getLoadedFile(id);
		if(loader != null && loader.type == assets_manager_misc_FileType.IMAGE) return loader.data;
		return null;
	}
	,getLoadedText: function(id) {
		var loader = this.getLoadedFile(id);
		if(loader != null && loader.type == assets_manager_misc_FileType.TEXT) return loader.data;
		return null;
	}
	,getLoadedBytes: function(id) {
		var loader = this.getLoadedFile(id);
		if(loader != null && loader.type == assets_manager_misc_FileType.BINARY) return loader.data;
		return null;
	}
	,getLoadedSound: function(id) {
		var loader = this.getLoadedFile(id);
		if(loader != null && loader.type == assets_manager_misc_FileType.SOUND) return loader.data;
		return null;
	}
	,getLoadedFile: function(id) {
		var loader = this.manager.findLoader(id);
		if(loader == null) return null;
		var asset = { id : id, type : loader.type, status : loader.status, data : loader.data};
		return asset;
	}
	,exists: function(file) {
		return this.manager.findLoader(file) != null;
	}
	,listFiles: function(type) {
		var result = [];
		var $it0 = this.manager.loaders.iterator();
		while( $it0.hasNext() ) {
			var loader = $it0.next();
			if(loader.type == type || type == null) result.push(loader.id);
		}
		return result;
	}
	,removeFile: function(id,dispose) {
		if(dispose == null) dispose = false;
		if(this.manager.remove(id,dispose)) {
			if(HxOverrides.indexOf(this.queuedFiles,id,0) != -1) HxOverrides.remove(this.queuedFiles,id);
			if(this.uniqueCallbacks.exists(id)) this.uniqueCallbacks.remove(id);
			return true;
		}
		return false;
	}
	,destroy: function(dispose) {
		if(dispose == null) dispose = false;
		this.onFileLoaded.removeAll();
		this.onFileLoaded = null;
		this.onFilesLoaded.removeAll();
		this.onFilesLoaded = null;
		this.manager.removeEventListener("complete",$bind(this,this.onManagerComplete));
		this.manager.removeEventListener("evtFileLoadComplete",$bind(this,this.onManagerFileComplete));
		var files = this.listFiles();
		var _g = 0;
		while(_g < files.length) {
			var file = files[_g];
			++_g;
			this.removeFile(file,dispose);
		}
		this.queuedFiles = null;
		this.uniqueCallbacks = null;
	}
	,addLoader: function(id,type) {
		switch(type[1]) {
		case 0:
			this.manager.addLoader(new assets_manager_loaders_ImageLoader(id));
			break;
		case 1:
			this.manager.addLoader(new assets_manager_loaders_TextLoader(id));
			break;
		case 2:
			this.manager.addLoader(new assets_manager_loaders_BinaryLoader(id));
			break;
		case 3:
			this.manager.addLoader(new assets_manager_loaders_SoundLoader(id));
			break;
		}
	}
	,createInfoList: function(list) {
		var info = [];
		var _g = 0;
		while(_g < list.length) {
			var entry = list[_g];
			++_g;
			info.push(this.getLoadedFile(entry));
		}
		return info;
	}
	,storeCallback: function(id,cbk) {
		if(!Reflect.isFunction(cbk)) {
			haxe_Log.trace("Assets loader error: callback provided is not a function",{ fileName : "FileLoader.hx", lineNumber : 352, className : "assets.manager.FileLoader", methodName : "storeCallback"});
			return;
		}
		var cbks;
		if(!this.uniqueCallbacks.exists(id)) {
			cbks = [];
			{
				this.uniqueCallbacks.set(id,cbks);
				cbks;
			}
		} else cbks = this.uniqueCallbacks.get(id);
		if(!Lambda.has(cbks,cbk)) cbks.push(cbk);
	}
	,onManagerComplete: function(e) {
		var loadedFiles = this.createInfoList(this.manager.loadedFiles);
		this.onFilesLoaded.dispatch(loadedFiles);
	}
	,onManagerFileComplete: function(e) {
		var fileId = this.manager.loadedFiles[this.manager.loadedFiles.length - 1];
		var file = this.getLoadedFile(fileId);
		this.onFileLoaded.dispatch(file);
		if(this.uniqueCallbacks.exists(fileId)) {
			var list = this.uniqueCallbacks.get(fileId);
			this.uniqueCallbacks.remove(fileId);
			var _g = 0;
			while(_g < list.length) {
				var cbk = list[_g];
				++_g;
				cbk(file);
			}
		}
	}
	,__class__: assets_manager_FileLoader
};
var assets_manager_loaders_BaseLoader = function(id,type) {
	openfl_events_EventDispatcher.call(this);
	this.id = id;
	this.data = null;
	this.type = type;
	this.status = assets_manager_misc_LoaderStatus.IDLE;
	this.loader = new openfl_net_URLLoader();
	this.loader.addEventListener("complete",$bind(this,this.handleComplete));
	this.loader.addEventListener("ioError",$bind(this,this.onLoadFail));
	this.loader.addEventListener("securityError",$bind(this,this.onLoadFail));
};
$hxClasses["assets.manager.loaders.BaseLoader"] = assets_manager_loaders_BaseLoader;
assets_manager_loaders_BaseLoader.__name__ = ["assets","manager","loaders","BaseLoader"];
assets_manager_loaders_BaseLoader.__super__ = openfl_events_EventDispatcher;
assets_manager_loaders_BaseLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	loader: null
	,type: null
	,id: null
	,data: null
	,status: null
	,error: null
	,handleComplete: function(e) {
		this.processData();
		this.status = assets_manager_misc_LoaderStatus.LOADED;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onLoadFail: function(e) {
		this.data = null;
		this.error = e.toString();
		this.status = assets_manager_misc_LoaderStatus.ERROR;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,processData: function() {
		this.data = this.loader.data;
	}
	,prepare: function() {
		this.status = assets_manager_misc_LoaderStatus.READY;
	}
	,reset: function(dispose) {
		this.status = assets_manager_misc_LoaderStatus.IDLE;
		this.data = null;
		this.loader.data = null;
	}
	,start: function() {
		this.status = assets_manager_misc_LoaderStatus.LOADING;
		this.loader.load(new openfl_net_URLRequest(this.id));
	}
	,__class__: assets_manager_loaders_BaseLoader
});
var assets_manager_loaders_BinaryLoader = function(id) {
	assets_manager_loaders_BaseLoader.call(this,id,assets_manager_misc_FileType.BINARY);
	this.loader.set_dataFormat(0);
};
$hxClasses["assets.manager.loaders.BinaryLoader"] = assets_manager_loaders_BinaryLoader;
assets_manager_loaders_BinaryLoader.__name__ = ["assets","manager","loaders","BinaryLoader"];
assets_manager_loaders_BinaryLoader.__super__ = assets_manager_loaders_BaseLoader;
assets_manager_loaders_BinaryLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype,{
	__class__: assets_manager_loaders_BinaryLoader
});
var assets_manager_loaders_ImageLoader = function(id) {
	assets_manager_loaders_BaseLoader.call(this,id,assets_manager_misc_FileType.IMAGE);
	this.flashLoader = new openfl_display_Loader();
	this.flashLoader.contentLoaderInfo.addEventListener("complete",$bind(this,this.handleComplete));
	this.flashLoader.contentLoaderInfo.addEventListener("ioError",$bind(this,this.onLoadFail));
	this.flashLoader.contentLoaderInfo.addEventListener("securityError",$bind(this,this.onLoadFail));
};
$hxClasses["assets.manager.loaders.ImageLoader"] = assets_manager_loaders_ImageLoader;
assets_manager_loaders_ImageLoader.__name__ = ["assets","manager","loaders","ImageLoader"];
assets_manager_loaders_ImageLoader.__super__ = assets_manager_loaders_BaseLoader;
assets_manager_loaders_ImageLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype,{
	flashLoader: null
	,processData: function() {
		this.data = (js_Boot.__cast(this.flashLoader.content , openfl_display_Bitmap)).bitmapData;
	}
	,start: function() {
		this.status = assets_manager_misc_LoaderStatus.LOADING;
		this.flashLoader.load(new openfl_net_URLRequest(this.id));
	}
	,reset: function(dispose) {
		this.status = assets_manager_misc_LoaderStatus.IDLE;
		if(this.data != null && dispose) (js_Boot.__cast(this.data , openfl_display_BitmapData)).dispose();
		this.data = null;
	}
	,__class__: assets_manager_loaders_ImageLoader
});
var assets_manager_loaders_LoaderManager = function(maxConnectionLimit) {
	if(maxConnectionLimit == null) maxConnectionLimit = 1;
	openfl_events_EventDispatcher.call(this);
	this.maxConnectionLimit = maxConnectionLimit;
	this.activeLoads = 0;
	this.loadedFiles = [];
	this.loaders = new haxe_ds_StringMap();
	this.loadQueue = [];
};
$hxClasses["assets.manager.loaders.LoaderManager"] = assets_manager_loaders_LoaderManager;
assets_manager_loaders_LoaderManager.__name__ = ["assets","manager","loaders","LoaderManager"];
assets_manager_loaders_LoaderManager.__super__ = openfl_events_EventDispatcher;
assets_manager_loaders_LoaderManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	loadQueue: null
	,activeLoads: null
	,loaders: null
	,maxConnectionLimit: null
	,loadedFiles: null
	,addLoader: function(loader) {
		var id = loader.id;
		if(this.loaders.get(id) != null) return;
		{
			this.loaders.set(id,loader);
			loader;
		}
	}
	,loadList: function(list) {
		this.loadedFiles = [];
		var _g = 0;
		while(_g < list.length) {
			var id = list[_g];
			++_g;
			var l = this.findLoader(id);
			if(l != null && l.status != assets_manager_misc_LoaderStatus.LOADING && l.status != assets_manager_misc_LoaderStatus.READY) {
				this.loadQueue.push(l);
				l.addEventListener("complete",$bind(this,this.onFileLoaded));
				l.prepare();
			}
		}
		this.checkLoadSequence();
	}
	,unloadList: function(list,dispose) {
		var $it0 = this.loaders.iterator();
		while( $it0.hasNext() ) {
			var loader = $it0.next();
			var _g = 0;
			while(_g < list.length) {
				var id = list[_g];
				++_g;
				if(loader.id == id) loader.reset(dispose);
			}
		}
	}
	,remove: function(id,dispose) {
		var loader = this.findLoader(id);
		if(loader != null && loader.status != assets_manager_misc_LoaderStatus.LOADING && loader.status != assets_manager_misc_LoaderStatus.READY) {
			loader.reset(dispose);
			this.loaders.remove(id);
			if(HxOverrides.indexOf(this.loadedFiles,id,0) != -1) HxOverrides.remove(this.loadedFiles,id);
			return true;
		}
		return false;
	}
	,findLoader: function(id) {
		var $it0 = this.loaders.iterator();
		while( $it0.hasNext() ) {
			var loader = $it0.next();
			if(loader.id == id) return loader;
		}
		return null;
	}
	,checkLoadSequence: function() {
		var isAllComplete = true;
		var _g = 0;
		var _g1 = this.loadQueue;
		while(_g < _g1.length) {
			var loader = _g1[_g];
			++_g;
			if(loader.status == assets_manager_misc_LoaderStatus.LOADING || loader.status == assets_manager_misc_LoaderStatus.READY) isAllComplete = false;
			if(loader.status == assets_manager_misc_LoaderStatus.READY && this.activeLoads < this.maxConnectionLimit) {
				this.activeLoads++;
				loader.start();
			}
		}
		if(isAllComplete) this.onLoadListComplete();
	}
	,onFileLoaded: function(e) {
		var loader = e.currentTarget;
		loader.removeEventListener("complete",$bind(this,this.onFileLoaded));
		this.activeLoads--;
		HxOverrides.remove(this.loadQueue,loader);
		if(HxOverrides.indexOf(this.loadedFiles,loader.id,0) != -1) HxOverrides.remove(this.loadedFiles,loader.id);
		this.loadedFiles.push(loader.id);
		this.dispatchEvent(new openfl_events_Event("evtFileLoadComplete"));
		this.checkLoadSequence();
	}
	,onLoadListComplete: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,__class__: assets_manager_loaders_LoaderManager
});
var assets_manager_loaders_SoundLoader = function(id) {
	assets_manager_loaders_BaseLoader.call(this,id,assets_manager_misc_FileType.SOUND);
	this.loader.set_dataFormat(0);
};
$hxClasses["assets.manager.loaders.SoundLoader"] = assets_manager_loaders_SoundLoader;
assets_manager_loaders_SoundLoader.__name__ = ["assets","manager","loaders","SoundLoader"];
assets_manager_loaders_SoundLoader.__super__ = assets_manager_loaders_BaseLoader;
assets_manager_loaders_SoundLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype,{
	processData: function() {
		var sound = new openfl_media_Sound();
		sound.loadCompressedDataFromByteArray(this.loader.data,this.loader.data.length);
		this.data = sound;
	}
	,__class__: assets_manager_loaders_SoundLoader
});
var assets_manager_loaders_TextLoader = function(id) {
	assets_manager_loaders_BaseLoader.call(this,id,assets_manager_misc_FileType.TEXT);
};
$hxClasses["assets.manager.loaders.TextLoader"] = assets_manager_loaders_TextLoader;
assets_manager_loaders_TextLoader.__name__ = ["assets","manager","loaders","TextLoader"];
assets_manager_loaders_TextLoader.__super__ = assets_manager_loaders_BaseLoader;
assets_manager_loaders_TextLoader.prototype = $extend(assets_manager_loaders_BaseLoader.prototype,{
	processData: function() {
		this.data = Std.string(this.loader.data);
	}
	,__class__: assets_manager_loaders_TextLoader
});
var assets_manager_misc_FileType = $hxClasses["assets.manager.misc.FileType"] = { __ename__ : true, __constructs__ : ["IMAGE","TEXT","BINARY","SOUND"] };
assets_manager_misc_FileType.IMAGE = ["IMAGE",0];
assets_manager_misc_FileType.IMAGE.toString = $estr;
assets_manager_misc_FileType.IMAGE.__enum__ = assets_manager_misc_FileType;
assets_manager_misc_FileType.TEXT = ["TEXT",1];
assets_manager_misc_FileType.TEXT.toString = $estr;
assets_manager_misc_FileType.TEXT.__enum__ = assets_manager_misc_FileType;
assets_manager_misc_FileType.BINARY = ["BINARY",2];
assets_manager_misc_FileType.BINARY.toString = $estr;
assets_manager_misc_FileType.BINARY.__enum__ = assets_manager_misc_FileType;
assets_manager_misc_FileType.SOUND = ["SOUND",3];
assets_manager_misc_FileType.SOUND.toString = $estr;
assets_manager_misc_FileType.SOUND.__enum__ = assets_manager_misc_FileType;
var assets_manager_misc_LoaderStatus = $hxClasses["assets.manager.misc.LoaderStatus"] = { __ename__ : true, __constructs__ : ["IDLE","READY","LOADING","LOADED","ERROR"] };
assets_manager_misc_LoaderStatus.IDLE = ["IDLE",0];
assets_manager_misc_LoaderStatus.IDLE.toString = $estr;
assets_manager_misc_LoaderStatus.IDLE.__enum__ = assets_manager_misc_LoaderStatus;
assets_manager_misc_LoaderStatus.READY = ["READY",1];
assets_manager_misc_LoaderStatus.READY.toString = $estr;
assets_manager_misc_LoaderStatus.READY.__enum__ = assets_manager_misc_LoaderStatus;
assets_manager_misc_LoaderStatus.LOADING = ["LOADING",2];
assets_manager_misc_LoaderStatus.LOADING.toString = $estr;
assets_manager_misc_LoaderStatus.LOADING.__enum__ = assets_manager_misc_LoaderStatus;
assets_manager_misc_LoaderStatus.LOADED = ["LOADED",3];
assets_manager_misc_LoaderStatus.LOADED.toString = $estr;
assets_manager_misc_LoaderStatus.LOADED.__enum__ = assets_manager_misc_LoaderStatus;
assets_manager_misc_LoaderStatus.ERROR = ["ERROR",4];
assets_manager_misc_LoaderStatus.ERROR.toString = $estr;
assets_manager_misc_LoaderStatus.ERROR.__enum__ = assets_manager_misc_LoaderStatus;
var com_plist_Reader = function() { };
$hxClasses["com.plist.Reader"] = com_plist_Reader;
com_plist_Reader.__name__ = ["com","plist","Reader"];
com_plist_Reader.read = function(s) {
	return com_plist_Reader.parseNode(Xml.parse(s).firstElement());
};
com_plist_Reader.val = function(x) {
	return ((function($this) {
		var $r;
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + x.nodeType);
		$r = x.children[0];
		return $r;
	}(this))).get_nodeValue();
};
com_plist_Reader.parseNode = function(x) {
	var _g;
	if(x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + x.nodeType);
	_g = x.nodeName;
	var v = _g;
	switch(_g) {
	case "plist":
		return com_plist_Reader.parseNode(x.firstElement());
	case "date":
		return com_plist_Reader.handleDate(com_plist_Reader.val(x));
	case "dict":
		var elts = x.elements();
		var ret = { };
		while(elts.hasNext()) Reflect.setField(ret,com_plist_Reader.val(elts.next()),com_plist_Reader.parseNode(elts.next()));
		return ret;
	case "true":
		return true;
	case "false":
		return false;
	case "array":
		var _g1 = [];
		var $it0 = x.elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			_g1.push(com_plist_Reader.parseNode(c));
		}
		return _g1;
	case "string":
		return com_plist_Reader.val(x);
	case "integer":
		return Std.parseInt(com_plist_Reader.val(x));
	case "real":
		return Std.parseFloat(com_plist_Reader.val(x));
	default:
		return null;
	}
};
com_plist_Reader.handleDate = function(data) {
	if(data.length == 20) {
		var k = data.split("T");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(Std.parseInt(y[0]),Std.parseInt(y[1]) - 1,Std.parseInt(y[2]),Std.parseInt(t[0]),Std.parseInt(t[1]),Std.parseInt(t[2]));
	} else if(data.length == 10) {
		var k1 = data.split("-");
		return new Date(Std.parseInt(k1[0]),Std.parseInt(k1[1]) - 1,Std.parseInt(k1[2]),0,0,0);
	} else {
		var k2 = data.split(":");
		var d = new Date(0,0,0,Std.parseInt(k2[0]),Std.parseInt(k2[1]),Std.parseInt(k2[2]));
		return d;
	}
};
var format_gz_Reader = function(i) {
	this.i = i;
};
$hxClasses["format.gz.Reader"] = format_gz_Reader;
format_gz_Reader.__name__ = ["format","gz","Reader"];
format_gz_Reader.prototype = {
	i: null
	,read: function() {
		var h = this.readHeader();
		var o = new haxe_io_BytesOutput();
		this.readData(o);
		return { file : h.fileName, data : o.getBytes()};
	}
	,readHeader: function() {
		if(this.i.readByte() != 31 || this.i.readByte() != 139) throw new js__$Boot_HaxeError("Invalid GZ header");
		if(this.i.readByte() != 8) throw new js__$Boot_HaxeError("Invalid compression method");
		var flags = this.i.readByte();
		var mtime = this.i.read(4);
		var xflags = this.i.readByte();
		var os = this.i.readByte();
		var fname = null;
		var comments = null;
		var xdata = null;
		if((flags & 4) != 0) {
			var xlen = this.i.readUInt16();
			xdata = this.i.read(xlen);
		}
		if((flags & 8) != 0) fname = this.i.readUntil(0);
		if((flags & 16) != 0) comments = this.i.readUntil(0);
		if((flags & 2) != 0) {
			var hcrc = this.i.readUInt16();
		}
		return { fileName : fname, comments : comments, extraData : xdata};
	}
	,readData: function(o,bufsize) {
		if(bufsize == null) bufsize = 65536;
		var buf = haxe_io_Bytes.alloc(bufsize);
		var tsize = 0;
		var inflate = new format_tools_InflateImpl(this.i,false,false);
		while(true) {
			var len = inflate.readBytes(buf,0,bufsize);
			o.writeFullBytes(buf,0,len);
			if(len < bufsize) break;
			tsize += len;
		}
		return tsize;
	}
	,refill: function(buf,pos) {
		try {
			while(pos != buf.length) {
				var k = this.i.readBytes(buf,pos,buf.length - pos);
				pos += k;
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,haxe_io_Eof) ) {
			} else throw(e);
		}
		if(pos == 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		if(pos != buf.length) buf = buf.sub(0,pos);
		return buf;
	}
	,__class__: format_gz_Reader
};
var format_png_Color = $hxClasses["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"] };
format_png_Color.ColGrey = function(alpha) { var $x = ["ColGrey",0,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColTrue = function(alpha) { var $x = ["ColTrue",1,alpha]; $x.__enum__ = format_png_Color; $x.toString = $estr; return $x; };
format_png_Color.ColIndexed = ["ColIndexed",2];
format_png_Color.ColIndexed.toString = $estr;
format_png_Color.ColIndexed.__enum__ = format_png_Color;
var format_png_Chunk = $hxClasses["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"] };
format_png_Chunk.CEnd = ["CEnd",0];
format_png_Chunk.CEnd.toString = $estr;
format_png_Chunk.CEnd.__enum__ = format_png_Chunk;
format_png_Chunk.CHeader = function(h) { var $x = ["CHeader",1,h]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CData = function(b) { var $x = ["CData",2,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CPalette = function(b) { var $x = ["CPalette",3,b]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
format_png_Chunk.CUnknown = function(id,data) { var $x = ["CUnknown",4,id,data]; $x.__enum__ = format_png_Chunk; $x.toString = $estr; return $x; };
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = ["format","png","Reader"];
format_png_Reader.prototype = {
	i: null
	,checkCRC: null
	,read: function() {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.i.readByte() != b) throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) break;
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) throw new js__$Boot_HaxeError("Invalid header");
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) throw new js__$Boot_HaxeError("Invalid header");
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c = new haxe_crypto_Crc32();
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				c["byte"](HxOverrides.cca(id,i));
			}
			c.update(data,0,data.length);
			if(c.get() != crc) throw new js__$Boot_HaxeError("CRC check failure");
		}
		switch(id) {
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = ["format","png","Tools"];
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	var _g_val = null;
	while(_g_head != null) {
		var c;
		c = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		switch(c[1]) {
		case 1:
			var h = c[2];
			return h;
		default:
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	var _g_val = null;
	while(_g_head != null) {
		var c;
		c = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		switch(c[1]) {
		case 3:
			var b = c[2];
			return b;
		default:
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) numChannels = 4;
	var b;
	if(y == 0) b = 0; else b = data.b[p - stride];
	var c;
	if(x == 0 || y == 0) c = 0; else c = data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) pa = -pa;
	var pb = k - b;
	if(pb < 0) pb = -pb;
	var pc = k - c;
	if(pc < 0) pc = -pc;
	if(pa <= pb && pa <= pc) return prev; else if(pb <= pc) return b; else return c;
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g1 = 0;
	var _g = b.length >> 2;
	while(_g1 < _g) {
		var i = _g1++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		var p1 = p++;
		b.b[p1] = a & 255;
		var p2 = p++;
		b.b[p2] = r & 255;
		var p3 = p++;
		b.b[p3] = g & 255;
		var p4 = p++;
		b.b[p4] = b1 & 255;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = haxe_io_Bytes.alloc(h.width * h.height);
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	var _g_val = null;
	while(_g_head != null) {
		var c;
		c = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		switch(c[1]) {
		case 2:
			var b = c[2];
			if(fullData != null) fullData.add(b); else if(data == null) data = b; else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
			break;
		default:
		}
	}
	if(fullData != null) data = fullData.getBytes();
	if(data == null) throw new js__$Boot_HaxeError("Data not found");
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	{
		var _g = h.color;
		switch(_g[1]) {
		case 0:
			var alpha = _g[2];
			if(h.colbits != 8) throw new js__$Boot_HaxeError("Unsupported color mode");
			var width = h.width;
			var stride;
			stride = (alpha?2:1) * width + 1;
			if(data.length < h.height * stride) throw new js__$Boot_HaxeError("Not enough data");
			var rinc;
			if(alpha) rinc = 2; else rinc = 1;
			var _g2 = 0;
			var _g1 = h.height;
			while(_g2 < _g1) {
				var y = _g2++;
				var f = data.get(r++);
				switch(f) {
				case 0:
					var _g3 = 0;
					while(_g3 < width) {
						var x = _g3++;
						var v = data.b[r];
						r += rinc;
						grey.set(w++,v);
					}
					break;
				case 1:
					var cv = 0;
					var _g31 = 0;
					while(_g31 < width) {
						var x1 = _g31++;
						cv += data.b[r];
						r += rinc;
						grey.set(w++,cv);
					}
					break;
				case 2:
					var stride1;
					if(y == 0) stride1 = 0; else stride1 = width;
					var _g32 = 0;
					while(_g32 < width) {
						var x2 = _g32++;
						var v1 = data.b[r] + grey.b[w - stride1];
						r += rinc;
						grey.set(w++,v1);
					}
					break;
				case 3:
					var cv1 = 0;
					var stride2;
					if(y == 0) stride2 = 0; else stride2 = width;
					var _g33 = 0;
					while(_g33 < width) {
						var x3 = _g33++;
						cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
						r += rinc;
						grey.set(w++,cv1);
					}
					break;
				case 4:
					var stride3 = width;
					var cv2 = 0;
					var _g34 = 0;
					while(_g34 < width) {
						var x4 = _g34++;
						cv2 = format_png_Tools.filter(grey,x4,y,stride3,cv2,w,1) + data.b[r] & 255;
						r += rinc;
						grey.set(w++,cv2);
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid filter " + f);
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra;
	if(bytes == null) bgra = haxe_io_Bytes.alloc(h.width * h.height * 4); else bgra = bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	var _g_val = null;
	while(_g_head != null) {
		var c;
		c = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		switch(c[1]) {
		case 2:
			var b = c[2];
			if(fullData != null) fullData.add(b); else if(data == null) data = b; else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
			break;
		default:
		}
	}
	if(fullData != null) data = fullData.getBytes();
	if(data == null) throw new js__$Boot_HaxeError("Data not found");
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1;
	if(flipY) flipY1 = -1; else flipY1 = 1;
	{
		var _g = h.color;
		switch(_g[1]) {
		case 2:
			var pal = format_png_Tools.getPalette(d);
			if(pal == null) throw new js__$Boot_HaxeError("PNG Palette is missing");
			var alpha = null;
			var _g1_head = d.h;
			var _g1_val = null;
			try {
				while(_g1_head != null) {
					var t;
					t = (function($this) {
						var $r;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						$r = _g1_val;
						return $r;
					}(this));
					switch(t[1]) {
					case 4:
						switch(t[2]) {
						case "tRNS":
							var data1 = t[3];
							alpha = data1;
							throw "__break__";
							break;
						default:
						}
						break;
					default:
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(alpha != null && alpha.length < 1 << h.colbits) {
				var alpha2 = haxe_io_Bytes.alloc(1 << h.colbits);
				alpha2.blit(0,alpha,0,alpha.length);
				alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
				alpha = alpha2;
			}
			var width = h.width;
			var stride = Math.ceil(width * h.colbits / 8) + 1;
			if(data.length < h.height * stride) throw new js__$Boot_HaxeError("Not enough data");
			var rline = h.width * h.colbits >> 3;
			var _g2 = 0;
			var _g1 = h.height;
			while(_g2 < _g1) {
				var y = _g2++;
				var f = data.get(r++);
				if(f == 0) {
					r += rline;
					continue;
				}
				switch(f) {
				case 1:
					var c1 = 0;
					var _g3 = 0;
					while(_g3 < width) {
						var x = _g3++;
						var v = data.b[r];
						c1 += v;
						data.set(r++,c1 & 255);
					}
					break;
				case 2:
					var stride1;
					if(y == 0) stride1 = 0; else stride1 = rline + 1;
					var _g31 = 0;
					while(_g31 < width) {
						var x1 = _g31++;
						var v1 = data.b[r];
						data.b[r] = v1 + data.b[r - stride1] & 255;
						r++;
					}
					break;
				case 3:
					var c2 = 0;
					var stride2;
					if(y == 0) stride2 = 0; else stride2 = rline + 1;
					var _g32 = 0;
					while(_g32 < width) {
						var x2 = _g32++;
						var v2 = data.b[r];
						c2 = v2 + (c2 + data.b[r - stride2] >> 1) & 255;
						data.set(r++,c2);
					}
					break;
				case 4:
					var stride3 = rline + 1;
					var c3 = 0;
					var _g33 = 0;
					while(_g33 < width) {
						var x3 = _g33++;
						var v3 = data.b[r];
						c3 = format_png_Tools.filter(data,x3,y,stride3,c3,r,1) + v3 & 255;
						data.set(r++,c3);
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid filter " + f);
				}
			}
			var r1 = 0;
			if(h.colbits == 8) {
				var _g21 = 0;
				var _g11 = h.height;
				while(_g21 < _g11) {
					var y1 = _g21++;
					r1++;
					var _g4 = 0;
					var _g34 = h.width;
					while(_g4 < _g34) {
						var x4 = _g4++;
						var c4 = data.get(r1++);
						bgra.set(w++,pal.b[c4 * 3 + 2]);
						bgra.set(w++,pal.b[c4 * 3 + 1]);
						bgra.set(w++,pal.b[c4 * 3]);
						bgra.set(w++,alpha != null?alpha.b[c4]:255);
					}
					w += lineDelta;
				}
			} else if(h.colbits < 8) {
				var req = h.colbits;
				var mask = (1 << req) - 1;
				var _g22 = 0;
				var _g12 = h.height;
				while(_g22 < _g12) {
					var y2 = _g22++;
					r1++;
					var bits = 0;
					var nbits = 0;
					var v4;
					var _g41 = 0;
					var _g35 = h.width;
					while(_g41 < _g35) {
						var x5 = _g41++;
						if(nbits < req) {
							bits = bits << 8 | data.get(r1++);
							nbits += 8;
						}
						var c5 = bits >>> nbits - req & mask;
						nbits -= req;
						bgra.set(w++,pal.b[c5 * 3 + 2]);
						bgra.set(w++,pal.b[c5 * 3 + 1]);
						bgra.set(w++,pal.b[c5 * 3]);
						bgra.set(w++,alpha != null?alpha.b[c5]:255);
					}
					w += lineDelta;
				}
			} else throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
			break;
		case 0:
			var alpha1 = _g[2];
			if(h.colbits != 8) throw new js__$Boot_HaxeError("Unsupported color mode");
			var width1 = h.width;
			var stride4;
			stride4 = (alpha1?2:1) * width1 + 1;
			if(data.length < h.height * stride4) throw new js__$Boot_HaxeError("Not enough data");
			var _g23 = 0;
			var _g13 = h.height;
			while(_g23 < _g13) {
				var y3 = _g23++;
				var f1 = data.get(r++);
				switch(f1) {
				case 0:
					if(alpha1) {
						var _g36 = 0;
						while(_g36 < width1) {
							var x6 = _g36++;
							var v5 = data.get(r++);
							bgra.set(w++,v5);
							bgra.set(w++,v5);
							bgra.set(w++,v5);
							bgra.set(w++,data.get(r++));
						}
					} else {
						var _g37 = 0;
						while(_g37 < width1) {
							var x7 = _g37++;
							var v6 = data.get(r++);
							bgra.set(w++,v6);
							bgra.set(w++,v6);
							bgra.set(w++,v6);
							bgra.set(w++,255);
						}
					}
					break;
				case 1:
					var cv = 0;
					var ca = 0;
					if(alpha1) {
						var _g38 = 0;
						while(_g38 < width1) {
							var x8 = _g38++;
							cv += data.get(r++);
							bgra.set(w++,cv);
							bgra.set(w++,cv);
							bgra.set(w++,cv);
							ca += data.get(r++);
							bgra.set(w++,ca);
						}
					} else {
						var _g39 = 0;
						while(_g39 < width1) {
							var x9 = _g39++;
							cv += data.get(r++);
							bgra.set(w++,cv);
							bgra.set(w++,cv);
							bgra.set(w++,cv);
							bgra.set(w++,255);
						}
					}
					break;
				case 2:
					var stride5;
					if(y3 == 0) stride5 = 0; else stride5 = width1 * 4 * flipY1;
					if(alpha1) {
						var _g310 = 0;
						while(_g310 < width1) {
							var x10 = _g310++;
							var v7 = data.get(r++) + bgra.b[w - stride5];
							bgra.set(w++,v7);
							bgra.set(w++,v7);
							bgra.set(w++,v7);
							bgra.set(w++,data.get(r++) + bgra.b[w - stride5]);
						}
					} else {
						var _g311 = 0;
						while(_g311 < width1) {
							var x11 = _g311++;
							var v8 = data.get(r++) + bgra.b[w - stride5];
							bgra.set(w++,v8);
							bgra.set(w++,v8);
							bgra.set(w++,v8);
							bgra.set(w++,255);
						}
					}
					break;
				case 3:
					var cv1 = 0;
					var ca1 = 0;
					var stride6;
					if(y3 == 0) stride6 = 0; else stride6 = width1 * 4 * flipY1;
					if(alpha1) {
						var _g312 = 0;
						while(_g312 < width1) {
							var x12 = _g312++;
							cv1 = data.get(r++) + (cv1 + bgra.b[w - stride6] >> 1) & 255;
							bgra.set(w++,cv1);
							bgra.set(w++,cv1);
							bgra.set(w++,cv1);
							ca1 = data.get(r++) + (ca1 + bgra.b[w - stride6] >> 1) & 255;
							bgra.set(w++,ca1);
						}
					} else {
						var _g313 = 0;
						while(_g313 < width1) {
							var x13 = _g313++;
							cv1 = data.get(r++) + (cv1 + bgra.b[w - stride6] >> 1) & 255;
							bgra.set(w++,cv1);
							bgra.set(w++,cv1);
							bgra.set(w++,cv1);
							bgra.set(w++,255);
						}
					}
					break;
				case 4:
					var stride7 = width1 * 4 * flipY1;
					var cv2 = 0;
					var ca2 = 0;
					if(alpha1) {
						var _g314 = 0;
						while(_g314 < width1) {
							var x14 = _g314++;
							cv2 = format_png_Tools.filter(bgra,x14,y3,stride7,cv2,w,null) + data.get(r++) & 255;
							bgra.set(w++,cv2);
							bgra.set(w++,cv2);
							bgra.set(w++,cv2);
							ca2 = format_png_Tools.filter(bgra,x14,y3,stride7,ca2,w,null) + data.get(r++) & 255;
							bgra.set(w++,ca2);
						}
					} else {
						var _g315 = 0;
						while(_g315 < width1) {
							var x15 = _g315++;
							cv2 = format_png_Tools.filter(bgra,x15,y3,stride7,cv2,w,null) + data.get(r++) & 255;
							bgra.set(w++,cv2);
							bgra.set(w++,cv2);
							bgra.set(w++,cv2);
							bgra.set(w++,255);
						}
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid filter " + f1);
				}
				w += lineDelta;
			}
			break;
		case 1:
			var alpha3 = _g[2];
			if(h.colbits != 8) throw new js__$Boot_HaxeError("Unsupported color mode");
			var width2 = h.width;
			var stride8;
			stride8 = (alpha3?4:3) * width2 + 1;
			if(data.length < h.height * stride8) throw new js__$Boot_HaxeError("Not enough data");
			var _g24 = 0;
			var _g14 = h.height;
			while(_g24 < _g14) {
				var y4 = _g24++;
				var f2 = data.get(r++);
				switch(f2) {
				case 0:
					if(alpha3) {
						var _g316 = 0;
						while(_g316 < width2) {
							var x16 = _g316++;
							bgra.set(w++,data.b[r + 2]);
							bgra.set(w++,data.b[r + 1]);
							bgra.set(w++,data.b[r]);
							bgra.set(w++,data.b[r + 3]);
							r += 4;
						}
					} else {
						var _g317 = 0;
						while(_g317 < width2) {
							var x17 = _g317++;
							bgra.set(w++,data.b[r + 2]);
							bgra.set(w++,data.b[r + 1]);
							bgra.set(w++,data.b[r]);
							bgra.set(w++,255);
							r += 3;
						}
					}
					break;
				case 1:
					var cr = 0;
					var cg = 0;
					var cb = 0;
					var ca3 = 0;
					if(alpha3) {
						var _g318 = 0;
						while(_g318 < width2) {
							var x18 = _g318++;
							cb += data.b[r + 2];
							bgra.set(w++,cb);
							cg += data.b[r + 1];
							bgra.set(w++,cg);
							cr += data.b[r];
							bgra.set(w++,cr);
							ca3 += data.b[r + 3];
							bgra.set(w++,ca3);
							r += 4;
						}
					} else {
						var _g319 = 0;
						while(_g319 < width2) {
							var x19 = _g319++;
							cb += data.b[r + 2];
							bgra.set(w++,cb);
							cg += data.b[r + 1];
							bgra.set(w++,cg);
							cr += data.b[r];
							bgra.set(w++,cr);
							bgra.set(w++,255);
							r += 3;
						}
					}
					break;
				case 2:
					var stride9;
					if(y4 == 0) stride9 = 0; else stride9 = width2 * 4 * flipY1;
					if(alpha3) {
						var _g320 = 0;
						while(_g320 < width2) {
							var x20 = _g320++;
							bgra.b[w] = data.b[r + 2] + bgra.b[w - stride9] & 255;
							w++;
							bgra.b[w] = data.b[r + 1] + bgra.b[w - stride9] & 255;
							w++;
							bgra.b[w] = data.b[r] + bgra.b[w - stride9] & 255;
							w++;
							bgra.b[w] = data.b[r + 3] + bgra.b[w - stride9] & 255;
							w++;
							r += 4;
						}
					} else {
						var _g321 = 0;
						while(_g321 < width2) {
							var x21 = _g321++;
							bgra.b[w] = data.b[r + 2] + bgra.b[w - stride9] & 255;
							w++;
							bgra.b[w] = data.b[r + 1] + bgra.b[w - stride9] & 255;
							w++;
							bgra.b[w] = data.b[r] + bgra.b[w - stride9] & 255;
							w++;
							bgra.set(w++,255);
							r += 3;
						}
					}
					break;
				case 3:
					var cr1 = 0;
					var cg1 = 0;
					var cb1 = 0;
					var ca4 = 0;
					var stride10;
					if(y4 == 0) stride10 = 0; else stride10 = width2 * 4 * flipY1;
					if(alpha3) {
						var _g322 = 0;
						while(_g322 < width2) {
							var x22 = _g322++;
							cb1 = data.b[r + 2] + (cb1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cb1);
							cg1 = data.b[r + 1] + (cg1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cg1);
							cr1 = data.b[r] + (cr1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cr1);
							ca4 = data.b[r + 3] + (ca4 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,ca4);
							r += 4;
						}
					} else {
						var _g323 = 0;
						while(_g323 < width2) {
							var x23 = _g323++;
							cb1 = data.b[r + 2] + (cb1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cb1);
							cg1 = data.b[r + 1] + (cg1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cg1);
							cr1 = data.b[r] + (cr1 + bgra.b[w - stride10] >> 1) & 255;
							bgra.set(w++,cr1);
							bgra.set(w++,255);
							r += 3;
						}
					}
					break;
				case 4:
					var stride11 = width2 * 4 * flipY1;
					var cr2 = 0;
					var cg2 = 0;
					var cb2 = 0;
					var ca5 = 0;
					if(alpha3) {
						var _g324 = 0;
						while(_g324 < width2) {
							var x24 = _g324++;
							cb2 = format_png_Tools.filter(bgra,x24,y4,stride11,cb2,w,null) + data.b[r + 2] & 255;
							bgra.set(w++,cb2);
							cg2 = format_png_Tools.filter(bgra,x24,y4,stride11,cg2,w,null) + data.b[r + 1] & 255;
							bgra.set(w++,cg2);
							cr2 = format_png_Tools.filter(bgra,x24,y4,stride11,cr2,w,null) + data.b[r] & 255;
							bgra.set(w++,cr2);
							ca5 = format_png_Tools.filter(bgra,x24,y4,stride11,ca5,w,null) + data.b[r + 3] & 255;
							bgra.set(w++,ca5);
							r += 4;
						}
					} else {
						var _g325 = 0;
						while(_g325 < width2) {
							var x25 = _g325++;
							cb2 = format_png_Tools.filter(bgra,x25,y4,stride11,cb2,w,null) + data.b[r + 2] & 255;
							bgra.set(w++,cb2);
							cg2 = format_png_Tools.filter(bgra,x25,y4,stride11,cg2,w,null) + data.b[r + 1] & 255;
							bgra.set(w++,cg2);
							cr2 = format_png_Tools.filter(bgra,x25,y4,stride11,cr2,w,null) + data.b[r] & 255;
							bgra.set(w++,cr2);
							bgra.set(w++,255);
							r += 3;
						}
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid filter " + f2);
				}
				w += lineDelta;
			}
			break;
		}
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data) {
	var rgb = haxe_io_Bytes.alloc(width * height + height);
	var w = 0;
	var r = 0;
	var _g = 0;
	while(_g < height) {
		var y = _g++;
		rgb.set(w++,0);
		var _g1 = 0;
		while(_g1 < width) {
			var x = _g1++;
			rgb.set(w++,data.get(r++));
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data) {
	var rgb = haxe_io_Bytes.alloc(width * height * 3 + height);
	var w = 0;
	var r = 0;
	var _g = 0;
	while(_g < height) {
		var y = _g++;
		rgb.set(w++,0);
		var _g1 = 0;
		while(_g1 < width) {
			var x = _g1++;
			rgb.set(w++,data.b[r + 2]);
			rgb.set(w++,data.b[r + 1]);
			rgb.set(w++,data.b[r]);
			r += 3;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data) {
	var rgba = haxe_io_Bytes.alloc(width * height * 4 + height);
	var w = 0;
	var r = 0;
	var _g = 0;
	while(_g < height) {
		var y = _g++;
		rgba.set(w++,0);
		var _g1 = 0;
		while(_g1 < width) {
			var x = _g1++;
			rgba.set(w++,data.b[r + 1]);
			rgba.set(w++,data.b[r + 2]);
			rgba.set(w++,data.b[r + 3]);
			rgba.set(w++,data.b[r]);
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data) {
	var rgba = haxe_io_Bytes.alloc(width * height * 4 + height);
	var w = 0;
	var r = 0;
	var _g = 0;
	while(_g < height) {
		var y = _g++;
		rgba.set(w++,0);
		var _g1 = 0;
		while(_g1 < width) {
			var x = _g1++;
			rgba.set(w++,data.b[r + 2]);
			rgba.set(w++,data.b[r + 1]);
			rgba.set(w++,data.b[r]);
			rgba.set(w++,data.b[r + 3]);
			r += 4;
		}
	}
	var l = new List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["format.png.Writer"] = format_png_Writer;
format_png_Writer.__name__ = ["format","png","Writer"];
format_png_Writer.prototype = {
	o: null
	,write: function(png) {
		var _g = 0;
		var _g1 = [137,80,78,71,13,10,26,10];
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.o.writeByte(b);
		}
		var _g_head = png.h;
		var _g_val = null;
		while(_g_head != null) {
			var c;
			c = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			switch(c[1]) {
			case 1:
				var h = c[2];
				var b1 = new haxe_io_BytesOutput();
				b1.set_bigEndian(true);
				b1.writeInt32(h.width);
				b1.writeInt32(h.height);
				b1.writeByte(h.colbits);
				b1.writeByte((function($this) {
					var $r;
					var _g2 = h.color;
					$r = (function($this) {
						var $r;
						switch(_g2[1]) {
						case 0:
							$r = (function($this) {
								var $r;
								var alpha = _g2[2];
								$r = alpha?4:0;
								return $r;
							}($this));
							break;
						case 1:
							$r = (function($this) {
								var $r;
								var alpha1 = _g2[2];
								$r = alpha1?6:2;
								return $r;
							}($this));
							break;
						case 2:
							$r = 3;
							break;
						}
						return $r;
					}($this));
					return $r;
				}(this)));
				b1.writeByte(0);
				b1.writeByte(0);
				b1.writeByte(h.interlaced?1:0);
				this.writeChunk("IHDR",b1.getBytes());
				break;
			case 0:
				this.writeChunk("IEND",haxe_io_Bytes.alloc(0));
				break;
			case 2:
				var d = c[2];
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b2 = c[2];
				this.writeChunk("PLTE",b2);
				break;
			case 4:
				var data = c[3];
				var id = c[2];
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc = new haxe_crypto_Crc32();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			crc["byte"](HxOverrides.cca(id,i));
		}
		crc.update(data,0,data.length);
		this.o.writeInt32(crc.get());
	}
	,__class__: format_png_Writer
};
var format_tools_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["format.tools.Adler32"] = format_tools_Adler32;
format_tools_Adler32.__name__ = ["format","tools","Adler32"];
format_tools_Adler32.read = function(i) {
	var a = new format_tools_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
format_tools_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,__class__: format_tools_Adler32
};
var format_tools_Deflate = function() { };
$hxClasses["format.tools.Deflate"] = format_tools_Deflate;
format_tools_Deflate.__name__ = ["format","tools","Deflate"];
format_tools_Deflate.run = function(b) {
	throw new js__$Boot_HaxeError("Deflate is not supported on this platform");
	return null;
};
var format_tools_Huffman = $hxClasses["format.tools.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
format_tools_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = format_tools_Huffman; $x.toString = $estr; return $x; };
format_tools_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = format_tools_Huffman; $x.toString = $estr; return $x; };
format_tools_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = format_tools_Huffman; $x.toString = $estr; return $x; };
var format_tools_HuffTools = function() {
};
$hxClasses["format.tools.HuffTools"] = format_tools_HuffTools;
format_tools_HuffTools.__name__ = ["format","tools","HuffTools"];
format_tools_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return format_tools_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(format_tools_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return format_tools_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) return format_tools_Huffman.Found(bits.h[idx]);
		v <<= 1;
		len += 1;
		return format_tools_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) throw new js__$Boot_HaxeError("Invalid huffman");
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(format_tools_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: format_tools_HuffTools
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = ["format","tools","Inflate"];
format_tools_Inflate.run = function(bytes) {
	return format_tools_InflateImpl.run(new haxe_io_BytesInput(bytes));
};
var format_tools__$InflateImpl_Window = function(hasCrc) {
	this.buffer = haxe_io_Bytes.alloc(65536);
	this.pos = 0;
	if(hasCrc) this.crc = new format_tools_Adler32();
};
$hxClasses["format.tools._InflateImpl.Window"] = format_tools__$InflateImpl_Window;
format_tools__$InflateImpl_Window.__name__ = ["format","tools","_InflateImpl","Window"];
format_tools__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = haxe_io_Bytes.alloc(65536);
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: format_tools__$InflateImpl_Window
};
var format_tools__$InflateImpl_State = $hxClasses["format.tools._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
format_tools__$InflateImpl_State.Head = ["Head",0];
format_tools__$InflateImpl_State.Head.toString = $estr;
format_tools__$InflateImpl_State.Head.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.Block = ["Block",1];
format_tools__$InflateImpl_State.Block.toString = $estr;
format_tools__$InflateImpl_State.Block.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.CData = ["CData",2];
format_tools__$InflateImpl_State.CData.toString = $estr;
format_tools__$InflateImpl_State.CData.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.Flat = ["Flat",3];
format_tools__$InflateImpl_State.Flat.toString = $estr;
format_tools__$InflateImpl_State.Flat.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.Crc = ["Crc",4];
format_tools__$InflateImpl_State.Crc.toString = $estr;
format_tools__$InflateImpl_State.Crc.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.Dist = ["Dist",5];
format_tools__$InflateImpl_State.Dist.toString = $estr;
format_tools__$InflateImpl_State.Dist.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.DistOne = ["DistOne",6];
format_tools__$InflateImpl_State.DistOne.toString = $estr;
format_tools__$InflateImpl_State.DistOne.__enum__ = format_tools__$InflateImpl_State;
format_tools__$InflateImpl_State.Done = ["Done",7];
format_tools__$InflateImpl_State.Done.toString = $estr;
format_tools__$InflateImpl_State.Done.__enum__ = format_tools__$InflateImpl_State;
var format_tools_InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new format_tools_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = format_tools__$InflateImpl_State.Head; else this.state = format_tools__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new format_tools__$InflateImpl_Window(crc);
};
$hxClasses["format.tools.InflateImpl"] = format_tools_InflateImpl;
format_tools_InflateImpl.__name__ = ["format","tools","InflateImpl"];
format_tools_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = haxe_io_Bytes.alloc(bufsize);
	var output = new haxe_io_BytesBuffer();
	var inflate = new format_tools_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
format_tools_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,'final': null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(format_tools_InflateImpl.FIXED_HUFFMAN != null) return format_tools_InflateImpl.FIXED_HUFFMAN;
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		format_tools_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return format_tools_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw new js__$Boot_HaxeError("Invalid data");
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) throw new js__$Boot_HaxeError("Invalid data");
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw new js__$Boot_HaxeError("Invalid data");
			if(fdict) throw new js__$Boot_HaxeError("Unsupported dictionary");
			this.state = format_tools__$InflateImpl_State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = format_tools__$InflateImpl_State.Done;
				return true;
			}
			var crc = format_tools_Adler32.read(this.input);
			if(!calc.equals(crc)) throw new js__$Boot_HaxeError("Invalid CRC");
			this.state = format_tools__$InflateImpl_State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw new js__$Boot_HaxeError("Invalid data");
				this.state = format_tools__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = format_tools__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[format_tools_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[format_tools_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = format_tools__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = format_tools__$InflateImpl_State.Crc; else this.state = format_tools__$InflateImpl_State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = format_tools__$InflateImpl_State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = format_tools__$InflateImpl_State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = format_tools__$InflateImpl_State.Crc; else this.state = format_tools__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = format_tools_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.len = format_tools_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = format_tools_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.dist = format_tools_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw new js__$Boot_HaxeError("Invalid data");
				if(this.dist == 1) this.state = format_tools__$InflateImpl_State.DistOne; else this.state = format_tools__$InflateImpl_State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: format_tools_InflateImpl
};
var gamepad_LocalGamepad = function() {
	this.connected = false;
	this.buttons = [];
	this.axes = [];
	this.timestamp = 0;
};
$hxClasses["gamepad.LocalGamepad"] = gamepad_LocalGamepad;
gamepad_LocalGamepad.__name__ = ["gamepad","LocalGamepad"];
gamepad_LocalGamepad.fromJSGamepad = function(gamepad1) {
	var newGamepad = new gamepad_LocalGamepad();
	newGamepad.timestamp = gamepad1.timestamp;
	newGamepad.connected = gamepad1.connected;
	var _g1 = 0;
	var _g = gamepad1.buttons.length;
	while(_g1 < _g) {
		var i = _g1++;
		newGamepad.buttons.push(gamepad_LocalGamepad.normalizeJSButton(gamepad1.buttons[i]));
	}
	var _g11 = 0;
	var _g2 = gamepad1.axes.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		newGamepad.axes.push(gamepad1.axes[i1]);
	}
	return newGamepad;
};
gamepad_LocalGamepad.normalizeJSButton = function(button) {
	if('pressed' in button) return { pressed : button.pressed, value : button.value}; else return { pressed : button == 1.0, value : button};
};
gamepad_LocalGamepad.prototype = {
	connected: null
	,buttons: null
	,axes: null
	,timestamp: null
	,__class__: gamepad_LocalGamepad
};
var gamepad_HTML5GamepadManager = function() { };
$hxClasses["gamepad.HTML5GamepadManager"] = gamepad_HTML5GamepadManager;
gamepad_HTML5GamepadManager.__name__ = ["gamepad","HTML5GamepadManager"];
gamepad_HTML5GamepadManager.hasGamepadEvents = null;
gamepad_HTML5GamepadManager._gamepads = null;
gamepad_HTML5GamepadManager.init = function() {
	gamepad_HTML5GamepadManager.hasGamepadEvents = 'GamepadEvent' in window;
	gamepad_HTML5GamepadManager._gamepads = [];
	if(gamepad_HTML5GamepadManager.hasGamepadEvents) {
		window.addEventListener("gamepadconnected",gamepad_HTML5GamepadManager.handleGamepadEvent,false);
		window.addEventListener("gamepaddisconnected",gamepad_HTML5GamepadManager.handleGamepadEvent,false);
	}
};
gamepad_HTML5GamepadManager.update = function() {
	var gamepads = gamepad_HTML5GamepadManager.getGamepads();
	var _g = 0;
	while(_g < gamepads.length) {
		var gamepad1 = gamepads[_g];
		++_g;
		if(gamepad1 != null) {
			gamepad_HTML5GamepadManager.addGamepad(gamepad1);
			gamepad_HTML5GamepadManager.updateGamepad(gamepad1);
		}
	}
};
gamepad_HTML5GamepadManager.updateGamepad = function(gamepad1) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(gamepad1.index)) return;
	var limeGamepad = lime_ui_Gamepad.devices.h[gamepad1.index];
	var localGamepad = gamepad_HTML5GamepadManager._gamepads[gamepad1.index];
	var _g1 = 0;
	var _g = gamepad1.buttons.length;
	while(_g1 < _g) {
		var idx = _g1++;
		if(gamepad_HTML5GamepadManager.isButtonPressed(gamepad1.buttons[idx])) {
			if(!localGamepad.buttons[idx].pressed) limeGamepad.onButtonDown.dispatch(idx);
		} else if(localGamepad.buttons[idx].pressed) limeGamepad.onButtonUp.dispatch(idx);
		localGamepad.buttons[idx] = gamepad_LocalGamepad.normalizeJSButton(gamepad1.buttons[idx]);
	}
	var _g11 = 0;
	var _g2 = gamepad1.axes.length;
	while(_g11 < _g2) {
		var idx1 = _g11++;
		if(Math.abs(gamepad1.axes[idx1] - localGamepad.axes[idx1]) > 0.00002) limeGamepad.onAxisMove.dispatch(idx1,gamepad1.axes[idx1]);
		localGamepad.axes[idx1] = gamepad1.axes[idx1];
	}
};
gamepad_HTML5GamepadManager.isButtonPressed = function(button) {
	if('pressed' in button) return button.pressed; else return button == 1.0;
};
gamepad_HTML5GamepadManager.getButtonValue = function(button) {
	if('value' in button) return button.value; else return button;
};
gamepad_HTML5GamepadManager.getGamepads = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return [];
};
gamepad_HTML5GamepadManager.handleGamepadEvent = function(event) {
	var _g = event.type;
	switch(_g) {
	case "gamepadconnected":
		gamepad_HTML5GamepadManager.addGamepad(event.gamepad);
		break;
	case "gamepaddisconnected":
		gamepad_HTML5GamepadManager.removeGamepad(event.gamepad);
		break;
	}
};
gamepad_HTML5GamepadManager.addGamepad = function(gm) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(gm.index)) {
		var gamepad1 = new lime_ui_Gamepad(gm.index);
		lime_ui_Gamepad.devices.h[gm.index] = gamepad1;
		lime_ui_Gamepad.onConnect.dispatch(gamepad1);
		gamepad_HTML5GamepadManager._gamepads[gm.index] = gamepad_LocalGamepad.fromJSGamepad(gm);
	}
};
gamepad_HTML5GamepadManager.removeGamepad = function(gm) {
	var gamepad1 = lime_ui_Gamepad.devices.h[gm.index];
	if(gamepad1 != null) gamepad1.connected = false;
	lime_ui_Gamepad.devices.remove(gm.index);
	gamepad_HTML5GamepadManager._gamepads[gm.index] = null;
	if(gamepad1 != null) gamepad1.onDisconnect.dispatch();
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	set: null
	,__class__: haxe_IMap
};
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
};
$hxClasses["haxe.Http"] = haxe_Http;
haxe_Http.__name__ = ["haxe","Http"];
haxe_Http.prototype = {
	url: null
	,responseData: null
	,async: null
	,postData: null
	,headers: null
	,params: null
	,req: null
	,request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) return;
			var s;
			try {
				s = r.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s != null) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) if(r.responseText != null) s = 200; else s = 404;
			}
			if(s == undefined) s = null;
			if(s != null) me.onStatus(s);
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else switch(s) {
			case 12029:
				me.req = null;
				me.onError("Failed to connect to host");
				break;
			case 12007:
				me.req = null;
				me.onError("Unknown host");
				break;
			default:
				me.req = null;
				me.responseData = r.responseText;
				me.onError("Http Error #" + r.status);
			}
		};
		if(this.async) r.onreadystatechange = onreadystatechange;
		var uri = this.postData;
		if(uri != null) post = true; else {
			var _g_head = this.params.h;
			var _g_val = null;
			while(_g_head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(uri == null) uri = ""; else uri += "&";
				uri += encodeURIComponent(p.param) + "=" + encodeURIComponent(p.value);
			}
		}
		try {
			if(post) r.open("POST",this.url,this.async); else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question?"?":"&") + uri,this.async);
				uri = null;
			} else r.open("GET",this.url,this.async);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		var _g_head1 = this.headers.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var h1;
			h1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) onreadystatechange(null);
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe_Http
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Json = function() { };
$hxClasses["haxe.Json"] = haxe_Json;
haxe_Json.__name__ = ["haxe","Json"];
haxe_Json.parse = function(text) {
	return new haxe_format_JsonParser(text).parseRec();
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		return a.a1 == this.a1 && a.a2 == this.a2;
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.length) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.set(pos++,value);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat32(pos,v,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() {
	this.crc = -1;
};
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.prototype = {
	crc: null
	,'byte': function(b) {
		var tmp = (this.crc ^ b) & 255;
		var _g = 0;
		while(_g < 8) {
			var j = _g++;
			if((tmp & 1) == 1) tmp = tmp >>> 1 ^ -306674912; else tmp >>>= 1;
		}
		this.crc = this.crc >>> 8 ^ tmp;
	}
	,update: function(b,pos,len) {
		var b1 = b.b.bufferValue;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = (this.crc ^ b1.bytes[i]) & 255;
			var _g2 = 0;
			while(_g2 < 8) {
				var j = _g2++;
				if((tmp & 1) == 1) tmp = tmp >>> 1 ^ -306674912; else tmp >>>= 1;
			}
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	,get: function() {
		return this.crc ^ -1;
	}
	,__class__: haxe_crypto_Crc32
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var nblk = (str.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) {
		var i1 = _g++;
		blks[i1] = 0;
	}
	var i = 0;
	while(i < str.length) {
		blks[i >> 2] |= HxOverrides.cca(str,i) << (str.length * 8 + i) % 4 * 8;
		i++;
	}
	blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
	var l = str.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxClasses["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_format_JsonParser = function(str) {
	this.str = str;
	this.pos = 0;
};
$hxClasses["haxe.format.JsonParser"] = haxe_format_JsonParser;
haxe_format_JsonParser.__name__ = ["haxe","format","JsonParser"];
haxe_format_JsonParser.prototype = {
	str: null
	,pos: null
	,parseRec: function() {
		while(true) {
			var c = StringTools.fastCodeAt(this.str,this.pos++);
			switch(c) {
			case 32:case 13:case 10:case 9:
				break;
			case 123:
				var obj = { };
				var field = null;
				var comma = null;
				while(true) {
					var c1 = StringTools.fastCodeAt(this.str,this.pos++);
					switch(c1) {
					case 32:case 13:case 10:case 9:
						break;
					case 125:
						if(field != null || comma == false) this.invalidChar();
						return obj;
					case 58:
						if(field == null) this.invalidChar();
						Reflect.setField(obj,field,this.parseRec());
						field = null;
						comma = true;
						break;
					case 44:
						if(comma) comma = false; else this.invalidChar();
						break;
					case 34:
						if(comma) this.invalidChar();
						field = this.parseString();
						break;
					default:
						this.invalidChar();
					}
				}
				break;
			case 91:
				var arr = [];
				var comma1 = null;
				while(true) {
					var c2 = StringTools.fastCodeAt(this.str,this.pos++);
					switch(c2) {
					case 32:case 13:case 10:case 9:
						break;
					case 93:
						if(comma1 == false) this.invalidChar();
						return arr;
					case 44:
						if(comma1) comma1 = false; else this.invalidChar();
						break;
					default:
						if(comma1) this.invalidChar();
						this.pos--;
						arr.push(this.parseRec());
						comma1 = true;
					}
				}
				break;
			case 116:
				var save = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 114 || StringTools.fastCodeAt(this.str,this.pos++) != 117 || StringTools.fastCodeAt(this.str,this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return true;
			case 102:
				var save1 = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 97 || StringTools.fastCodeAt(this.str,this.pos++) != 108 || StringTools.fastCodeAt(this.str,this.pos++) != 115 || StringTools.fastCodeAt(this.str,this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return false;
			case 110:
				var save2 = this.pos;
				if(StringTools.fastCodeAt(this.str,this.pos++) != 117 || StringTools.fastCodeAt(this.str,this.pos++) != 108 || StringTools.fastCodeAt(this.str,this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return null;
			case 34:
				return this.parseString();
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 45:
				return this.parseNumber(c);
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = StringTools.fastCodeAt(this.str,this.pos++);
			if(c == 34) break;
			if(c == 92) {
				if(buf == null) buf = new StringBuf();
				buf.addSub(this.str,start,this.pos - start - 1);
				c = StringTools.fastCodeAt(this.str,this.pos++);
				switch(c) {
				case 114:
					buf.b += "\r";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 47:case 92:case 34:
					buf.b += String.fromCharCode(c);
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid escape sequence \\" + String.fromCharCode(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) throw new js__$Boot_HaxeError("Unclosed string");
		}
		if(buf == null) return HxOverrides.substr(this.str,start,this.pos - start - 1); else {
			buf.addSub(this.str,start,this.pos - start - 1);
			return buf.b;
		}
	}
	,parseNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = StringTools.fastCodeAt(this.str,this.pos++);
			switch(c) {
			case 48:
				if(zero && !point) this.invalidNumber(start);
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) this.invalidNumber(start);
				if(minus) minus = false;
				digit = true;
				zero = false;
				break;
			case 46:
				if(minus || point) this.invalidNumber(start);
				digit = false;
				point = true;
				break;
			case 101:case 69:
				if(minus || zero || e) this.invalidNumber(start);
				digit = false;
				e = true;
				break;
			case 43:case 45:
				if(!e || pm) this.invalidNumber(start);
				digit = false;
				pm = true;
				break;
			default:
				if(!digit) this.invalidNumber(start);
				this.pos--;
				end = true;
			}
			if(end) break;
		}
		var f = Std.parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
		var i = f | 0;
		if(i == f) return i; else return f;
	}
	,invalidChar: function() {
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	,invalidNumber: function(start) {
		throw new js__$Boot_HaxeError("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
	,__class__: haxe_format_JsonParser
};
var haxe_format_JsonPrinter = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
$hxClasses["haxe.format.JsonPrinter"] = haxe_format_JsonPrinter;
haxe_format_JsonPrinter.__name__ = ["haxe","format","JsonPrinter"];
haxe_format_JsonPrinter.print = function(o,replacer,space) {
	var printer = new haxe_format_JsonPrinter(replacer,space);
	printer.write("",o);
	return printer.buf.b;
};
haxe_format_JsonPrinter.prototype = {
	buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
	,ipad: function() {
		if(this.pretty) {
			var v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
			if(v == null) this.buf.b += "null"; else this.buf.b += "" + v;
		}
	}
	,write: function(k,v) {
		if(this.replacer != null) v = this.replacer(k,v);
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 8:
				this.buf.b += "\"???\"";
				break;
			case 4:
				this.fieldsString(v,Reflect.fields(v));
				break;
			case 1:
				var v1 = v;
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2;
				if((function($this) {
					var $r;
					var f = v;
					$r = isFinite(f);
					return $r;
				}(this))) v2 = v; else v2 = "null";
				if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				break;
			case 5:
				this.buf.b += "\"<fun>\"";
				break;
			case 6:
				var c = _g[2];
				if(c == String) this.quote(v); else if(c == Array) {
					var v3 = v;
					this.buf.b += "[";
					var len = v3.length;
					var last = len - 1;
					var _g1 = 0;
					while(_g1 < len) {
						var i = _g1++;
						if(i > 0) this.buf.b += ","; else this.nind++;
						if(this.pretty) this.buf.b += "\n";
						this.ipad();
						this.write(i,v3[i]);
						if(i == last) {
							this.nind--;
							if(this.pretty) this.buf.b += "\n";
							this.ipad();
						}
					}
					this.buf.b += "]";
				} else if(c == haxe_ds_StringMap) {
					var v4 = v;
					var o = { };
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k1 = $it0.next();
						Reflect.setField(o,k1,__map_reserved[k1] != null?v4.getReserved(k1):v4.h[k1]);
					}
					this.fieldsString(o,Reflect.fields(o));
				} else if(c == Date) {
					var v5 = v;
					this.quote(HxOverrides.dateStr(v5));
				} else this.fieldsString(v,Reflect.fields(v));
				break;
			case 7:
				var i1 = Type.enumIndex(v);
				var v6 = i1;
				if(v6 == null) this.buf.b += "null"; else this.buf.b += "" + v6;
				break;
			case 3:
				var v7 = v;
				if(v7 == null) this.buf.b += "null"; else this.buf.b += "" + v7;
				break;
			case 0:
				this.buf.b += "null";
				break;
			}
		}
	}
	,fieldsString: function(v,fields) {
		this.buf.b += "{";
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) continue;
			if(first) {
				this.nind++;
				first = false;
			} else this.buf.b += ",";
			if(this.pretty) this.buf.b += "\n";
			this.ipad();
			this.quote(f);
			this.buf.b += ":";
			if(this.pretty) this.buf.b += " ";
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) this.buf.b += "\n";
				this.ipad();
			}
		}
		this.buf.b += "}";
	}
	,quote: function(s) {
		this.buf.b += "\"";
		var i = 0;
		while(true) {
			var c = StringTools.fastCodeAt(s,i++);
			if(c != c) break;
			switch(c) {
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 8:
				this.buf.b += "\\b";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			default:
				this.buf.b += String.fromCharCode(c);
			}
		}
		this.buf.b += "\"";
	}
	,__class__: haxe_format_JsonPrinter
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,add: function(src) {
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = 0;
		var _g = src.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = haxe_io_Bytes.alloc(nbytes);
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf_b = "";
		var last;
		while((last = this.readByte()) != end) buf_b += String.fromCharCode(last);
		return buf_b;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) return haxe_io_FPHelper.i64ToDouble(i2,i1); else return haxe_io_FPHelper.i64ToDouble(i1,i2);
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) return ch2 | ch1 << 8; else return ch1 | ch2 << 8;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24; else return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
	}
	,readString: function(len) {
		var b = haxe_io_Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(this.len == 0 && len > 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		var k = len;
		var b = s.b.bufferValue;
		if(pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		while(k > 0) {
			this.writeByte(b[pos]);
			pos++;
			k--;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeDouble: function(x) {
		var i64 = haxe_io_FPHelper.doubleToI64(x);
		if(this.bigEndian) {
			this.writeInt32(i64.high);
			this.writeInt32(i64.low);
		} else {
			this.writeInt32(i64.low);
			this.writeInt32(i64.high);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) return "";
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) return "";
	return s.ext;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_rtti_CType = $hxClasses["haxe.rtti.CType"] = { __ename__ : true, __constructs__ : ["CUnknown","CEnum","CClass","CTypedef","CFunction","CAnonymous","CDynamic","CAbstract"] };
haxe_rtti_CType.CUnknown = ["CUnknown",0];
haxe_rtti_CType.CUnknown.toString = $estr;
haxe_rtti_CType.CUnknown.__enum__ = haxe_rtti_CType;
haxe_rtti_CType.CEnum = function(name,params) { var $x = ["CEnum",1,name,params]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CClass = function(name,params) { var $x = ["CClass",2,name,params]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CTypedef = function(name,params) { var $x = ["CTypedef",3,name,params]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CFunction = function(args,ret) { var $x = ["CFunction",4,args,ret]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CAnonymous = function(fields) { var $x = ["CAnonymous",5,fields]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CDynamic = function(t) { var $x = ["CDynamic",6,t]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
haxe_rtti_CType.CAbstract = function(name,params) { var $x = ["CAbstract",7,name,params]; $x.__enum__ = haxe_rtti_CType; $x.toString = $estr; return $x; };
var haxe_rtti_Rights = $hxClasses["haxe.rtti.Rights"] = { __ename__ : true, __constructs__ : ["RNormal","RNo","RCall","RMethod","RDynamic","RInline"] };
haxe_rtti_Rights.RNormal = ["RNormal",0];
haxe_rtti_Rights.RNormal.toString = $estr;
haxe_rtti_Rights.RNormal.__enum__ = haxe_rtti_Rights;
haxe_rtti_Rights.RNo = ["RNo",1];
haxe_rtti_Rights.RNo.toString = $estr;
haxe_rtti_Rights.RNo.__enum__ = haxe_rtti_Rights;
haxe_rtti_Rights.RCall = function(m) { var $x = ["RCall",2,m]; $x.__enum__ = haxe_rtti_Rights; $x.toString = $estr; return $x; };
haxe_rtti_Rights.RMethod = ["RMethod",3];
haxe_rtti_Rights.RMethod.toString = $estr;
haxe_rtti_Rights.RMethod.__enum__ = haxe_rtti_Rights;
haxe_rtti_Rights.RDynamic = ["RDynamic",4];
haxe_rtti_Rights.RDynamic.toString = $estr;
haxe_rtti_Rights.RDynamic.__enum__ = haxe_rtti_Rights;
haxe_rtti_Rights.RInline = ["RInline",5];
haxe_rtti_Rights.RInline.toString = $estr;
haxe_rtti_Rights.RInline.__enum__ = haxe_rtti_Rights;
var haxe_rtti_TypeTree = $hxClasses["haxe.rtti.TypeTree"] = { __ename__ : true, __constructs__ : ["TPackage","TClassdecl","TEnumdecl","TTypedecl","TAbstractdecl"] };
haxe_rtti_TypeTree.TPackage = function(name,full,subs) { var $x = ["TPackage",0,name,full,subs]; $x.__enum__ = haxe_rtti_TypeTree; $x.toString = $estr; return $x; };
haxe_rtti_TypeTree.TClassdecl = function(c) { var $x = ["TClassdecl",1,c]; $x.__enum__ = haxe_rtti_TypeTree; $x.toString = $estr; return $x; };
haxe_rtti_TypeTree.TEnumdecl = function(e) { var $x = ["TEnumdecl",2,e]; $x.__enum__ = haxe_rtti_TypeTree; $x.toString = $estr; return $x; };
haxe_rtti_TypeTree.TTypedecl = function(t) { var $x = ["TTypedecl",3,t]; $x.__enum__ = haxe_rtti_TypeTree; $x.toString = $estr; return $x; };
haxe_rtti_TypeTree.TAbstractdecl = function(a) { var $x = ["TAbstractdecl",4,a]; $x.__enum__ = haxe_rtti_TypeTree; $x.toString = $estr; return $x; };
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) return { }; else return meta.fields;
};
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = ["haxe","rtti","Rtti"];
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) throw new js__$Boot_HaxeError("Class " + Type.getClassName(c) + " has no RTTI information, consider adding @:rtti");
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	{
		var t = infos;
		switch(infos[1]) {
		case 1:
			var c1 = infos[2];
			return c1;
		default:
			throw new js__$Boot_HaxeError("Enum mismatch: expected TClassDecl but found " + Std.string(t));
		}
	}
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = ["haxe","rtti","XmlParser"];
haxe_rtti_XmlParser.prototype = {
	root: null
	,curplatform: null
	,mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") return [];
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "null":
			return haxe_rtti_Rights.RNo;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		throw new js__$Boot_HaxeError("Invalid " + c.get_name());
	}
	,processElement: function(x) {
		var c = new haxe_xml_Fast(x);
		var _g = c.get_name();
		switch(_g) {
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = x.nodes.resolve("m").iterator();
		while(_g.head != null) {
			var m;
			m = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			var pl = [];
			var _g1 = m.nodes.resolve("e").iterator();
			while(_g1.head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g1.val = _g1.head[0];
					_g1.head = _g1.head[1];
					$r = _g1.val;
					return $r;
				}(this));
				pl.push(p.get_innerHTML());
			}
			ml.push({ name : m.att.resolve("n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = new List();
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var m = $it0.next();
			l.add(this.xclassfield(m));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(x.att.resolve("path"));
		var params = new List();
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			params.add(this.xtype(c));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = new List();
		var fields = new List();
		var statics = new List();
		var meta = [];
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			var _g = c.get_name();
			switch(_g) {
			case "haxe_doc":
				doc = c.get_innerData();
				break;
			case "extends":
				csuper = this.xpath(c);
				break;
			case "implements":
				interfaces.add(this.xpath(c));
				break;
			case "haxe_dynamic":
				tdynamic = this.xtype(new haxe_xml_Fast(c.x.firstElement()));
				break;
			case "meta":
				meta = this.xmeta(c);
				break;
			default:
				if(c.x.exists("static")) statics.add(this.xclassfield(c)); else fields.add(this.xclassfield(c));
			}
		}
		return { file : x.has.resolve("file")?x.att.resolve("file"):null, path : this.mkPath(x.att.resolve("path")), module : x.has.resolve("module")?this.mkPath(x.att.resolve("module")):null, doc : doc, isPrivate : x.x.exists("private"), isExtern : x.x.exists("extern"), isInterface : x.x.exists("interface"), params : this.mkTypeParams(x.att.resolve("params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) defPublic = false;
		var e = x.get_elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		while( e.hasNext() ) {
			var c = e.next();
			var _g = c.get_name();
			switch(_g) {
			case "haxe_doc":
				doc = c.get_innerData();
				break;
			case "meta":
				meta = this.xmeta(c);
				break;
			case "overloads":
				overloads = this.xoverloads(c);
				break;
			default:
				this.xerror(c);
			}
		}
		return { name : x.get_name(), type : t, isPublic : x.x.exists("public") || defPublic, isOverride : x.x.exists("override"), line : x.has.resolve("line")?Std.parseInt(x.att.resolve("line")):null, doc : doc, get : x.has.resolve("get")?this.mkRights(x.att.resolve("get")):haxe_rtti_Rights.RNormal, set : x.has.resolve("set")?this.mkRights(x.att.resolve("set")):haxe_rtti_Rights.RNormal, params : x.has.resolve("params")?this.mkTypeParams(x.att.resolve("params")):[], platforms : this.defplat(), meta : meta, overloads : overloads, expr : x.has.resolve("expr")?x.att.resolve("expr"):null};
	}
	,xenum: function(x) {
		var cl = new List();
		var doc = null;
		var meta = [];
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			if(c.get_name() == "haxe_doc") doc = c.get_innerData(); else if(c.get_name() == "meta") meta = this.xmeta(c); else cl.add(this.xenumfield(c));
		}
		return { file : x.has.resolve("file")?x.att.resolve("file"):null, path : this.mkPath(x.att.resolve("path")), module : x.has.resolve("module")?this.mkPath(x.att.resolve("module")):null, doc : doc, isPrivate : x.x.exists("private"), isExtern : x.x.exists("extern"), params : this.mkTypeParams(x.att.resolve("params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var xdoc = x.x.elementsNamed("haxe_doc").next();
		var meta;
		if(x.hasNode.resolve("meta")) meta = this.xmeta(x.node.resolve("meta")); else meta = [];
		if(x.has.resolve("a")) {
			var names = x.att.resolve("a").split(":");
			var elts = x.get_elements();
			args = new List();
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.add({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		return { name : x.get_name(), args : args, doc : xdoc == null?null:new haxe_xml_Fast(xdoc).get_innerData(), meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			var _g = c.get_name();
			switch(_g) {
			case "haxe_doc":
				doc = c.get_innerData();
				break;
			case "meta":
				meta = this.xmeta(c);
				break;
			case "to":
				var $it1 = c.get_elements();
				while( $it1.hasNext() ) {
					var t = $it1.next();
					to.push({ t : this.xtype(new haxe_xml_Fast(t.x.firstElement())), field : t.has.resolve("field")?t.att.resolve("field"):null});
				}
				break;
			case "from":
				var $it2 = c.get_elements();
				while( $it2.hasNext() ) {
					var t1 = $it2.next();
					from.push({ t : this.xtype(new haxe_xml_Fast(t1.x.firstElement())), field : t1.has.resolve("field")?t1.att.resolve("field"):null});
				}
				break;
			case "impl":
				impl = this.xclass(c.node.resolve("class"));
				break;
			case "this":
				athis = this.xtype(new haxe_xml_Fast(c.x.firstElement()));
				break;
			default:
				this.xerror(c);
			}
		}
		return { file : x.has.resolve("file")?x.att.resolve("file"):null, path : this.mkPath(x.att.resolve("path")), module : x.has.resolve("module")?this.mkPath(x.att.resolve("module")):null, doc : doc, isPrivate : x.x.exists("private"), params : this.mkTypeParams(x.att.resolve("params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			if(c.get_name() == "haxe_doc") doc = c.get_innerData(); else if(c.get_name() == "meta") meta = this.xmeta(c); else t = this.xtype(c);
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) types.set(this.curplatform,t);
		return { file : x.has.resolve("file")?x.att.resolve("file"):null, path : this.mkPath(x.att.resolve("path")), module : x.has.resolve("module")?this.mkPath(x.att.resolve("module")):null, doc : doc, isPrivate : x.x.exists("private"), params : this.mkTypeParams(x.att.resolve("params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g = x.get_name();
		switch(_g) {
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(x.att.resolve("path")),this.xtypeparams(x));
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(x.att.resolve("path")),this.xtypeparams(x));
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(x.att.resolve("path")),this.xtypeparams(x));
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(x.att.resolve("path")),this.xtypeparams(x));
		case "f":
			var args = new List();
			var aname = x.att.resolve("a").split(":");
			var eargs = HxOverrides.iter(aname);
			var evalues;
			if(x.has.resolve("v")) {
				var _this = x.att.resolve("v").split(":");
				evalues = HxOverrides.iter(_this);
			} else evalues = null;
			var $it0 = x.get_elements();
			while( $it0.hasNext() ) {
				var e = $it0.next();
				var opt = false;
				var a = eargs.next();
				if(a == null) a = "";
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v;
				if(evalues == null) v = null; else v = evalues.next();
				args.add({ name : a, opt : opt, t : this.xtype(e), value : v == ""?null:v});
			}
			var ret = args.last();
			args.remove(ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "a":
			var fields = new List();
			var $it1 = x.get_elements();
			while( $it1.hasNext() ) {
				var f = $it1.next();
				var f1 = this.xclassfield(f,true);
				f1.platforms = new List();
				fields.add(f1);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "d":
			var t = null;
			var tx = x.x.firstElement();
			if(tx != null) t = this.xtype(new haxe_xml_Fast(tx));
			return haxe_rtti_CType.CDynamic(t);
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = new List();
		var $it0 = x.get_elements();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			p.add(this.xtype(c));
		}
		return p;
	}
	,defplat: function() {
		var l = new List();
		if(this.curplatform != null) l.add(this.curplatform);
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) xname = "Document"; else xname = this.__x.get_nodeName();
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		var v = this.__x.get(name);
		if(v == null) throw new js__$Boot_HaxeError(this.__x.get_nodeName() + " is missing attribute " + name);
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		return this.__x.elementsNamed(name).hasNext();
	}
	,__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var l = new List();
		var $it0 = this.__x.elementsNamed(name);
		while( $it0.hasNext() ) {
			var x = $it0.next();
			l.add(new haxe_xml_Fast(x));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,get_name: function() {
		if(this.x.nodeType == Xml.Document) return "Document"; else return this.x.get_nodeName();
	}
	,get_innerData: function() {
		var it = this.x.iterator();
		if(!it.hasNext()) throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		var v = it.next();
		var n = it.next();
		if(n != null) {
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData && StringTools.trim((function($this) {
				var $r;
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				$r = v.nodeValue;
				return $r;
			}(this))) == "") {
				var n2 = it.next();
				if(n2 == null || n2.nodeType == Xml.PCData && StringTools.trim((function($this) {
					var $r;
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					$r = n2.nodeValue;
					return $r;
				}(this))) == "" && it.next() == null) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		return v.nodeValue;
	}
	,get_innerHTML: function() {
		var s = new StringBuf();
		var $it0 = this.x.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			s.add(haxe_xml_Printer.print(x));
		}
		return s.b;
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) return null;
			return new haxe_xml_Fast(x);
		}};
	}
	,__class__: haxe_xml_Fast
	,__properties__: {get_elements:"get_elements",get_innerHTML:"get_innerHTML",get_innerData:"get_innerData",get_name:"get_name"}
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) pretty = false;
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			this.write(StringTools.trim((function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this))));
			this.output.b += "]]>";
			if(this.pretty) this.output.b += "";
			break;
		case 3:
			var commentContent;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			commentContent = value.nodeValue;
			commentContent = new EReg("[\n\r\t]+","g").replace(commentContent,"");
			commentContent = "<!--" + commentContent + "-->";
			if(tabs == null) this.output.b += "null"; else this.output.b += "" + tabs;
			this.write(StringTools.trim(commentContent));
			if(this.pretty) this.output.b += "";
			break;
		case 6:
			var $it0 = (function($this) {
				var $r;
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				$r = HxOverrides.iter(value.children);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var child = $it0.next();
				this.writeNode(child,tabs);
			}
			break;
		case 0:
			this.output.b += Std.string(tabs + "<");
			this.write((function($this) {
				var $r;
				if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				$r = value.nodeName;
				return $r;
			}(this)));
			var $it1 = value.attributes();
			while( $it1.hasNext() ) {
				var attribute = $it1.next();
				this.output.b += Std.string(" " + attribute + "=\"");
				this.write(StringTools.htmlEscape(value.get(attribute),true));
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
				var $it2 = (function($this) {
					var $r;
					if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
					$r = HxOverrides.iter(value.children);
					return $r;
				}(this));
				while( $it2.hasNext() ) {
					var child1 = $it2.next();
					this.writeNode(child1,this.pretty?tabs + "\t":tabs);
				}
				this.output.b += Std.string(tabs + "</");
				this.write((function($this) {
					var $r;
					if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
					$r = value.nodeName;
					return $r;
				}(this)));
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
			} else {
				this.output.b += "/>";
				if(this.pretty) this.output.b += "";
			}
			break;
		case 1:
			var nodeValue;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				this.write(tabs + StringTools.htmlEscape(nodeValue));
				if(this.pretty) this.output.b += "";
			}
			break;
		case 5:
			this.write("<?" + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + "?>");
			break;
		case 4:
			this.write("<!DOCTYPE " + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + ">");
			break;
		}
	}
	,write: function(input) {
		if(input == null) this.output.b += "null"; else this.output.b += "" + input;
	}
	,hasChildren: function(value) {
		var $it0 = (function($this) {
			var $r;
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			$r = HxOverrides.iter(value.children);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var child = $it0.next();
			var _g = child.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(StringTools.ltrim((function($this) {
					var $r;
					if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
					$r = child.nodeValue;
					return $r;
				}(this))).length != 0) return true;
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxClasses["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db?da:db);
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) return t;
		if(d == 1) switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		switch(t[1]) {
		case 1:
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else table[p] = this.treeCompress(t);
			break;
		default:
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) return haxe_zip_Huffman.Found(bits.h[idx]);
		v <<= 1;
		len += 1;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) throw new js__$Boot_HaxeError("Invalid huffman");
		var _g = 0;
		while(_g < maxbits) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g1 = 0;
		while(_g1 < nlengths) {
			var i1 = _g1++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) throw new js__$Boot_HaxeError("Invalid huffman");
			counts[p]++;
		}
		var code = 0;
		var _g11 = 1;
		var _g2 = maxbits - 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g3 = 0;
		while(_g3 < nlengths) {
			var i3 = _g3++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = haxe_io_Bytes.alloc(65536);
	this.pos = 0;
	if(hasCrc) this.crc = new haxe_crypto_Adler32();
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,32768);
		var b = haxe_io_Bytes.alloc(65536);
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) this.slide();
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) this.slide();
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) this.crc.update(this.buffer,0,this.pos);
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxClasses["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) crc = true;
	if(header == null) header = true;
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	if(header) this.state = haxe_zip__$InflateImpl_State.Head; else this.state = haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) bufsize = 65536;
	var buf = haxe_io_Bytes.alloc(bufsize);
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) break;
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,'final': null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143?8:n <= 255?9:n <= 279?7:8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) while(this.inflateLoop()) {
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) return 0; else if(this.getBit()) return 1 << n - 1 | this.getRevBits(n - 1); else return this.getRevBits(n - 1);
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit()?b:a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				i++;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) throw new js__$Boot_HaxeError("Invalid data");
				while(i < end) {
					a[i] = prev;
					i++;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) throw new js__$Boot_HaxeError("Invalid data");
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) throw new js__$Boot_HaxeError("Invalid data");
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) throw new js__$Boot_HaxeError("Invalid data");
			if(fdict) throw new js__$Boot_HaxeError("Unsupported dictionary");
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) throw new js__$Boot_HaxeError("Invalid CRC");
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 7:
			return false;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) throw new js__$Boot_HaxeError("Invalid data");
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g2 = 0;
				while(_g2 < hclen) {
					var i = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g21 = hclen;
				while(_g21 < 19) {
					var i1 = _g21++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g3 = 0;
				var _g22 = hlit + hdist;
				while(_g3 < _g22) {
					var i2 = _g3++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 3:
			var rlen;
			if(this.len < this.needed) rlen = this.len; else rlen = this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) if(this["final"]) this.state = haxe_zip__$InflateImpl_State.Crc; else this.state = haxe_zip__$InflateImpl_State.Block;
			return this.needed > 0;
		case 6:
			var rlen1;
			if(this.len < this.needed) rlen1 = this.len; else rlen1 = this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) this.state = haxe_zip__$InflateImpl_State.CData;
			return this.needed > 0;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist;
				if(this.len < this.dist) rdist = this.len; else rdist = this.dist;
				var rlen2;
				if(this.needed < rdist) rlen2 = this.needed; else rlen2 = rdist;
				this.addDist(this.dist,rlen2);
				this.len -= rlen2;
			}
			if(this.len == 0) this.state = haxe_zip__$InflateImpl_State.CData;
			return this.needed > 0;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				if(this["final"]) this.state = haxe_zip__$InflateImpl_State.Crc; else this.state = haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code;
				if(this.huffdist == null) dist_code = this.getRevBits(5); else dist_code = this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) throw new js__$Boot_HaxeError("Invalid data");
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) throw new js__$Boot_HaxeError("Invalid data");
				if(this.dist == 1) this.state = haxe_zip__$InflateImpl_State.DistOne; else this.state = haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = ["haxe","zip","Uncompress"];
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") return new XMLHttpRequest();
	if(typeof ActiveXObject != "undefined") return new ActiveXObject("Microsoft.XMLHTTP");
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Std["int"](Math.random() * 1000000);
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or Bytes asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
				lime_Assets.cache.audio.set(id,audio1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
				lime_Assets.cache.image.set(id,image1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = new haxe_format_JsonParser(data).parseRec();
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyDown.canceled) event.preventDefault();
			} else {
				this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyUp.canceled) event.preventDefault();
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				webgl = WebGLDebugUtils.makeDebugContext(webgl);
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height); else rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onJoystickAxisMove: null
	,onJoystickButtonDown: null
	,onJoystickButtonUp: null
	,onJoystickConnect: null
	,onJoystickDisconnect: null
	,onJoystickHatMove: null
	,onJoystickTrackballMove: null
	,onKeyDown: null
	,onKeyUp: null
	,onModuleExit: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onPreloadComplete: null
	,onPreloadProgress: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowCreate: null
	,onWindowDeactivate: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		haxe_Log.trace("onGamepadConnect (module)",{ fileName : "Module.hx", lineNumber : 64, className : "lime.app.Module", methodName : "onGamepadConnect"});
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	isCompleted: null
	,value: null
	,__completed: null
	,__completeListeners: null
	,__errored: null
	,__errorListeners: null
	,__errorMessage: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) listener(this.__errorMessage); else if(!this.__completed) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) return next(this.value); else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		return this.__completed || this.__errored;
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			var future = loader2.load(url1 + "?" + cacheVersion);
			future.onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.onProgress.dispatch(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isCompleted: null
	,complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
	}
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.set_loops(loops);
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,id: null
	,playing: null
	,pauseTime: null
	,__length: null
	,__loops: null
	,dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	return bytes.b[0] == 255 && bytes.b[1] == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		return (b == 55 || b == 57) && bytes.b[5] == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(this.buffer == null || sourceImage == null || sourceRect == null) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format != null) switch(format) {
			case 1:
				_color = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb = 0;
					argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					_color = argb;
				}
				break;
			default:
				{
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					_color = argb1;
				}
			} else {
				var rgba1 = color;
				var argb2 = 0;
				argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				_color = argb2;
			}
			var _mask;
			if(format != null) switch(format) {
			case 1:
				_mask = mask;
				break;
			case 2:
				{
					var bgra1 = mask;
					var argb3 = 0;
					argb3 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
					_mask = argb3;
				}
				break;
			default:
				{
					var rgba2 = mask;
					var argb4 = 0;
					argb4 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
					_mask = argb4;
				}
			} else {
				var rgba3 = mask;
				var argb5 = 0;
				argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
				_mask = argb5;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : true, __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = haxe_io_Bytes.alloc(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	var position = 0;
	if(fileHeaderLength > 0) {
		data.set(position++,66);
		data.set(position++,77);
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.set(position++,32);
		data.set(position++,110);
		data.set(position++,105);
		data.set(position++,87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.set(position++,0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			readPosition = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
			}
		}
		break;
	case 2:
		var andMask = haxe_io_Bytes.alloc(image.width * image.height);
		var maskPosition = 0;
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			readPosition = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
				andMask.set(maskPosition++,0);
			}
		}
		data.blit(position,andMask,0,image.width * image.height);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			readPosition = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.set(position++,0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = haxe_io_Bytes.alloc(buffer.length);
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var bytes = haxe_io_Bytes.alloc(length * 4);
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			bytes.set(destPosition++,pixel >> 24 & 255);
			bytes.set(destPosition++,pixel >> 16 & 255);
			bytes.set(destPosition++,pixel >> 8 & 255);
			bytes.set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		{
			var argb2 = threshold;
			var rgba2 = 0;
			rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
			_threshold = rgba2;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba3 = 0;
			rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba3;
		}
		{
			var bgra1 = mask;
			var rgba4 = 0;
			rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba4;
		}
		{
			var bgra2 = threshold;
			var rgba5 = 0;
			rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
			_threshold = rgba5;
		}
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "==":
		_operation = 1;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) return 0;
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return 0;
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			value = lime_graphics_utils_ImageDataUtil.__pixelCompare(pixelMask,_threshold);
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) _color = 0;
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = _color >> 8 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 0:
					destData[destPosition] = _color >> 24 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >> 24 & 255;
					destData[destPosition + 2] = _color >> 16 & 255;
					destData[destPosition + 3] = _color >> 8 & 255;
					break;
				}
				hits++;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) srcPixel = 0;
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = srcPixel >> 8 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 0:
					destData[destPosition] = srcPixel >> 24 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >> 24 & 255;
					destData[destPosition + 2] = srcPixel >> 16 & 255;
					destData[destPosition + 3] = srcPixel >> 8 & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) image.dirty = true;
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,promise: null
	,load: function(url) {
		var _g = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) return;
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_g.bytes = lime_utils_Bytes.ofData(request.response);
				_g.promise.complete(_g.bytes);
			} else _g.promise.error(request.status);
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,curl_onProgress: function(dltotal,dlnow,uptotal,upnow) {
		if(upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
			if(upnow > this.bytesLoaded) this.bytesLoaded = upnow | 0;
			if(dlnow > this.bytesLoaded) this.bytesLoaded = dlnow | 0;
			if(uptotal > this.bytesTotal) this.bytesTotal = uptotal | 0;
			if(dltotal > this.bytesTotal) this.bytesTotal = dltotal | 0;
			this.promise.progress(this.bytesLoaded / this.bytesTotal);
		}
		return 0;
	}
	,curl_onWrite: function(output,size,nmemb) {
		var cacheBytes = this.bytes;
		this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
		this.bytes.blit(0,cacheBytes,0,cacheBytes.length);
		this.bytes.blit(cacheBytes.length,output,0,output.length);
		return size * nmemb;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_net_curl__$CURL_CURL_$Impl_$ = {};
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date,now) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {
};
lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a,b) {
	return a > b;
};
var lime_net_curl_CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
lime_net_curl_CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime_net_curl_CURLEasy.cleanup = function(handle) {
};
lime_net_curl_CURLEasy.duphandle = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime_net_curl_CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime_net_curl_CURLEasy.init = function() {
	return 0;
};
lime_net_curl_CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime_net_curl_CURLEasy.perform = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.reset = function(handle) {
};
lime_net_curl_CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime_net_curl_CURLEasy.strerror = function(code) {
	return null;
};
lime_net_curl_CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime_net_curl_CURLEasy.__writeCallback = function(callback,output,size,nmemb) {
	return 0;
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) this.onProgress.dispatch(message);
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.available = null;
lime_system_CFFI.enabled = null;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : true, __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.endianness = null;
lime_system_System.fontsDirectory = null;
lime_system_System.numDisplays = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : true, __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) this.__borderless = config.borderless;
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) this.__resizable = config.resizable;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : true, __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = haxe_io_Bytes.alloc(length);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.readFile = function(path) {
	return null;
};
lime_utils_Bytes.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_Bytes.lime_bytes_read_file = function(path) {
	return lime_utils_Bytes.cffi_lime_bytes_read_file(path);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	autoVisible: null
	,delay: null
	,ease: null
	,onComplete: null
	,onRepeat: null
	,onUpdate: null
	,reflect: null
	,repeat: null
	,reverse: null
	,smartRotation: null
	,snapping: null
	,onPause: null
	,onResume: null
	,apply: null
	,move: null
	,pause: null
	,resume: null
	,stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	calculate: null
	,ease: null
	,__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	progress: null
	,__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	rotation: null
	,x: null
	,y: null
	,_rotation: null
	,_x: null
	,_y: null
	,bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion_RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	get_end: null
	,end: null
	,start: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	start: null
	,end: null
	,paths: null
	,totalStrength: null
	,addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	control: null
	,end: null
	,strength: null
	,calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	end: null
	,offset: null
	,start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Elastic = function() { };
$hxClasses["motion.easing.Elastic"] = motion_easing_Elastic;
motion_easing_Elastic.__name__ = ["motion","easing","Elastic"];
motion_easing_Elastic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Elastic.get_easeIn = function() {
	return new motion_easing_ElasticEaseIn(0.1,0.4);
};
motion_easing_Elastic.get_easeInOut = function() {
	return new motion_easing_ElasticEaseInOut(0.1,0.4);
};
motion_easing_Elastic.get_easeOut = function() {
	return new motion_easing_ElasticEaseOut(0.1,0.4);
};
var motion_easing_ElasticEaseIn = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseIn"] = motion_easing_ElasticEaseIn;
motion_easing_ElasticEaseIn.__name__ = ["motion","easing","ElasticEaseIn"];
motion_easing_ElasticEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseIn.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return -(this.a * Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / this.p));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return -(this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
	}
	,__class__: motion_easing_ElasticEaseIn
};
var motion_easing_ElasticEaseInOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseInOut"] = motion_easing_ElasticEaseInOut;
motion_easing_ElasticEaseInOut.__name__ = ["motion","easing","ElasticEaseInOut"];
motion_easing_ElasticEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseInOut.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) return 0;
		if((k /= 0.5) == 2) return 1;
		var p = 0.449999999999999956;
		var a = 1;
		var s = p / 4;
		if(k < 1) return -0.5 * (Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
		return Math.pow(2,-10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d / 2) == 2) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		if(t < 1) return -0.5 * (this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
		return this.a * Math.pow(2,-10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) * 0.5 + c + b;
	}
	,__class__: motion_easing_ElasticEaseInOut
};
var motion_easing_ElasticEaseOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseOut"] = motion_easing_ElasticEaseOut;
motion_easing_ElasticEaseOut.__name__ = ["motion","easing","ElasticEaseOut"];
motion_easing_ElasticEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ElasticEaseOut.prototype = {
	a: null
	,p: null
	,calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return this.a * Math.pow(2,-10 * k) * Math.sin((k - s) * (2 * Math.PI) / this.p) + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return this.a * Math.pow(2,-10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) + c + b;
	}
	,__class__: motion_easing_ElasticEaseOut
};
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = ["msignal","Signal1"];
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = ["msignal","Signal2"];
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = ["msignal","Slot"];
msignal_Slot.prototype = {
	listener: null
	,once: null
	,priority: null
	,enabled: null
	,signal: null
	,remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		if(value == null) throw new js__$Boot_HaxeError("listener cannot be null");
		return this.listener = value;
	}
	,__class__: msignal_Slot
	,__properties__: {set_listener:"set_listener"}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = ["msignal","Slot0"];
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) return;
		if(this.once) this.remove();
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = ["msignal","Slot1"];
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	param: null
	,execute: function(value1) {
		if(!this.enabled) return;
		if(this.once) this.remove();
		if(this.param != null) value1 = this.param;
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) priority = 0;
	if(once == null) once = false;
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = ["msignal","Slot2"];
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	param1: null
	,param2: null
	,execute: function(value1,value2) {
		if(!this.enabled) return;
		if(this.once) this.remove();
		if(this.param1 != null) value1 = this.param1;
		if(this.param2 != null) value2 = this.param2;
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var oaktree_ext_commands_Commands = function() {
	this._commands = new haxe_ds_StringMap();
};
$hxClasses["oaktree.ext.commands.Commands"] = oaktree_ext_commands_Commands;
oaktree_ext_commands_Commands.__name__ = ["oaktree","ext","commands","Commands"];
oaktree_ext_commands_Commands.prototype = {
	_commands: null
	,initialize: function(commands) {
		var _g = 0;
		while(_g < commands.length) {
			var command = commands[_g];
			++_g;
			this._commands.set(command.event,command);
			this.addCommand(command);
		}
	}
	,addCommand: function(command) {
		oaktree_OakTree.events.addEventListener(command.event,$bind(this,this.handleCommandEvent));
	}
	,removeCommand: function(command) {
		oaktree_OakTree.events.removeEventListener(command.event,$bind(this,this.handleCommandEvent));
	}
	,handleCommandEvent: function(event) {
		var command = this._commands.get(event.type);
		var commandClass = command.command;
		var commandInstance = Type.createEmptyInstance(commandClass);
		commandInstance.execute(event);
		commandInstance = null;
		if(command.oneTime) {
			this.removeCommand(command);
			this._commands.remove(event.type);
		}
	}
	,__class__: oaktree_ext_commands_Commands
};
var oaktree_core_events_Dispatcher = function() {
	this.eventDispatcher = new openfl_events_EventDispatcher();
};
$hxClasses["oaktree.core.events.Dispatcher"] = oaktree_core_events_Dispatcher;
oaktree_core_events_Dispatcher.__name__ = ["oaktree","core","events","Dispatcher"];
oaktree_core_events_Dispatcher.prototype = {
	eventDispatcher: null
	,dispatchEventWith: function(type,data,bubbles) {
		if(bubbles == null) bubbles = false;
		this.eventDispatcher.dispatchEvent(new oaktree_core_events_GameEvent(type,data,bubbles));
	}
	,addEventListener: function(type,listener,useCapture,priority) {
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.eventDispatcher.hasEventListener(type)) this.eventDispatcher.removeEventListener(type,listener);
		this.eventDispatcher.addEventListener(type,listener,useCapture,priority);
	}
	,removeEventListener: function(type,listener) {
		this.eventDispatcher.removeEventListener(type,listener);
	}
	,fire: function(type,data) {
		this.dispatchEventWith(type,data);
	}
	,listen: function(type,listener) {
		this.eventDispatcher.addEventListener(type,listener);
	}
	,unlisten: function(type,listener) {
		this.eventDispatcher.removeEventListener(type,listener);
	}
	,__class__: oaktree_core_events_Dispatcher
};
var oaktree_OakTree = function() { };
$hxClasses["oaktree.OakTree"] = oaktree_OakTree;
oaktree_OakTree.__name__ = ["oaktree","OakTree"];
oaktree_OakTree.__properties__ = {get_fontName:"get_fontName",get_scenes:"get_scenes"}
oaktree_OakTree.scenes = null;
oaktree_OakTree.engine = null;
oaktree_OakTree.stage = null;
oaktree_OakTree.fontName = null;
oaktree_OakTree.fontFile = null;
oaktree_OakTree.init = function() {
	if(oaktree_OakTree._isInitialized) {
		haxe_Log.trace("OakTree already initialized",{ fileName : "OakTree.hx", lineNumber : 34, className : "oaktree.OakTree", methodName : "init"});
		return;
	}
	oaktree_utils_Warehouse.store("oaktree-logo",openfl_Assets.getBitmapData("core-assets/oaktree.png"));
	oaktree_utils_Warehouse.store("dialog-closebutton",openfl_Assets.getBitmapData("core-assets/Close.png"));
	oaktree_utils_Warehouse.store("dialog-closebutton-disabled",openfl_Assets.getBitmapData("core-assets/Close_disabled.png"));
	oaktree_OakTree._isInitialized = true;
};
oaktree_OakTree.onEngineAddedToStage = function(pEngine,pStage) {
	oaktree_OakTree.engine = pEngine;
	oaktree_OakTree.stage = pStage;
};
oaktree_OakTree.get_fontName = function() {
	return "_sans";
};
oaktree_OakTree.get_scenes = function() {
	return oaktree_OakTree.engine.scenes;
};
var oaktree_core_Entity = function(pStandalone) {
	if(pStandalone == null) pStandalone = false;
	this.standalone = false;
	this.parentEntity = null;
	this._id = oaktree_core_Entity._idCounter + 1;
	this._components = [];
	this._entities = [];
	this._entitiesToAdd = [];
	this._entitiesToRemove = [];
	this.set_standalone(pStandalone);
	if(this.standalone) oaktree_OakTree.engine.entities.registerEntity(this);
};
$hxClasses["oaktree.core.Entity"] = oaktree_core_Entity;
oaktree_core_Entity.__name__ = ["oaktree","core","Entity"];
oaktree_core_Entity.__interfaces__ = [oaktree_core_IEntityContainer,oaktree_core_IEntity];
oaktree_core_Entity.prototype = {
	_id: null
	,handle: null
	,scene: null
	,parentEntity: null
	,_components: null
	,_entities: null
	,_entitiesToAdd: null
	,_entitiesToRemove: null
	,dispose: function() {
		this.removeEntitiesFromQueue();
		this._entitiesToRemove = null;
		this.addEntitiesFromQueue();
		this._entitiesToAdd = null;
		var _g = 0;
		var _g1 = this._entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.dispose();
		}
		var _g2 = 0;
		var _g11 = this._components;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			c.dispose();
		}
		this._components = null;
		this.scene = null;
		if(this.standalone) {
			this.set_standalone(false);
			oaktree_OakTree.engine.entities.unregisterEntity(this);
		}
	}
	,getId: function() {
		return this._id;
	}
	,onAddedToScene: function(pScene) {
		this.scene = pScene;
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onEntityAddedToScene(this.scene);
		}
		var _g2 = 0;
		var _g11 = this._entities;
		while(_g2 < _g11.length) {
			var e = _g11[_g2];
			++_g2;
			e.onAddedToScene(this.scene);
		}
	}
	,onRemovedFromScene: function() {
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onEntityRemovedFromScene();
		}
		var _g2 = 0;
		var _g11 = this._entities;
		while(_g2 < _g11.length) {
			var e = _g11[_g2];
			++_g2;
			e.onRemovedFromScene();
		}
		this.scene = null;
	}
	,addComponent: function(pComponent) {
		this._components.push(pComponent);
		this._components.sort($bind(this,this.sortOnPriority));
		pComponent.onAddedToEntity(this);
		if(this.scene != null) pComponent.onEntityAddedToScene(this.scene);
		return pComponent;
	}
	,removeComponent: function(pComponent) {
		if(this.scene != null) pComponent.onEntityRemovedFromScene();
		this._components.slice(oaktree_utils_ArrayUtil.indexOf(this._components,pComponent),1);
		pComponent.onRemovedFromEntity();
		return pComponent;
	}
	,removeAllComponents: function() {
		var _g = 0;
		var _g1 = this._components;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this.scene != null) c.onEntityRemovedFromScene();
			c.onRemovedFromEntity();
		}
		this._components = [];
	}
	,sortOnPriority: function(a,b) {
		return a.priority - b.priority;
	}
	,addEntity: function(pEntity) {
		this._entitiesToAdd.push(pEntity);
		return pEntity;
	}
	,removeEntity: function(pEntity) {
		this._entitiesToRemove.push(pEntity);
		return pEntity;
	}
	,update: function(pDT) {
		var pos;
		var c;
		this.addEntitiesFromQueue();
		pos = this._components.length;
		while(--pos >= 0) {
			c = this._components[pos];
			if(c.enabled) c.update(pDT);
		}
		var _g = 0;
		var _g1 = this._entities;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.update(pDT);
		}
		this.removeEntitiesFromQueue();
	}
	,internal_addEntity: function(pEntity) {
		this._entities.push(pEntity);
		if(this.scene != null) pEntity.onAddedToScene(this.scene);
	}
	,internal_removeEntity: function(pEntity) {
		this._entities.splice(oaktree_utils_ArrayUtil.indexOf(this._entities,pEntity),1);
		pEntity.onRemovedFromScene();
		pEntity.dispose();
	}
	,addEntitiesFromQueue: function() {
		var e;
		if(this._entitiesToAdd.length > 0) {
			var _g = 0;
			var _g1 = this._entitiesToAdd;
			while(_g < _g1.length) {
				var e1 = _g1[_g];
				++_g;
				this.internal_addEntity(e1);
			}
			this._entitiesToAdd = [];
		}
	}
	,removeEntitiesFromQueue: function() {
		var pos = this._entitiesToRemove.length;
		var e;
		if(pos > 0) {
			while(--pos >= 0) {
				e = this._entitiesToRemove[pos];
				this.internal_removeEntity(e);
			}
			this._entitiesToRemove = [];
		}
	}
	,entities: null
	,get_entities: function() {
		return this._entities;
	}
	,id: null
	,get_id: function() {
		return this._id;
	}
	,standalone: null
	,set_standalone: function(value) {
		if(this.standalone != value) {
			if(value) oaktree_OakTree.engine.entities.registerEntity(this); else oaktree_OakTree.engine.entities.unregisterEntity(this);
		}
		this.standalone = value;
		return value;
	}
	,__class__: oaktree_core_Entity
	,__properties__: {set_standalone:"set_standalone",get_id:"get_id",get_entities:"get_entities"}
};
var oaktree_core_EntityManager = function() {
	this.entityList = new List();
};
$hxClasses["oaktree.core.EntityManager"] = oaktree_core_EntityManager;
oaktree_core_EntityManager.__name__ = ["oaktree","core","EntityManager"];
oaktree_core_EntityManager.prototype = {
	entityList: null
	,registerEntity: function(pEntity) {
		this.entityList.add(pEntity);
	}
	,unregisterEntity: function(pEntity) {
		this.entityList.remove(pEntity);
	}
	,update: function(pDelta) {
		var _g_head = this.entityList.h;
		var _g_val = null;
		while(_g_head != null) {
			var entity;
			entity = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			entity.update(pDelta);
		}
	}
	,__class__: oaktree_core_EntityManager
};
var oaktree_core_Log = function() { };
$hxClasses["oaktree.core.Log"] = oaktree_core_Log;
oaktree_core_Log.__name__ = ["oaktree","core","Log"];
oaktree_core_Log._filter = null;
oaktree_core_Log._exclude = null;
oaktree_core_Log._get_spacing = function(_file) {
	var _spaces = "";
	var _trace_length = _file.length + 4;
	var _diff = oaktree_core_Log._log_width - _trace_length;
	if(_diff > 0) {
		var _g = 0;
		while(_g < _diff) {
			var i = _g++;
			_spaces += " ";
		}
	}
	return _spaces;
};
var oaktree_core_FileType = $hxClasses["oaktree.core.FileType"] = { __ename__ : true, __constructs__ : ["AUTO","IMAGE","TEXT","BINARY","SOUND","FONT"] };
oaktree_core_FileType.AUTO = ["AUTO",0];
oaktree_core_FileType.AUTO.toString = $estr;
oaktree_core_FileType.AUTO.__enum__ = oaktree_core_FileType;
oaktree_core_FileType.IMAGE = ["IMAGE",1];
oaktree_core_FileType.IMAGE.toString = $estr;
oaktree_core_FileType.IMAGE.__enum__ = oaktree_core_FileType;
oaktree_core_FileType.TEXT = ["TEXT",2];
oaktree_core_FileType.TEXT.toString = $estr;
oaktree_core_FileType.TEXT.__enum__ = oaktree_core_FileType;
oaktree_core_FileType.BINARY = ["BINARY",3];
oaktree_core_FileType.BINARY.toString = $estr;
oaktree_core_FileType.BINARY.__enum__ = oaktree_core_FileType;
oaktree_core_FileType.SOUND = ["SOUND",4];
oaktree_core_FileType.SOUND.toString = $estr;
oaktree_core_FileType.SOUND.__enum__ = oaktree_core_FileType;
oaktree_core_FileType.FONT = ["FONT",5];
oaktree_core_FileType.FONT.toString = $estr;
oaktree_core_FileType.FONT.__enum__ = oaktree_core_FileType;
var oaktree_core_VOTypes = $hxClasses["oaktree.core.VOTypes"] = { __ename__ : true, __constructs__ : ["VT_Native","VT_Class","VT_Map","VT_Array","VT_Unknown"] };
oaktree_core_VOTypes.VT_Native = function(name) { var $x = ["VT_Native",0,name]; $x.__enum__ = oaktree_core_VOTypes; $x.toString = $estr; return $x; };
oaktree_core_VOTypes.VT_Class = function(name) { var $x = ["VT_Class",1,name]; $x.__enum__ = oaktree_core_VOTypes; $x.toString = $estr; return $x; };
oaktree_core_VOTypes.VT_Map = function(key,value) { var $x = ["VT_Map",2,key,value]; $x.__enum__ = oaktree_core_VOTypes; $x.toString = $estr; return $x; };
oaktree_core_VOTypes.VT_Array = function(value) { var $x = ["VT_Array",3,value]; $x.__enum__ = oaktree_core_VOTypes; $x.toString = $estr; return $x; };
oaktree_core_VOTypes.VT_Unknown = ["VT_Unknown",4];
oaktree_core_VOTypes.VT_Unknown.toString = $estr;
oaktree_core_VOTypes.VT_Unknown.__enum__ = oaktree_core_VOTypes;
var oaktree_core_components_Component = function() {
	this.enabled = true;
	this.priority = 0;
	this.entity = null;
};
$hxClasses["oaktree.core.components.Component"] = oaktree_core_components_Component;
oaktree_core_components_Component.__name__ = ["oaktree","core","components","Component"];
oaktree_core_components_Component.prototype = {
	entity: null
	,priority: null
	,enabled: null
	,dispose: function() {
		this.entity = null;
	}
	,onAddedToEntity: function(pEntity) {
		this.entity = pEntity;
	}
	,onRemovedFromEntity: function() {
		this.entity = null;
	}
	,onEntityAddedToScene: function(pScene) {
	}
	,onEntityRemovedFromScene: function() {
	}
	,update: function(pDT) {
	}
	,__class__: oaktree_core_components_Component
};
var oaktree_core_events_ConnectionEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	oaktree_core_events_GameEvent.call(this,type,data,bubbles,cancelable);
};
$hxClasses["oaktree.core.events.ConnectionEvent"] = oaktree_core_events_ConnectionEvent;
oaktree_core_events_ConnectionEvent.__name__ = ["oaktree","core","events","ConnectionEvent"];
oaktree_core_events_ConnectionEvent.__super__ = oaktree_core_events_GameEvent;
oaktree_core_events_ConnectionEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype,{
	__class__: oaktree_core_events_ConnectionEvent
});
var oaktree_core_events_UserEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	oaktree_core_events_GameEvent.call(this,type,data,bubbles,cancelable);
};
$hxClasses["oaktree.core.events.UserEvent"] = oaktree_core_events_UserEvent;
oaktree_core_events_UserEvent.__name__ = ["oaktree","core","events","UserEvent"];
oaktree_core_events_UserEvent.__super__ = oaktree_core_events_GameEvent;
oaktree_core_events_UserEvent.prototype = $extend(oaktree_core_events_GameEvent.prototype,{
	__class__: oaktree_core_events_UserEvent
});
var oaktree_core_io_IO = function() { };
$hxClasses["oaktree.core.io.IO"] = oaktree_core_io_IO;
oaktree_core_io_IO.__name__ = ["oaktree","core","io","IO"];
oaktree_core_io_IO.addMapping = function(_ext,type) {
	oaktree_core_io_IO._ftypeMapping.set(_ext,type);
};
oaktree_core_io_IO.getFileTypeFromExtension = function(_path) {
	var parts = _path.split("?")[0].split(".");
	var extension = "";
	if(parts.length > 1) extension = parts[parts.length - 1];
	switch(extension) {
	case "png":case "jpg":case "bmp":
		return oaktree_core_FileType.IMAGE;
	case "xml":case "json":case "txt":
		return oaktree_core_FileType.TEXT;
	default:
		if(oaktree_core_io_IO._ftypeMapping.exists(extension)) return oaktree_core_io_IO._ftypeMapping.get(extension);
		return oaktree_core_FileType.BINARY;
	}
	return oaktree_core_FileType.BINARY;
};
oaktree_core_io_IO.data_load = function(_path,options) {
	var defer = new promhx_deferred_DeferredPromise();
	if(options == null) options = { };
	if(options.filetype == null) options.filetype = oaktree_core_FileType.AUTO;
	options.filetype;
	var ftype;
	if(options.filetype == oaktree_core_FileType.AUTO) ftype = oaktree_core_io_IO.getFileTypeFromExtension(_path); else ftype = options.filetype;
	var loader;
	switch(ftype[1]) {
	case 1:
		loader = new assets_manager_loaders_ImageLoader(_path);
		break;
	case 2:
		loader = new assets_manager_loaders_TextLoader(_path);
		break;
	case 4:
		loader = new assets_manager_loaders_SoundLoader(_path);
		break;
	default:
		loader = new assets_manager_loaders_BinaryLoader(_path);
	}
	loader.addEventListener("complete",function(e) {
		if(loader.status == assets_manager_misc_LoaderStatus.LOADED) defer.resolve(loader.data); else defer.handleError("" + Std.string(loader.status) + " - " + _path);
	});
	loader.start();
	return defer.boundPromise;
};
oaktree_core_io_IO.data_flow = function(_info,_processor,_provider) {
	if(_provider == null) _provider = oaktree_core_io_IO.default_provider;
	var flowDefer = new promhx_Deferred();
	_provider(_info).then(function(data) {
		if(_processor != null) _processor(_info,data).then(function(processedData) {
			flowDefer.resolve(processedData);
		}).errorThen(function(e) {
			flowDefer.handleError(e);
		}); else flowDefer.resolve(data);
	}).errorThen(function(e1) {
		flowDefer.handleError(e1);
	});
	return flowDefer.promise();
};
oaktree_core_io_IO.default_provider = function(_id) {
	return oaktree_core_io_IO.data_load(_id);
};
var oaktree_core_scene_SceneManager = function(container) {
	this._container = container;
	this._scenesList = [];
	this._scenesToRemove = [];
};
$hxClasses["oaktree.core.scene.SceneManager"] = oaktree_core_scene_SceneManager;
oaktree_core_scene_SceneManager.__name__ = ["oaktree","core","scene","SceneManager"];
oaktree_core_scene_SceneManager.prototype = {
	_container: null
	,_scenesList: null
	,_scenesToRemove: null
	,add: function(scene,priority) {
		if(priority == null) priority = 0;
		var isScene = js_Boot.__instanceof(scene,oaktree_core_scene_IScene);
		this._scenesList.push({ scene : scene, priority : priority, isIScene : isScene});
		this._scenesList.sort($bind(this,this.sceneSortFunc));
	}
	,remove: function(scene) {
		var _g = 0;
		var _g1 = this._scenesList;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.scene == scene) {
				HxOverrides.remove(this._scenesList,s);
				this._scenesToRemove.push(s);
				return;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._scenesList;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			this._scenesToRemove.push(s);
		}
		this._scenesList = null;
		this._scenesList = [];
	}
	,update: function(delta) {
		var _g = 0;
		var _g1 = this._scenesList;
		while(_g < _g1.length) {
			var scene = _g1[_g];
			++_g;
			if(scene.isIScene) (js_Boot.__cast(scene.scene , oaktree_core_scene_IScene)).update(delta);
		}
	}
	,lateUpdate: function() {
		if(this._scenesToRemove.length > 0) {
			var _g = 0;
			var _g1 = this._scenesToRemove;
			while(_g < _g1.length) {
				var scene = _g1[_g];
				++_g;
				if(this._container.contains(scene.scene)) {
					this._container.removeChild(scene.scene);
					HxOverrides.remove(this._scenesToRemove,scene);
					if(scene.isIScene) (js_Boot.__cast(scene.scene , oaktree_core_scene_IScene)).onRemoved();
				}
			}
		}
		var idx = 0;
		var _g2 = 0;
		var _g11 = this._scenesList;
		while(_g2 < _g11.length) {
			var scene1 = _g11[_g2];
			++_g2;
			if(this._container.contains(scene1.scene)) this._container.setChildIndex(scene1.scene,idx); else {
				this._container.addChild(scene1.scene);
				if(scene1.isIScene) (js_Boot.__cast(scene1.scene , oaktree_core_scene_IScene)).onAdded();
			}
			idx++;
			if(scene1.isIScene) (js_Boot.__cast(scene1.scene , oaktree_core_scene_IScene)).lateUpdate();
		}
	}
	,get_container: function() {
		return this._container;
	}
	,set_container: function(value) {
		this._container = value;
		return value;
	}
	,sceneSortFunc: function(a,b) {
		return a.priority - b.priority;
	}
	,__class__: oaktree_core_scene_SceneManager
	,__properties__: {set_container:"set_container",get_container:"get_container"}
};
var oaktree_debug_DebugLayer = function(id,name,layer,autoClear) {
	this.id = id;
	this.name = name;
	this.layer = layer;
	this.autoClear = autoClear;
};
$hxClasses["oaktree.debug.DebugLayer"] = oaktree_debug_DebugLayer;
oaktree_debug_DebugLayer.__name__ = ["oaktree","debug","DebugLayer"];
oaktree_debug_DebugLayer.prototype = {
	id: null
	,name: null
	,layer: null
	,autoClear: null
	,__class__: oaktree_debug_DebugLayer
};
var oaktree_debug_DebugOption = function(id,name,enabled) {
	if(enabled == null) enabled = true;
	this.id = id;
	this.name = name;
	this.enabled = enabled;
};
$hxClasses["oaktree.debug.DebugOption"] = oaktree_debug_DebugOption;
oaktree_debug_DebugOption.__name__ = ["oaktree","debug","DebugOption"];
oaktree_debug_DebugOption.prototype = {
	id: null
	,name: null
	,enabled: null
	,__class__: oaktree_debug_DebugOption
};
var oaktree_debug_DebugManager = function() { };
$hxClasses["oaktree.debug.DebugManager"] = oaktree_debug_DebugManager;
oaktree_debug_DebugManager.__name__ = ["oaktree","debug","DebugManager"];
oaktree_debug_DebugManager.__properties__ = {get_options:"get_options",get_layers:"get_layers"}
oaktree_debug_DebugManager._debugContainer = null;
oaktree_debug_DebugManager._layers = null;
oaktree_debug_DebugManager._dispatcher = null;
oaktree_debug_DebugManager._options = null;
oaktree_debug_DebugManager._commands = null;
oaktree_debug_DebugManager._hotkeys = null;
oaktree_debug_DebugManager.get_layers = function() {
	return oaktree_debug_DebugManager._layers;
};
oaktree_debug_DebugManager.get_options = function() {
	return oaktree_debug_DebugManager._options;
};
oaktree_debug_DebugManager.initialize = function(container) {
	oaktree_debug_DebugManager._debugContainer = container;
	oaktree_debug_DebugManager._debugContainer.mouseEnabled = oaktree_debug_DebugManager._debugContainer.mouseChildren = false;
	oaktree_debug_DebugManager._debugContainer.addEventListener("enterFrame",oaktree_debug_DebugManager.onEnterFrame,false,1000);
	oaktree_debug_DebugManager._layers = [];
	oaktree_debug_DebugManager._options = [];
	oaktree_debug_DebugManager._dispatcher = new openfl_events_EventDispatcher();
	oaktree_debug_DebugManager._commands = new haxe_ds_StringMap();
	oaktree_debug_DebugManager._hotkeys = [];
};
oaktree_debug_DebugManager.addCommand = function(name,commandFunction) {
	var key = name.toLowerCase();
	oaktree_debug_DebugManager._commands.set(key,commandFunction);
};
oaktree_debug_DebugManager.executeCommand = function(commandStr) {
	if(commandStr == null || commandStr == "" || !new EReg("\\S","").match(commandStr)) throw new js__$Boot_HaxeError("No command");
	var parts = new EReg("\\s+","g").split(commandStr);
	var commandName = parts.shift();
	var lowerCommandName = commandName.toLowerCase();
	if(!oaktree_debug_DebugManager._commands.exists(lowerCommandName)) throw new js__$Boot_HaxeError("Command not found: " + commandName);
	return oaktree_debug_DebugManager._commands.get(lowerCommandName)(commandName,parts);
};
oaktree_debug_DebugManager.addHotKey = function(keys,callBack) {
	oaktree_debug_DebugManager._hotkeys.push({ keys : keys, callBack : callBack});
	if(oaktree_debug_DebugManager._hotkeys.length == 1) oaktree_utils_InputManager.addEventListener("keyUp",oaktree_debug_DebugManager.onKeyUp);
};
oaktree_debug_DebugManager.removeHotKey = function(keys) {
	var _g = 0;
	var _g1 = oaktree_debug_DebugManager._hotkeys;
	while(_g < _g1.length) {
		var keyData = _g1[_g];
		++_g;
		if(oaktree_debug_DebugManager.keysMatch(keyData.keys,keys)) {
			HxOverrides.remove(oaktree_debug_DebugManager._hotkeys,keyData);
			break;
		}
	}
	if(oaktree_debug_DebugManager._hotkeys.length == 0) oaktree_utils_InputManager.removeEventListener("keyUp",oaktree_debug_DebugManager.onKeyUp);
};
oaktree_debug_DebugManager.keysMatch = function(keys1,keys2) {
	if(keys1.length != keys2.length) return false;
	var _g = 0;
	while(_g < keys1.length) {
		var k = keys1[_g];
		++_g;
		if(!Lambda.has(keys2,k)) return false;
	}
	return true;
};
oaktree_debug_DebugManager.onKeyUp = function(e) {
	var keyCode = e.keyCode;
	var _g = 0;
	var _g1 = oaktree_debug_DebugManager._hotkeys;
	while(_g < _g1.length) {
		var keyData = _g1[_g];
		++_g;
		if(keyData.keys[keyData.keys.length - 1] != keyCode) continue;
		var allDown = true;
		var _g3 = 0;
		var _g2 = keyData.keys.length - 1;
		while(_g3 < _g2) {
			var i = _g3++;
			var k = keyData.keys[i];
			if(k != keyCode && !oaktree_utils_InputManager.keyIsDown(k)) {
				allDown = false;
				break;
			}
		}
		if(allDown) keyData.callBack();
	}
};
oaktree_debug_DebugManager.addLayer = function(id,name,autoClear) {
	if(autoClear == null) autoClear = false;
	var layerData = oaktree_debug_DebugManager.getLayerData(id);
	if(layerData == null) {
		var layer = new openfl_display_Sprite();
		oaktree_debug_DebugManager._debugContainer.addChild(layer);
		layer.set_visible(false);
		layerData = new oaktree_debug_DebugLayer(id,name != null?name:id,layer,autoClear);
		oaktree_debug_DebugManager._layers.push(layerData);
		if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugLayerAdded")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugLayerEvent("debugLayerAdded",id));
	} else if(layerData.name != name) {
		if(name != null) layerData.name = name; else layerData.name = id;
		layerData.autoClear = autoClear;
		if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugLayerAdded")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugLayerEvent("debugLayerNameChanged",id));
	}
	return layerData.layer;
};
oaktree_debug_DebugManager.removeLayer = function(id) {
	var layerData = oaktree_debug_DebugManager.getLayerData(id);
	if(layerData != null) {
		HxOverrides.remove(oaktree_debug_DebugManager._layers,layerData);
		if(layerData.layer.parent != null) oaktree_debug_DebugManager._debugContainer.removeChild(layerData.layer);
		if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugLayerRemoved")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugLayerEvent("debugLayerRemoved",id));
		return true;
	}
	return false;
};
oaktree_debug_DebugManager.getLayer = function(id,create) {
	if(create == null) create = true;
	var layerData = oaktree_debug_DebugManager.getLayerData(id);
	if(layerData != null) return layerData.layer; else if(create) return oaktree_debug_DebugManager.addLayer(id); else return null;
};
oaktree_debug_DebugManager.setLayerVisible = function(id,visible) {
	var layerData = oaktree_debug_DebugManager.getLayerData(id);
	if(layerData != null) layerData.layer.set_visible(visible);
};
oaktree_debug_DebugManager.getLayerData = function(id) {
	var _g = 0;
	var _g1 = oaktree_debug_DebugManager._layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		if(layer.id == id) return layer;
	}
	return null;
};
oaktree_debug_DebugManager.addOption = function(id,name,enabled) {
	var option = oaktree_debug_DebugManager.getOption(id);
	if(option != null) {
		option.name = name;
		if(enabled != null) option.enabled = enabled;
	} else {
		option = new oaktree_debug_DebugOption(id,name,enabled != null?enabled:false);
		oaktree_debug_DebugManager._options.push(option);
	}
	if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugOptionAdded")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugOptionEvent("debugOptionAdded",id));
};
oaktree_debug_DebugManager.removeOption = function(id) {
	var option = oaktree_debug_DebugManager.getOption(id);
	if(option != null) {
		HxOverrides.remove(oaktree_debug_DebugManager._options,option);
		if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugOptionRemoved")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugOptionEvent("debugOptionRemoved",id));
	}
};
oaktree_debug_DebugManager.hasOption = function(id) {
	return oaktree_debug_DebugManager.getOption(id) != null;
};
oaktree_debug_DebugManager.setOptionEnabled = function(id,enabled) {
	var option = oaktree_debug_DebugManager.getOption(id);
	if(option != null) {
		option.enabled = enabled;
		if(oaktree_debug_DebugManager._dispatcher.hasEventListener("debugOptionEnabledChanged")) oaktree_debug_DebugManager._dispatcher.dispatchEvent(new oaktree_debug_events_DebugOptionEvent("debugOptionEnabledChanged",id));
	}
};
oaktree_debug_DebugManager.getOptionEnabled = function(id) {
	var option = oaktree_debug_DebugManager.getOption(id);
	if(option != null) return option.enabled; else return false;
};
oaktree_debug_DebugManager.getOption = function(id) {
	var _g = 0;
	var _g1 = oaktree_debug_DebugManager._options;
	while(_g < _g1.length) {
		var option = _g1[_g];
		++_g;
		if(option.id == id) return option;
	}
	return null;
};
oaktree_debug_DebugManager.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	oaktree_debug_DebugManager._dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
oaktree_debug_DebugManager.removeEventListener = function(type,listener,useCapture) {
	if(useCapture == null) useCapture = false;
	oaktree_debug_DebugManager._dispatcher.removeEventListener(type,listener,useCapture);
};
oaktree_debug_DebugManager.onEnterFrame = function(e) {
	var _g = 0;
	var _g1 = oaktree_debug_DebugManager._layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		if(layer.autoClear && layer.layer.get_visible()) layer.layer.get_graphics().clear();
	}
};
var oaktree_debug_Metric = function(id,name,showGraph) {
	if(showGraph == null) showGraph = false;
	this.max = -Infinity;
	this.showGraph = false;
	this.id = id;
	this.name = name;
	this.showGraph = showGraph;
	if(showGraph) {
		this.graph = new oaktree_debug_ProfilerGraph("" + name + "_graph");
		this.graph.create();
	}
};
$hxClasses["oaktree.debug.Metric"] = oaktree_debug_Metric;
oaktree_debug_Metric.__name__ = ["oaktree","debug","Metric"];
oaktree_debug_Metric.prototype = {
	id: null
	,name: null
	,callback: null
	,showGraph: null
	,graph: null
	,max: null
	,_value: null
	,get_value: function() {
		if(this.callback != null) return this.callback(); else return this._value;
	}
	,set_value: function(value) {
		this._value = value;
		this.callback = null;
		this.max = Math.max(this.max,value);
		if(this.graph != null) {
			if(this.graph.max != this.max) this.graph.set_max(this.max);
			this.graph.set_ping(value);
		}
		return value;
	}
	,__class__: oaktree_debug_Metric
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
var oaktree_debug_MetricsManager = function() { };
$hxClasses["oaktree.debug.MetricsManager"] = oaktree_debug_MetricsManager;
oaktree_debug_MetricsManager.__name__ = ["oaktree","debug","MetricsManager"];
oaktree_debug_MetricsManager.__properties__ = {get_metrics:"get_metrics"}
oaktree_debug_MetricsManager._metrics = null;
oaktree_debug_MetricsManager.get_metrics = function() {
	return oaktree_debug_MetricsManager._metrics;
};
oaktree_debug_MetricsManager.initialize = function() {
	oaktree_debug_MetricsManager._metrics = [];
};
oaktree_debug_MetricsManager.addMetric = function(id,name,callback,showGraph) {
	if(showGraph == null) showGraph = false;
	var m = oaktree_debug_MetricsManager.getMetric(id);
	if(m == null) {
		m = new oaktree_debug_Metric(id,name,showGraph);
		oaktree_debug_MetricsManager._metrics.push(m);
	} else m.name = name;
	m.callback = callback;
};
oaktree_debug_MetricsManager.setMetricValue = function(id,value) {
	var m = oaktree_debug_MetricsManager.getMetric(id);
	if(m == null) {
		m = new oaktree_debug_Metric(id,id);
		oaktree_debug_MetricsManager._metrics.push(m);
	}
	m.set_value(value);
};
oaktree_debug_MetricsManager.removeMetric = function(id) {
	var m = oaktree_debug_MetricsManager.getMetric(id);
	if(m != null) HxOverrides.remove(oaktree_debug_MetricsManager._metrics,m);
};
oaktree_debug_MetricsManager.getMetric = function(id) {
	var _g = 0;
	var _g1 = oaktree_debug_MetricsManager._metrics;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		if(m.id == id) return m;
	}
	return null;
};
var oaktree_debug_ProfilerGraph = function(pName) {
	this.color = 16711680;
	this.history = 33;
	this._height = 8;
	this._width = 128;
	this.outerHeight = 8;
	openfl_display_Sprite.call(this);
	this.set_name(pName);
	this.vertices = [];
	this.set_max(oaktree_utils_Maths.fixed(16.6666666666666679,2));
};
$hxClasses["oaktree.debug.ProfilerGraph"] = oaktree_debug_ProfilerGraph;
oaktree_debug_ProfilerGraph.__name__ = ["oaktree","debug","ProfilerGraph"];
oaktree_debug_ProfilerGraph.__super__ = openfl_display_Sprite;
oaktree_debug_ProfilerGraph.prototype = $extend(openfl_display_Sprite.prototype,{
	outerHeight: null
	,_width: null
	,_height: null
	,vertices: null
	,history: null
	,color: null
	,max: null
	,ping: null
	,segment: null
	,bg: null
	,graph: null
	,setSize: function(W,H) {
		this._width = W;
		this._height = H;
	}
	,create: function() {
		this.segment = this._width / this.history;
		this.outerHeight = this._height * 2;
		this.bg = new openfl_display_Sprite();
		this.bg.get_graphics().beginFill(1052688);
		this.bg.get_graphics().drawRect(0,0,this._width - this.segment,this.outerHeight);
		this.bg.get_graphics().endFill();
		this.graph = new openfl_display_Sprite();
		var _g1 = 0;
		var _g = this.history;
		while(_g1 < _g) {
			var i = _g1++;
			this.vertices.push({ x : this.segment * i, y : this.outerHeight, color : this.color});
		}
		this.updateGraph();
		this.addChild(this.bg);
		this.addChild(this.graph);
	}
	,updateGraph: function() {
		if(this.graph == null) return;
		this.graph.get_graphics().clear();
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.graph.get_graphics().lineStyle(1,v.color,1);
			this.graph.get_graphics().lineTo(v.x,v.y);
		}
	}
	,set_max: function(pValue) {
		var oldmax = this.max;
		this.max = pValue;
		if(this.graph != null) {
			var ratio = 1.0;
			if(oldmax != 0) ratio = oldmax / pValue;
			var _g = 0;
			var _g1 = this.vertices;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v != null) {
					var vp = 1.0 - v.y / this.outerHeight;
					var vv = vp * oldmax;
					vp = vv / this.max;
					v.y = this.outerHeight * (1.0 - vp);
				}
			}
		}
		this.updateGraph();
		return this.max;
	}
	,set_ping: function(pValue) {
		var _vv = oaktree_utils_Maths.fixed(pValue,4);
		var norm = _vv / this.max;
		var _g1 = 0;
		var _g = this.history;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this.vertices[i];
			if(i < this.history - 1) {
				var v1 = this.vertices[i + 1];
				if(v1 != null) {
					v.y = Math.floor(v1.y);
					v.color = v1.color;
					this.vertices[i] = v;
				}
			}
		}
		if(norm < 0.001) norm = 0.001; else if(norm > 1) norm = 1; else norm = norm;
		if(norm > 1) this.vertices[this.history - 1].color = 16711680; else if(norm < 0.2) this.vertices[this.history - 1].color = 65280; else this.vertices[this.history - 1].color = this.color;
		this.vertices[this.history - 1].y = Math.floor(this.outerHeight * (1.0 - norm));
		this.updateGraph();
		return this.ping = pValue;
	}
	,__class__: oaktree_debug_ProfilerGraph
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_ping:"set_ping",set_max:"set_max"})
});
var oaktree_debug_events_DebugLayerEvent = function(type,layerID) {
	openfl_events_Event.call(this,type);
	this.layerID = layerID;
};
$hxClasses["oaktree.debug.events.DebugLayerEvent"] = oaktree_debug_events_DebugLayerEvent;
oaktree_debug_events_DebugLayerEvent.__name__ = ["oaktree","debug","events","DebugLayerEvent"];
oaktree_debug_events_DebugLayerEvent.__super__ = openfl_events_Event;
oaktree_debug_events_DebugLayerEvent.prototype = $extend(openfl_events_Event.prototype,{
	layerID: null
	,__class__: oaktree_debug_events_DebugLayerEvent
});
var oaktree_debug_events_DebugOptionEvent = function(type,optionID) {
	openfl_events_Event.call(this,type);
	this.optionID = optionID;
};
$hxClasses["oaktree.debug.events.DebugOptionEvent"] = oaktree_debug_events_DebugOptionEvent;
oaktree_debug_events_DebugOptionEvent.__name__ = ["oaktree","debug","events","DebugOptionEvent"];
oaktree_debug_events_DebugOptionEvent.__super__ = openfl_events_Event;
oaktree_debug_events_DebugOptionEvent.prototype = $extend(openfl_events_Event.prototype,{
	optionID: null
	,__class__: oaktree_debug_events_DebugOptionEvent
});
var oaktree_ext_ui_IResizeable = function() { };
$hxClasses["oaktree.ext.ui.IResizeable"] = oaktree_ext_ui_IResizeable;
oaktree_ext_ui_IResizeable.__name__ = ["oaktree","ext","ui","IResizeable"];
oaktree_ext_ui_IResizeable.prototype = {
	getSize: null
	,setSize: null
	,__class__: oaktree_ext_ui_IResizeable
};
var oaktree_debug_metrics_MetricsPanel = function() {
	openfl_display_Sprite.call(this);
	this._size = new openfl_geom_Point(100,100);
	this.mouseEnabled = false;
	this._metricsGraphs = [];
	this._metricsFields = [this.createTextField()];
	this.addChild(this._metricsFields[0]);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
};
$hxClasses["oaktree.debug.metrics.MetricsPanel"] = oaktree_debug_metrics_MetricsPanel;
oaktree_debug_metrics_MetricsPanel.__name__ = ["oaktree","debug","metrics","MetricsPanel"];
oaktree_debug_metrics_MetricsPanel.__interfaces__ = [oaktree_ext_ui_IResizeable];
oaktree_debug_metrics_MetricsPanel.__super__ = openfl_display_Sprite;
oaktree_debug_metrics_MetricsPanel.prototype = $extend(openfl_display_Sprite.prototype,{
	_size: null
	,_metricsFields: null
	,_metricsGraphs: null
	,_lastFPSSampleTime: null
	,_lastFPSSampleFrames: null
	,_fps: null
	,getSize: function() {
		return this._size;
	}
	,setSize: function(width,height) {
		if(width != null) {
			this._size.x = width;
			this.updateTextFieldLayout();
		}
		if(height != null) {
			this._size.y = height;
			this.updateTextFieldLayout();
		}
	}
	,updateMetrics: function() {
		oaktree_debug_MetricsManager.setMetricValue("fps",this._fps);
		var _g = 0;
		var _g1 = this._metricsFields;
		while(_g < _g1.length) {
			var tf = _g1[_g];
			++_g;
			tf.set_text("");
		}
		var currentField;
		var currentFieldIndex = 0;
		var fieldAdded = false;
		var idx = 0;
		var yy = 0;
		var xx = 5;
		var maxW = 0;
		var $it0 = $iterator(oaktree_debug_MetricsManager.get_metrics())();
		while( $it0.hasNext() ) {
			var m = $it0.next();
			if(this._metricsFields.length <= idx) {
				this._metricsFields.push(this.createTextField());
				this.addChild(this._metricsFields[this._metricsFields.length - 1]);
				fieldAdded = true;
			}
			currentField = this._metricsFields[idx];
			currentField.set_text(m.name + ": " + m.get_value());
			maxW = Math.max(maxW,currentField.get_x() + currentField.get_width());
			if(m.showGraph && m.graph != null) {
				if(!this.contains(m.graph)) {
					this.addChild(m.graph);
					this._metricsGraphs.push(m.graph);
					fieldAdded = true;
				}
			} else this._metricsGraphs.push(null);
			idx++;
		}
		if(fieldAdded) this.updateTextFieldLayout();
	}
	,memoryToKb: function(memory) {
		return Math.ceil(memory / 1024.0);
	}
	,memoryToString: function(memory) {
		return Std.string(Math.ceil(memory / 1024.0)) + "kb";
	}
	,updateFPS: function() {
		var time = new Date().getTime();
		var dt = time - this._lastFPSSampleTime;
		if(dt >= 500) {
			this._fps = Math.round(1000 * this._lastFPSSampleFrames / dt);
			this._lastFPSSampleTime = time;
			this._lastFPSSampleFrames = 1;
		} else this._lastFPSSampleFrames++;
	}
	,onEnterFrame: function(e) {
		this.updateFPS();
		this.updateMetrics();
	}
	,onAddedToStage: function(e) {
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this._lastFPSSampleFrames = 0;
		this._lastFPSSampleTime = new Date().getTime();
		oaktree_debug_MetricsManager.addMetric("fps","FPS",null,true);
	}
	,onRemovedFromStage: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,createTextField: function() {
		var label = new oaktree_ext_ui_Label({ fontSize : 11, color : 16777215, width : 200, wordWrap : true});
		label.set_x(5);
		label.set_y(5);
		label.mouseEnabled = false;
		return label;
	}
	,updateTextFieldLayout: function() {
		var w = (this._size.x - 5) / this._metricsFields.length - 5;
		var h = this._size.y - 10;
		var xx = 5;
		var yy = 5;
		var maxW = 0;
		var _g1 = 0;
		var _g = this._metricsFields.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tf = this._metricsFields[i];
			var graph = this._metricsGraphs[i];
			tf.set_width(200);
			tf.set_x(xx);
			tf.set_y(yy);
			maxW = Math.max(maxW,tf.get_x() + tf.get_width());
			if(graph != null) {
				graph.set_x(tf.get_x() + tf.get_width() + 5);
				graph.set_y(tf.get_y());
				maxW = Math.max(maxW,graph.get_x() + graph.get_width());
			}
			yy += tf.get_textHeight() + 5;
			if(yy > this._size.y) xx = maxW + 5;
		}
	}
	,__class__: oaktree_debug_metrics_MetricsPanel
});
var oaktree_debug_ui_DebugPanel = function(openButtonVisible) {
	if(openButtonVisible == null) openButtonVisible = false;
	openfl_display_Sprite.call(this);
	this._tabButtonContainer = new openfl_display_Sprite();
	this.addChild(this._tabButtonContainer);
	this._tabs = [];
	this._closeButton = new oaktree_debug_ui_DebugPanelTabButton("Close",50,20);
	this.addChild(this._closeButton);
	this._closeButton.addEventListener("click",$bind(this,this.onCloseButtonClick));
	if(openButtonVisible) {
		this._openButton = new oaktree_debug_ui_DebugPanelTabButton("Debug",100,40);
		this._openButton.addEventListener("click",$bind(this,this.onOpenButtonClick));
	}
	this._currentTabIndex = -1;
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	this.addEventListener("mouseDown",$bind(this,this.onMouseEvent));
	this.addEventListener("mouseUp",$bind(this,this.onMouseEvent));
	this.addEventListener("click",$bind(this,this.onMouseEvent));
};
$hxClasses["oaktree.debug.ui.DebugPanel"] = oaktree_debug_ui_DebugPanel;
oaktree_debug_ui_DebugPanel.__name__ = ["oaktree","debug","ui","DebugPanel"];
oaktree_debug_ui_DebugPanel.__super__ = openfl_display_Sprite;
oaktree_debug_ui_DebugPanel.prototype = $extend(openfl_display_Sprite.prototype,{
	_tabButtonContainer: null
	,_tabs: null
	,_currentTabIndex: null
	,_openButton: null
	,_closeButton: null
	,show: function() {
		if(this._currentTabIndex >= 0) {
			var panel = this._tabs[this._currentTabIndex].panel;
			if(panel.parent != this) this.addChild(panel);
		}
		if(this._openButton != null) this._openButton.set_visible(false);
		this.set_visible(true);
		this.resize();
		this.stage.addEventListener("resize",$bind(this,this.onStageResize));
	}
	,hide: function() {
		if(this._currentTabIndex >= 0) {
			var panel = this._tabs[this._currentTabIndex].panel;
			if(panel.parent != null) panel.parent.removeChild(panel);
		}
		if(this._openButton != null) this._openButton.set_visible(true);
		this.set_visible(false);
		if(this.stage != null) this.stage.removeEventListener("resize",$bind(this,this.onStageResize));
	}
	,addTab: function(name,panel) {
		var btn = new oaktree_debug_ui_DebugPanelTabButton(name);
		btn.addEventListener("click",$bind(this,this.onTabButtonClick));
		this._tabButtonContainer.addChild(btn);
		this._tabs.push({ button : btn, panel : panel});
		if(this._currentTabIndex < 0) this.setCurrentTab(0);
	}
	,setCurrentTab: function(index) {
		if(this._currentTabIndex == index) return;
		if(this._currentTabIndex >= 0) {
			var currentPanel = this._tabs[this._currentTabIndex];
			currentPanel.button.set_selected(false);
			this.removeChild(currentPanel.panel);
		}
		this._currentTabIndex = index;
		if(this._currentTabIndex >= 0) {
			var currentPanel1 = this._tabs[this._currentTabIndex];
			currentPanel1.button.set_selected(true);
			this.addChild(currentPanel1.panel);
		}
	}
	,commandClose: function(commandName,args) {
		this.hide();
		return "Debug panel closed";
	}
	,resize: function() {
		var stageWidth = this.stage.stageWidth;
		var stageHeight = this.stage.stageHeight;
		var tabButtonWidth = Math.floor(Math.min(100,stageWidth / this._tabButtonContainer.get_numChildren()));
		var panelHeight = 180;
		var _g1 = 0;
		var _g = this._tabs.length;
		while(_g1 < _g) {
			var k = _g1++;
			var panelData = this._tabs[k];
			var btn = panelData.button;
			btn.setSize(tabButtonWidth,20);
			btn.set_x(k * tabButtonWidth);
			var panel = panelData.panel;
			if(js_Boot.__instanceof(panel,oaktree_ext_ui_IResizeable)) (js_Boot.__cast(panel , oaktree_ext_ui_IResizeable)).setSize(stageWidth,panelHeight);
			panel.set_y(20);
		}
		this.set_y(stageHeight - 200);
		this.get_graphics().clear();
		this.get_graphics().beginFill(3355443,0.6);
		this.get_graphics().drawRect(0,20,this.stage.stageWidth,180);
		this.get_graphics().endFill();
		this._closeButton.set_x(stageWidth - this._closeButton.get_width());
		if(this._openButton != null) {
			var bottomRight = new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight);
			bottomRight = this.parent.globalToLocal(bottomRight);
			this._openButton.set_x(bottomRight.x - this._openButton.get_width());
			this._openButton.set_y(bottomRight.y - this._openButton.get_height());
		}
	}
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.stage.addEventListener("keyUp",$bind(this,this.onKeyUp));
		oaktree_debug_DebugManager.addCommand("close",$bind(this,this.commandClose));
		this.hide();
		if(this._openButton != null) {
			this.parent.addChild(this._openButton);
			var bottomRight = new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight);
			bottomRight = this.parent.globalToLocal(bottomRight);
			this._openButton.set_x(bottomRight.x - this._openButton.get_width());
			this._openButton.set_y(bottomRight.y - this._openButton.get_height());
		}
	}
	,onKeyUp: function(e) {
		if(e.keyCode == 192 || e.keyCode == 220) {
			if(this.get_visible()) this.hide(); else this.show();
		}
	}
	,onStageResize: function(e) {
		this.resize();
	}
	,onMouseEvent: function(e) {
		e.stopPropagation();
	}
	,onOpenButtonClick: function(e) {
		this.show();
	}
	,onCloseButtonClick: function(e) {
		this.hide();
	}
	,onTabButtonClick: function(e) {
		var btn;
		btn = js_Boot.__cast(e.currentTarget , oaktree_debug_ui_DebugPanelTabButton);
		var _g1 = 0;
		var _g = this._tabs.length;
		while(_g1 < _g) {
			var k = _g1++;
			if(this._tabs[k].button == btn) {
				this.setCurrentTab(k);
				break;
			}
		}
	}
	,__class__: oaktree_debug_ui_DebugPanel
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null?upState:new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null?hitTestState:new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.set___currentState(this.upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__soundTransform: null
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			var cacheTransform = this.__updateTransform(this.hitTestState);
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				stack[stack.length - 1] = hitObject;
				hitTest = true;
			}
			this.__resetTransform(this.hitTestState,cacheTransform);
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			var cacheTransform1 = this.__updateTransform(this.__currentState);
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) hitTest = interactiveOnly;
			this.__resetTransform(this.__currentState,cacheTransform1);
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		var cacheTransform = this.__updateTransform(this.__currentState);
		if(this.__currentState.__hitTestMask(x,y)) hitTest = true;
		this.__resetTransform(this.__currentState,cacheTransform);
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		this.__currentState.__renderCairo(renderSession);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		this.__currentState.__renderCanvas(renderSession);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		this.__currentState.__renderDOM(renderSession);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		this.__currentState.__renderGL(renderSession);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__resetTransform: function(state,cacheTransform) {
		state.__updateTransforms(cacheTransform);
		state.__updateChildren(false);
	}
	,__updateTransform: function(state) {
		var cacheTransform = state.__worldTransform;
		var local = state.__transform;
		var parentTransform = this.__worldTransform;
		var overrideTransform = openfl_geom_Matrix.__temp;
		overrideTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
		overrideTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
		overrideTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
		overrideTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
		overrideTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
		overrideTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		state.__updateTransforms(overrideTransform);
		state.__updateChildren(true);
		return cacheTransform;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__updateTransform(this.__currentState);
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(value.parent != null) value.parent.removeChild(value);
		return this.__currentState = value;
	}
	,__this_onMouseDown: function(event) {
		if(this.downState != null) this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) this.__ignoreEvent = true;
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) this.set___currentState(this.overState); else this.set___currentState(this.upState);
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var oaktree_debug_ui_DebugPanelTabButton = function(text,width,height) {
	if(height == null) height = 20.0;
	if(width == null) width = 100.0;
	if(text == null) text = "Button";
	var hitTestState = new openfl_display_Shape();
	hitTestState.get_graphics().beginFill(0);
	hitTestState.get_graphics().drawRect(0,0,width,height);
	hitTestState.get_graphics().endFill();
	openfl_display_SimpleButton.call(this,oaktree_debug_ui_DebugPanelTabButton.createState(text,10066329,width,height),oaktree_debug_ui_DebugPanelTabButton.createState(text,11184810,width,height),oaktree_debug_ui_DebugPanelTabButton.createState(text,13421772,width,height),hitTestState);
};
$hxClasses["oaktree.debug.ui.DebugPanelTabButton"] = oaktree_debug_ui_DebugPanelTabButton;
oaktree_debug_ui_DebugPanelTabButton.__name__ = ["oaktree","debug","ui","DebugPanelTabButton"];
oaktree_debug_ui_DebugPanelTabButton.setStateSize = function(state,width,height,color) {
	if(js_Boot.__instanceof(state,openfl_display_Sprite)) {
		var sprite;
		sprite = js_Boot.__cast(state , openfl_display_Sprite);
		sprite.get_graphics().clear();
		sprite.get_graphics().beginFill(color);
		sprite.get_graphics().drawRect(0,0,width,height);
		sprite.get_graphics().endFill();
	}
	if(js_Boot.__instanceof(state,openfl_display_DisplayObjectContainer)) {
		var tf;
		tf = js_Boot.__cast((js_Boot.__cast(state , openfl_display_DisplayObjectContainer)).getChildAt(0) , openfl_text_TextField);
		tf.set_width(width);
		tf.set_x(0);
		tf.set_y(height * 0.5 - tf.get_height() * 0.5);
	}
};
oaktree_debug_ui_DebugPanelTabButton.createState = function(text,color,width,height) {
	var state = new openfl_display_Sprite();
	state.get_graphics().beginFill(color);
	state.get_graphics().drawRect(0,0,width,height);
	state.get_graphics().endFill();
	var tf = new openfl_text_TextField();
	tf.set_defaultTextFormat(new openfl_text_TextFormat(Core.get_fontName(),12,3355443,true,null,null,null,null,0));
	tf.mouseEnabled = false;
	tf.set_text(text);
	tf.set_x(0);
	tf.set_autoSize(1);
	tf.set_y(height * 0.5 - tf.get_height() * 0.5);
	tf.set_autoSize(2);
	tf.set_width(width);
	state.addChild(tf);
	return state;
};
oaktree_debug_ui_DebugPanelTabButton.__super__ = openfl_display_SimpleButton;
oaktree_debug_ui_DebugPanelTabButton.prototype = $extend(openfl_display_SimpleButton.prototype,{
	_selected: null
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		this._selected = value;
		oaktree_debug_ui_DebugPanelTabButton.setStateSize(this.upState,this.get_width(),this.get_height(),value?13421772:10066329);
		oaktree_debug_ui_DebugPanelTabButton.setStateSize(this.overState,this.get_width(),this.get_height(),value?13421772:11184810);
		return value;
	}
	,setSize: function(width,height) {
		oaktree_debug_ui_DebugPanelTabButton.setStateSize(this.upState,width,height,!this._selected?10066329:13421772);
		oaktree_debug_ui_DebugPanelTabButton.setStateSize(this.overState,width,height,!this._selected?11184810:13421772);
		oaktree_debug_ui_DebugPanelTabButton.setStateSize(this.downState,width,height,13421772);
		this.hitTestState.set_width(width);
		this.hitTestState.set_height(height);
	}
	,__class__: oaktree_debug_ui_DebugPanelTabButton
	,__properties__: $extend(openfl_display_SimpleButton.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
var oaktree_display_CoreAssetType = $hxClasses["oaktree.display.CoreAssetType"] = { __ename__ : true, __constructs__ : ["UNKNOWN","SPRITE","TEXTURE_ATLAS","FRAMED_SPRITE","FONT"] };
oaktree_display_CoreAssetType.UNKNOWN = ["UNKNOWN",0];
oaktree_display_CoreAssetType.UNKNOWN.toString = $estr;
oaktree_display_CoreAssetType.UNKNOWN.__enum__ = oaktree_display_CoreAssetType;
oaktree_display_CoreAssetType.SPRITE = ["SPRITE",1];
oaktree_display_CoreAssetType.SPRITE.toString = $estr;
oaktree_display_CoreAssetType.SPRITE.__enum__ = oaktree_display_CoreAssetType;
oaktree_display_CoreAssetType.TEXTURE_ATLAS = ["TEXTURE_ATLAS",2];
oaktree_display_CoreAssetType.TEXTURE_ATLAS.toString = $estr;
oaktree_display_CoreAssetType.TEXTURE_ATLAS.__enum__ = oaktree_display_CoreAssetType;
oaktree_display_CoreAssetType.FRAMED_SPRITE = ["FRAMED_SPRITE",3];
oaktree_display_CoreAssetType.FRAMED_SPRITE.toString = $estr;
oaktree_display_CoreAssetType.FRAMED_SPRITE.__enum__ = oaktree_display_CoreAssetType;
oaktree_display_CoreAssetType.FONT = ["FONT",4];
oaktree_display_CoreAssetType.FONT.toString = $estr;
oaktree_display_CoreAssetType.FONT.__enum__ = oaktree_display_CoreAssetType;
var oaktree_display_AssetHolder = function(pId,pUrl,pType) {
	this.assetType = oaktree_display_CoreAssetType.UNKNOWN;
	this.loaded = false;
	this.valid = false;
	this.id = pId;
	this.url = pUrl;
	this.loaded = false;
	if(pType == null && pUrl != null) pType = oaktree_core_io_IO.getFileTypeFromExtension(pUrl);
	this.type = pType;
};
$hxClasses["oaktree.display.AssetHolder"] = oaktree_display_AssetHolder;
oaktree_display_AssetHolder.__name__ = ["oaktree","display","AssetHolder"];
oaktree_display_AssetHolder.prototype = {
	valid: null
	,loaded: null
	,id: null
	,url: null
	,type: null
	,assetType: null
	,data: null
	,storeData: function(data) {
		oaktree_utils_Warehouse.store(this.id,data);
	}
	,load: function() {
		var _g1 = this;
		var defer = new promhx_deferred_DeferredPromise();
		if(this.loaded) defer.resolve(this); else {
			var self = this;
			var resolved = false;
			if(!resolved) {
				var _g = this.type;
				switch(_g[1]) {
				case 5:
					oaktree_utils_FontUtils.registerFontOnHTML(this.id,this.url);
					break;
				default:
					var loadAsset = oaktree_core_io_IO.data_load(this.url);
					loadAsset.then(function(data) {
						_g1.storeData(data);
						defer.resolve(self);
						self.loaded = true;
					}).catchError(function(error) {
						haxe_Log.trace(error,{ fileName : "AssetHolder.hx", lineNumber : 254, className : "oaktree.display.AssetHolder", methodName : "load"});
						defer.resolve(self);
					});
				}
			}
		}
		return defer.boundPromise;
	}
	,get_data: function() {
		return this.getData();
	}
	,getData: function() {
		if(!this.loaded) return null;
		return oaktree_utils_Warehouse.fetch(this.id);
	}
	,dispose: function() {
		oaktree_utils_Warehouse["delete"](this.id);
	}
	,__class__: oaktree_display_AssetHolder
	,__properties__: {get_data:"get_data"}
};
var oaktree_display_NullAssetHolder = function(id) {
	oaktree_display_AssetHolder.call(this,id,null);
};
$hxClasses["oaktree.display.NullAssetHolder"] = oaktree_display_NullAssetHolder;
oaktree_display_NullAssetHolder.__name__ = ["oaktree","display","NullAssetHolder"];
oaktree_display_NullAssetHolder.__super__ = oaktree_display_AssetHolder;
oaktree_display_NullAssetHolder.prototype = $extend(oaktree_display_AssetHolder.prototype,{
	load: function() {
		var defer = new promhx_deferred_DeferredPromise();
		this.loaded = false;
		defer.resolve(this);
		return defer.boundPromise;
	}
	,__class__: oaktree_display_NullAssetHolder
});
var oaktree_display_FramedSpriteAssetHolder = function(id,url,frame) {
	if(url == null) url = "";
	oaktree_display_AssetHolder.call(this,id,url);
	this.assetType = oaktree_display_CoreAssetType.FRAMED_SPRITE;
	this.type = oaktree_core_FileType.TEXT;
	this.config = frame;
};
$hxClasses["oaktree.display.FramedSpriteAssetHolder"] = oaktree_display_FramedSpriteAssetHolder;
oaktree_display_FramedSpriteAssetHolder.__name__ = ["oaktree","display","FramedSpriteAssetHolder"];
oaktree_display_FramedSpriteAssetHolder.__super__ = oaktree_display_AssetHolder;
oaktree_display_FramedSpriteAssetHolder.prototype = $extend(oaktree_display_AssetHolder.prototype,{
	config: null
	,storeData: function(data) {
		try {
			this.config = new oaktree_objects_FramedSpriteVO(com_plist_Reader.read(data));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("FramedSpriteAssetHolder:storeData failed - " + this.id + ": " + Std.string(e),{ fileName : "AssetHolder.hx", lineNumber : 58, className : "oaktree.display.FramedSpriteAssetHolder", methodName : "storeData"});
		}
	}
	,setFrame: function(frame) {
		this.loaded = frame != null;
		this.config = frame;
	}
	,getData: function() {
		return this.config;
	}
	,dispose: function() {
		this.config = null;
		oaktree_display_AssetHolder.prototype.dispose.call(this);
	}
	,__class__: oaktree_display_FramedSpriteAssetHolder
});
var oaktree_display_FontAssetHolder = function(id,url) {
	if(url == null) url = "";
	oaktree_display_AssetHolder.call(this,id,url);
	this.assetType = oaktree_display_CoreAssetType.FONT;
	this.type = oaktree_core_FileType.FONT;
};
$hxClasses["oaktree.display.FontAssetHolder"] = oaktree_display_FontAssetHolder;
oaktree_display_FontAssetHolder.__name__ = ["oaktree","display","FontAssetHolder"];
oaktree_display_FontAssetHolder.__super__ = oaktree_display_AssetHolder;
oaktree_display_FontAssetHolder.prototype = $extend(oaktree_display_AssetHolder.prototype,{
	storeData: function(data) {
		try {
			var font;
			font = openfl_text_Font.fromBytes(data);
			font.name = this.id;
			var name = font.name;
			oaktree_utils_Warehouse.store(this.id,font);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace("FontAssetHolder:storeData failed - " + this.id + ": " + Std.string(e),{ fileName : "AssetHolder.hx", lineNumber : 108, className : "oaktree.display.FontAssetHolder", methodName : "storeData"});
		}
	}
	,getData: function() {
		return oaktree_utils_Warehouse.fetch(this.id);
	}
	,__class__: oaktree_display_FontAssetHolder
});
var oaktree_display_TextureAtlasAssetHolder = function(id,pAtlas) {
	oaktree_display_AssetHolder.call(this,id,null);
	this.assetType = oaktree_display_CoreAssetType.TEXTURE_ATLAS;
	this.atlas = pAtlas;
};
$hxClasses["oaktree.display.TextureAtlasAssetHolder"] = oaktree_display_TextureAtlasAssetHolder;
oaktree_display_TextureAtlasAssetHolder.__name__ = ["oaktree","display","TextureAtlasAssetHolder"];
oaktree_display_TextureAtlasAssetHolder.__super__ = oaktree_display_AssetHolder;
oaktree_display_TextureAtlasAssetHolder.prototype = $extend(oaktree_display_AssetHolder.prototype,{
	atlas: null
	,load: function() {
		var _g = this;
		var defer = new promhx_deferred_DeferredPromise();
		this.loaded = false;
		this.atlas.load().then(function(_) {
			_g.loaded = true;
			defer.resolve(_g);
		});
		return defer.boundPromise;
	}
	,getData: function() {
		return this.atlas;
	}
	,dispose: function() {
		this.atlas = null;
		oaktree_display_AssetHolder.prototype.dispose.call(this);
	}
	,__class__: oaktree_display_TextureAtlasAssetHolder
});
var oaktree_display_AssetsManager = function(atlasList) {
	this._initialized = false;
	this.onInit = new msignal_Signal0();
	if(atlasList != null) this.initialize(atlasList);
};
$hxClasses["oaktree.display.AssetsManager"] = oaktree_display_AssetsManager;
oaktree_display_AssetsManager.__name__ = ["oaktree","display","AssetsManager"];
oaktree_display_AssetsManager.prototype = {
	onInit: null
	,initialized: null
	,_initialized: null
	,_textureAtlas: null
	,_assetHolder: null
	,initialize: function(atlasList) {
		var _g = this;
		this._textureAtlas = new haxe_ds_StringMap();
		this._assetHolder = new haxe_ds_StringMap();
		var loadList = [];
		if(atlasList != null) {
			var $it0 = $iterator(atlasList)();
			while( $it0.hasNext() ) {
				var setup = $it0.next();
				loadList.push(oaktree_core_io_IO.data_flow(setup,$bind(this,this.processTextureAtlas),$bind(this,this.loadTextureAtlas)));
			}
		}
		if(loadList.length > 0) {
			var cenas = promhx_Promise.whenAll(loadList).then(function(_) {
				_g.postInit();
			}).catchError(function(e) {
				haxe_Log.trace("failed to load atlas: ",{ fileName : "AssetsManager.hx", lineNumber : 62, className : "oaktree.display.AssetsManager", methodName : "initialize", customParams : [e]});
				_g.postInit();
			});
		} else this.postInit();
	}
	,postInit: function() {
		this._initialized = true;
		this.onInit.dispatch();
	}
	,loadTextureAtlas: function(info) {
		var defer = new promhx_deferred_DeferredPromise();
		var imgName = StringTools.replace(info.src,".json",".png");
		imgName = StringTools.replace(imgName,".xml",".png");
		if(openfl_Assets.exists(info.src) && openfl_Assets.exists(imgName)) {
			var textureBitmap = openfl_Assets.getBitmapData(imgName);
			var textureConfig = openfl_Assets.getText(info.src);
			defer.resolve({ config : textureConfig, image : textureBitmap});
		} else {
			haxe_Log.trace("d / assetsmanager / " + ("Failed to load " + info.src + "/" + imgName + ": assets aren't loaded"),{ fileName : "AssetsManager.hx", lineNumber : 90, className : "oaktree.display.AssetsManager", methodName : "loadTextureAtlas"});
			defer.handleError("Failed to load " + info.src + "/" + imgName + ": assets aren't loaded");
		}
		return defer.boundPromise;
	}
	,processTextureAtlas: function(info,data) {
		var defer = new promhx_deferred_DeferredPromise();
		var atlas = new oaktree_display_TextureAtlas(oaktree_display_Texture.fromBitmapData(data.image));
		if(info.src.indexOf(".json") != -1) atlas.parseAtlasJSON(data.config); else if(info.src.indexOf(".xml") != -1) atlas.parseAtlasXml(Xml.parse(data.config)); else {
			haxe_Log.trace("d / assetsmanager / " + ("Failed to load " + info.src + ": unknown format"),{ fileName : "AssetsManager.hx", lineNumber : 108, className : "oaktree.display.AssetsManager", methodName : "processTextureAtlas"});
			defer.handleError("Failed to load " + info.src + ": unknown format");
			return defer.boundPromise;
		}
		this._textureAtlas.set(info.id,atlas);
		defer.resolve(atlas);
		return defer.boundPromise;
	}
	,getTexture: function(name,pAtlasName) {
		if(pAtlasName == null) pAtlasName = "";
		if(pAtlasName == "") {
			var $it0 = this._textureAtlas.iterator();
			while( $it0.hasNext() ) {
				var atlas = $it0.next();
				var texture = atlas.getTexture(name);
				if(texture != null) return texture;
			}
		} else if(this._textureAtlas.exists(pAtlasName)) return this._textureAtlas.get(pAtlasName).getTexture(name);
		return null;
	}
	,getAtlas: function(name) {
		if(this._textureAtlas.exists(name)) return this._textureAtlas.get(name);
		return null;
	}
	,registerExternalAtlas: function(id,textureUrl,metadataUrl) {
		haxe_Log.trace("d / assetsmanager / " + ("register atlas " + id + " - " + textureUrl),{ fileName : "AssetsManager.hx", lineNumber : 146, className : "oaktree.display.AssetsManager", methodName : "registerExternalAtlas"});
		var value = new oaktree_display_TextureAtlas(null,textureUrl,metadataUrl);
		this._textureAtlas.set(id,value);
		var value1 = new oaktree_display_TextureAtlasAssetHolder(id,this._textureAtlas.get(id));
		this._assetHolder.set(id,value1);
	}
	,registerAsset: function(id,assetUrl,type) {
		id = oaktree_display_AssetsManager.webRegex.replace(id,"");
		haxe_Log.trace("d / assetsmanager / " + ("register asset " + id + " - " + assetUrl),{ fileName : "AssetsManager.hx", lineNumber : 155, className : "oaktree.display.AssetsManager", methodName : "registerAsset"});
		if(type != null) switch(type[1]) {
		case 3:
			var tx = new oaktree_display_FramedSpriteAssetHolder(id,assetUrl);
			this._assetHolder.set(id,tx);
			break;
		case 2:
			var tx1 = new oaktree_display_TextureAtlasAssetHolder(id);
			tx1.atlas = this.getAtlas(id);
			this._assetHolder.set(id,tx1);
			break;
		case 4:
			if(!StringTools.endsWith(assetUrl,".ttf")) return;
			var tx2 = new oaktree_display_FontAssetHolder(id,assetUrl);
			this._assetHolder.set(id,tx2);
			tx2.load();
			break;
		default:
			var value = new oaktree_display_AssetHolder(id,assetUrl);
			this._assetHolder.set(id,value);
		} else {
			var value = new oaktree_display_AssetHolder(id,assetUrl);
			this._assetHolder.set(id,value);
		}
	}
	,unregisterAsset: function(id) {
		if(!this._assetHolder.exists(id)) return false;
		this._assetHolder.get(id).dispose();
		this._assetHolder.remove(id);
		return true;
	}
	,getAsset: function(id) {
		if(this._assetHolder.exists(id)) return this._assetHolder.get(id);
		return new oaktree_display_NullAssetHolder(id);
	}
	,getFramedSprite: function(id) {
		if(this._assetHolder.exists(id) && this._assetHolder.get(id).assetType == oaktree_display_CoreAssetType.FRAMED_SPRITE) return this._assetHolder.get(id);
		return null;
	}
	,getFont: function(id) {
		if(this._assetHolder.exists(id) && this._assetHolder.get(id).assetType == oaktree_display_CoreAssetType.FONT) return this._assetHolder.get(id);
		return null;
	}
	,getFramedSpriteFromAssetName: function(name) {
		var $it0 = this._assetHolder.keys();
		while( $it0.hasNext() ) {
			var assetId = $it0.next();
			var asset = this._assetHolder.get(assetId);
			if(asset.assetType == oaktree_display_CoreAssetType.FRAMED_SPRITE && asset.loaded) {
				var frameName;
				frameName = (js_Boot.__cast(asset.get_data() , oaktree_objects_FramedSpriteVO)).imageFrameName;
				if(frameName == name) return asset;
			}
		}
		return null;
	}
	,get_initialized: function() {
		return this._initialized;
	}
	,__class__: oaktree_display_AssetsManager
	,__properties__: {get_initialized:"get_initialized"}
};
var oaktree_display_Texture = function() {
	this.scale = 1.0;
};
$hxClasses["oaktree.display.Texture"] = oaktree_display_Texture;
oaktree_display_Texture.__name__ = ["oaktree","display","Texture"];
oaktree_display_Texture.fromBitmapData = function(data,scale) {
	if(scale == null) scale = 1;
	var texture = oaktree_display_Texture.empty(Math.floor(data.width / scale),Math.floor(data.height / scale),scale);
	texture.get_base().uploadBitmapData(data);
	return texture;
};
oaktree_display_Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) rotated = false;
	return new oaktree_display_SubTexture(texture,region,frame,rotated,false);
};
oaktree_display_Texture.empty = function(width,height,scale) {
	if(scale == null) scale = 1;
	var nativeTexture;
	var origWidth = Math.floor(width * scale);
	var origHeight = Math.floor(height * scale);
	nativeTexture = new openfl_display_BitmapData(origWidth,origHeight,true,0);
	return new oaktree_display_BaseTexture(nativeTexture,origWidth,origHeight);
};
oaktree_display_Texture.prototype = {
	width: null
	,height: null
	,base: null
	,bitmapData: null
	,frame: null
	,scale: null
	,dispose: function() {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_frame: function() {
		return null;
	}
	,get_base: function() {
		return null;
	}
	,get_bitmapData: function() {
		return this.get_base().get_bitmapData();
	}
	,asBitmap: function() {
		return new openfl_display_Bitmap(this.get_bitmapData());
	}
	,__class__: oaktree_display_Texture
	,__properties__: {get_frame:"get_frame",get_bitmapData:"get_bitmapData",get_base:"get_base",get_height:"get_height",get_width:"get_width"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var oaktree_display_BaseTexture = function(data,width,height) {
	oaktree_display_Texture.call(this);
	this._data = data;
	this._width = width;
	this._height = height;
};
$hxClasses["oaktree.display.BaseTexture"] = oaktree_display_BaseTexture;
oaktree_display_BaseTexture.__name__ = ["oaktree","display","BaseTexture"];
oaktree_display_BaseTexture.__super__ = oaktree_display_Texture;
oaktree_display_BaseTexture.prototype = $extend(oaktree_display_Texture.prototype,{
	_data: null
	,_width: null
	,_height: null
	,uploadBitmapData: function(data) {
		var potData;
		if(data.width != this.get_width() || data.height != this.get_height()) {
			potData = new openfl_display_BitmapData(this.get_width(),this.get_height(),true,0);
			potData.copyPixels(data,data.rect,oaktree_display_BaseTexture.sOrigin);
			data = potData;
		}
		this._data.copyPixels(data,data.rect,oaktree_display_BaseTexture.sOrigin);
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,get_base: function() {
		return this;
	}
	,get_bitmapData: function() {
		return this._data;
	}
	,__class__: oaktree_display_BaseTexture
});
var oaktree_display_RemoteAsset = function() {
};
$hxClasses["oaktree.display.RemoteAsset"] = oaktree_display_RemoteAsset;
oaktree_display_RemoteAsset.__name__ = ["oaktree","display","RemoteAsset"];
oaktree_display_RemoteAsset.prototype = {
	id: null
	,loader: null
	,data: null
	,defer: null
	,__class__: oaktree_display_RemoteAsset
};
var oaktree_display_RemoteAssetLibrary = function() {
	this.bitmapAssets = new haxe_ds_StringMap();
};
$hxClasses["oaktree.display.RemoteAssetLibrary"] = oaktree_display_RemoteAssetLibrary;
oaktree_display_RemoteAssetLibrary.__name__ = ["oaktree","display","RemoteAssetLibrary"];
oaktree_display_RemoteAssetLibrary.prototype = {
	bitmapAssets: null
	,exists: function(id,type) {
		if(type == "IMAGE") return this.bitmapAssets.exists(id);
		return false;
	}
	,loadBitmap: function(id,url) {
		var _g = this;
		var cacheEntry = new oaktree_display_RemoteAsset();
		cacheEntry.id = id;
		var defer = new promhx_deferred_DeferredPromise();
		var loader = new assets_manager_loaders_ImageLoader(url);
		cacheEntry.loader = loader;
		loader.addEventListener("complete",function(e) {
			if(loader.status == assets_manager_misc_LoaderStatus.LOADED) {
				cacheEntry.data = loader.data;
				_g.bitmapAssets.set(id,cacheEntry);
				defer.resolve(loader.data);
			} else defer.boundPromise.reject(loader.status);
		});
		loader.start();
		cacheEntry.defer = defer;
		return defer.boundPromise;
	}
	,getBitmapData: function(id) {
		if(this.exists(id,"IMAGE")) {
			var entry = this.bitmapAssets.get(id);
			return entry.defer.boundPromise;
		}
		return null;
	}
	,__class__: oaktree_display_RemoteAssetLibrary
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else vector3D.setTo(0,0,1);
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var oaktree_display_SubTexture = function(parentTexture,region,frame,rotated,ownsParent) {
	if(ownsParent == null) ownsParent = false;
	if(rotated == null) rotated = false;
	if(region == null) region = new openfl_geom_Rectangle(0,0,parentTexture.get_width(),parentTexture.get_height());
	this._parent = parentTexture;
	this._ownsParent = ownsParent;
	this._rotated = rotated;
	this._width = Math.floor(this._rotated?region.height:region.width);
	this._height = Math.floor(this._rotated?region.width:region.height);
	if(frame != null) this._frame = frame.clone(); else this._frame = new openfl_geom_Rectangle(0,0,this._width,this._height);
	this._transformationMatrix = new openfl_geom_Matrix();
	if(rotated) {
		this._transformationMatrix.translate(0,-1);
		this._transformationMatrix.rotate(Math.PI / 2.0);
	}
	this._transformationMatrix.translate(-this._frame.x,-this._frame.y);
	var tmpData = new openfl_display_BitmapData(this._width,this._height,true,0);
	tmpData.copyPixels(parentTexture.get_base().get_bitmapData(),region,oaktree_display_SubTexture._tTexCoords);
	var tdata = new openfl_display_BitmapData(Math.floor(this._frame.width),Math.floor(this._frame.height),true,0);
	tdata.draw(tmpData,this._transformationMatrix);
	tmpData.dispose();
	oaktree_display_BaseTexture.call(this,tdata,tdata.width,tdata.height);
};
$hxClasses["oaktree.display.SubTexture"] = oaktree_display_SubTexture;
oaktree_display_SubTexture.__name__ = ["oaktree","display","SubTexture"];
oaktree_display_SubTexture.__super__ = oaktree_display_BaseTexture;
oaktree_display_SubTexture.prototype = $extend(oaktree_display_BaseTexture.prototype,{
	_parent: null
	,_ownsParent: null
	,_frame: null
	,_rotated: null
	,_transformationMatrix: null
	,dispose: function() {
		if(this._ownsParent) this._parent.dispose();
		oaktree_display_BaseTexture.prototype.dispose.call(this);
	}
	,get_frame: function() {
		return this._frame;
	}
	,__class__: oaktree_display_SubTexture
});
var oaktree_display_TextureAtlas = function(texture,textureFileUrl,metaFileUrl) {
	if(metaFileUrl == null) metaFileUrl = "";
	if(textureFileUrl == null) textureFileUrl = "";
	this._loaded = false;
	this._textureInfos = new haxe_ds_StringMap();
	this._texture = texture;
	if(textureFileUrl != "" && metaFileUrl != "") {
		this._textureFile = textureFileUrl;
		this._metaFile = metaFileUrl;
	}
};
$hxClasses["oaktree.display.TextureAtlas"] = oaktree_display_TextureAtlas;
oaktree_display_TextureAtlas.__name__ = ["oaktree","display","TextureAtlas"];
oaktree_display_TextureAtlas.parseBool = function(value) {
	if(value == null) return false;
	return value.toLowerCase() == "true";
};
oaktree_display_TextureAtlas.prototype = {
	_loaded: null
	,loaded: null
	,get_loaded: function() {
		return this._loaded;
	}
	,_texture: null
	,_textureInfos: null
	,_textureNames: null
	,_textureFile: null
	,_metaFile: null
	,dispose: function() {
		if(this._texture != null) this._texture.dispose();
	}
	,parseAtlasJSON: function(data) {
		if(this._texture == null) return false;
		var scale = this._texture.scale;
		var structuredJson = new haxe_format_JsonParser(data).parseRec();
		var frames = [];
		var _g = 0;
		var _g1 = structuredJson.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var name = frame.filename;
			var x = frame.frame.x / scale;
			var y = frame.frame.y / scale;
			var width = frame.sourceSize.w / scale;
			var height = frame.sourceSize.h / scale;
			var frameX = frame.frame.x / scale;
			var frameY = frame.frame.y / scale;
			var frameWidth = frame.frame.w / scale;
			var frameHeight = frame.frame.h / scale;
			var rotated = frame.rotated;
			var region = new openfl_geom_Rectangle(x,y,width,height);
			var frame1;
			if(frameWidth > 0 && frameHeight > 0) frame1 = new openfl_geom_Rectangle(frameX,frameY,frameWidth,frameHeight); else frame1 = null;
			this.addRegion(name,region,frame1,rotated);
		}
		this._loaded = true;
		return true;
	}
	,parseAtlasXml: function(data) {
		if(this._texture == null) return false;
		var scale = this._texture.scale;
		var $it0 = data.firstElement().elements();
		while( $it0.hasNext() ) {
			var subTexture = $it0.next();
			var name = subTexture.get("name");
			var x = Std.parseFloat(subTexture.get("x")) / scale;
			var y = Std.parseFloat(subTexture.get("y")) / scale;
			var width = Std.parseFloat(subTexture.get("width")) / scale;
			var height = Std.parseFloat(subTexture.get("height")) / scale;
			var frameX = Std.parseFloat(subTexture.get("frameX")) / scale;
			var frameY = Std.parseFloat(subTexture.get("frameY")) / scale;
			var frameWidth = Std.parseFloat(subTexture.get("frameWidth")) / scale;
			var frameHeight = Std.parseFloat(subTexture.get("frameHeight")) / scale;
			var rotated = oaktree_display_TextureAtlas.parseBool(subTexture.get("rotated"));
			var region = new openfl_geom_Rectangle(x,y,width,height);
			var frame;
			if(frameWidth > 0 && frameHeight > 0) frame = new openfl_geom_Rectangle(frameX,frameY,frameWidth,frameHeight); else frame = null;
			this.addRegion(name,region,frame,rotated);
		}
		this._loaded = true;
		return true;
	}
	,load: function() {
		var _g = this;
		var defer = new promhx_deferred_DeferredPromise();
		if(this._loaded) defer.resolve(this); else {
			var gotMetaFile = oaktree_display_TextureUtils.downloadAtlasDescriptionFile(this._metaFile);
			var gotTextureFile = oaktree_display_TextureUtils.downloadAtlasImageFile(this._textureFile);
			((function($this) {
				var $r;
				var varargf = function(f) {
					var ret = new promhx_Promise();
					var arr = [gotMetaFile,gotTextureFile];
					var p = promhx_Promise.whenAll(arr);
					p._update.push({ async : ret, linkf : function(x) {
						ret.handleResolve(f(arr[0]._val,arr[1]._val));
					}});
					return ret;
				};
				$r = { then : varargf};
				return $r;
			}(this))).then(function(metadata,textureData) {
				if(textureData == null || metadata == null) {
					defer.handleError("TextureAtlas is invalid");
					return;
				}
				_g._texture = oaktree_display_Texture.fromBitmapData(textureData);
				var xmlData = null;
				var jsonData = null;
				try {
					xmlData = Xml.parse(metadata);
				} catch( xmlError ) {
					haxe_CallStack.lastException = xmlError;
					if (xmlError instanceof js__$Boot_HaxeError) xmlError = xmlError.val;
					try {
						jsonData = new haxe_format_JsonParser(metadata).parseRec();
					} catch( jsonError ) {
						haxe_CallStack.lastException = jsonError;
						if (jsonError instanceof js__$Boot_HaxeError) jsonError = jsonError.val;
						haxe_Log.trace("d / textureatlas / " + ("Failed to parse atlas metadata file: " + _g._metaFile),{ fileName : "TextureAtlas.hx", lineNumber : 144, className : "oaktree.display.TextureAtlas", methodName : "load"});
					}
				}
				var success = false;
				if(xmlData != null) success = _g.parseAtlasXml(xmlData); else if(jsonData != null) success = _g.parseAtlasJSON(metadata);
				if(!success) {
					haxe_Log.trace("d / textureatlas / " + ("Bad texture Atlas: " + _g._metaFile),{ fileName : "TextureAtlas.hx", lineNumber : 157, className : "oaktree.display.TextureAtlas", methodName : "load"});
					defer.handleError("Bad texture Atlas: " + _g._metaFile);
					return;
				}
				defer.resolve(_g);
			});
		}
		return defer.boundPromise;
	}
	,get: function(name) {
		return this.getTexture(name);
	}
	,getTexture: function(name) {
		if(this._textureInfos.exists(name)) {
			var info = this._textureInfos.get(name);
			return oaktree_display_Texture.fromTexture(this._texture,info.region,info.frame,info.rotated);
		}
		return null;
	}
	,hasTexture: function(name) {
		return this._textureInfos.exists(name);
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) rotated = false;
		this._textureInfos.set(name,{ region : region, frame : frame, rotated : rotated});
	}
	,remoteRegion: function(name) {
		this._textureInfos.remove(name);
	}
	,__class__: oaktree_display_TextureAtlas
};
var oaktree_display_TextureUtils = function() {
};
$hxClasses["oaktree.display.TextureUtils"] = oaktree_display_TextureUtils;
oaktree_display_TextureUtils.__name__ = ["oaktree","display","TextureUtils"];
oaktree_display_TextureUtils.downloadAtlasDescriptionFile = function(url) {
	var defer = new promhx_deferred_DeferredPromise();
	var textLoader = new assets_manager_loaders_TextLoader(url);
	textLoader.addEventListener("complete",function(data) {
		defer.resolve(textLoader.data);
	});
	textLoader.start();
	return defer.boundPromise;
};
oaktree_display_TextureUtils.downloadAtlasImageFile = function(url) {
	var defer = new promhx_deferred_DeferredPromise();
	var imageLoader = new assets_manager_loaders_ImageLoader(url);
	imageLoader.addEventListener("complete",function(e) {
		defer.resolve(imageLoader.data);
	});
	imageLoader.start();
	return defer.boundPromise;
};
oaktree_display_TextureUtils.prototype = {
	__class__: oaktree_display_TextureUtils
};
var oaktree_ext_localization_I18n = function() {
};
$hxClasses["oaktree.ext.localization.I18n"] = oaktree_ext_localization_I18n;
oaktree_ext_localization_I18n.__name__ = ["oaktree","ext","localization","I18n"];
oaktree_ext_localization_I18n.instance = null;
oaktree_ext_localization_I18n.mapping = null;
oaktree_ext_localization_I18n.init = function(arr) {
	oaktree_ext_localization_I18n.instance = new oaktree_ext_localization_I18n();
	oaktree_ext_localization_I18n.mapping = new haxe_ds_StringMap();
	var keys = Reflect.fields(arr);
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		if(oaktree_ext_localization_I18n.mapping.exists(key)) {
		} else {
			var value = Reflect.field(arr,key);
			oaktree_ext_localization_I18n.mapping.set(key,value);
		}
	}
	oaktree_ext_localization_I18n.initialized = true;
	oaktree_ext_localization_I18n.onInit.dispatch();
};
oaktree_ext_localization_I18n.to_string = function() {
	var result = [];
	var $it0 = oaktree_ext_localization_I18n.mapping.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		result.push(" " + key + ": \"" + oaktree_ext_localization_I18n.mapping.get(key) + "\"");
	}
	return "{ " + result.join(",") + "}";
};
oaktree_ext_localization_I18n.text = function(tag,list) {
	if(oaktree_ext_localization_I18n.mapping == null || !oaktree_ext_localization_I18n.mapping.exists(tag)) return "" + tag;
	var finalText = oaktree_ext_localization_I18n.mapping.get(tag);
	finalText = oaktree_utils_StringUtility.withFormat(finalText,list);
	return finalText;
};
oaktree_ext_localization_I18n.exists = function(tag) {
	return oaktree_ext_localization_I18n.mapping.exists(tag);
};
oaktree_ext_localization_I18n.prototype = {
	__class__: oaktree_ext_localization_I18n
};
var oaktree_ext_networking_ServerConnectionStatus = $hxClasses["oaktree.ext.networking.ServerConnectionStatus"] = { __ename__ : true, __constructs__ : ["DISCONNECTED","CONNECTING","CONNECTED"] };
oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED = ["DISCONNECTED",0];
oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED.toString = $estr;
oaktree_ext_networking_ServerConnectionStatus.DISCONNECTED.__enum__ = oaktree_ext_networking_ServerConnectionStatus;
oaktree_ext_networking_ServerConnectionStatus.CONNECTING = ["CONNECTING",1];
oaktree_ext_networking_ServerConnectionStatus.CONNECTING.toString = $estr;
oaktree_ext_networking_ServerConnectionStatus.CONNECTING.__enum__ = oaktree_ext_networking_ServerConnectionStatus;
oaktree_ext_networking_ServerConnectionStatus.CONNECTED = ["CONNECTED",2];
oaktree_ext_networking_ServerConnectionStatus.CONNECTED.toString = $estr;
oaktree_ext_networking_ServerConnectionStatus.CONNECTED.__enum__ = oaktree_ext_networking_ServerConnectionStatus;
var oaktree_ext_services_ServiceConfig = function(type,properties) {
	this.type = type;
	this.properties = properties;
};
$hxClasses["oaktree.ext.services.ServiceConfig"] = oaktree_ext_services_ServiceConfig;
oaktree_ext_services_ServiceConfig.__name__ = ["oaktree","ext","services","ServiceConfig"];
oaktree_ext_services_ServiceConfig.prototype = {
	type: null
	,properties: null
	,__class__: oaktree_ext_services_ServiceConfig
};
var oaktree_ext_services_ServiceManager = function() { };
$hxClasses["oaktree.ext.services.ServiceManager"] = oaktree_ext_services_ServiceManager;
oaktree_ext_services_ServiceManager.__name__ = ["oaktree","ext","services","ServiceManager"];
oaktree_ext_services_ServiceManager.serviceList = null;
oaktree_ext_services_ServiceManager.getService = function(type) {
	var _g_head = oaktree_ext_services_ServiceManager.serviceList.h;
	var _g_val = null;
	while(_g_head != null) {
		var m;
		m = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		if(js_Boot.__instanceof(m,type)) return m;
	}
	return null;
};
oaktree_ext_services_ServiceManager.initialize = function(models) {
	oaktree_ext_services_ServiceManager.serviceList = new List();
	var $it0 = $iterator(models)();
	while( $it0.hasNext() ) {
		var setup = $it0.next();
		var model = Type.createInstance(setup.type,[]);
		model.create();
		if(setup.properties != null) {
			if(js_Boot.__instanceof(model,oaktree_ext_services_IConfigurable)) (js_Boot.__cast(model , oaktree_ext_services_IConfigurable)).configure(setup.properties); else oaktree_utils_ObjectUtility.copyProperties(setup.properties,model);
		}
		oaktree_ext_services_ServiceManager.serviceList.push(model);
	}
	var _g_head = oaktree_ext_services_ServiceManager.serviceList.h;
	var _g_val = null;
	while(_g_head != null) {
		var m;
		m = (function($this) {
			var $r;
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			$r = _g_val;
			return $r;
		}(this));
		m.initialize();
	}
};
var oaktree_ext_social_fb_FBService = function() {
};
$hxClasses["oaktree.ext.social.fb.FBService"] = oaktree_ext_social_fb_FBService;
oaktree_ext_social_fb_FBService.__name__ = ["oaktree","ext","social","fb","FBService"];
oaktree_ext_social_fb_FBService.prototype = {
	getQueryRequests: function() {
		if(Core.environment.webEnv.getParameter("request_ids") != null) return this.getAppRequests();
		return null;
	}
	,getAppRequests: function() {
		var _g = this;
		var def = new promhx_deferred_DeferredPromise();
		FB.api("/me/apprequests",function(response) {
			_g.onAppRequests(response,def);
		});
		return def.boundPromise;
	}
	,onAppRequests: function(fbResponse,def) {
		var result = this.extractAppRequestsIds(fbResponse);
		def.resolve(result);
	}
	,extractAppRequestsIds: function(fbResponse) {
		var response = { gifts : [], invites : []};
		if(fbResponse && !fbResponse.error) {
			var data = fbResponse.data;
			var _g = 0;
			while(_g < data.length) {
				var val = data[_g];
				++_g;
				if(val.data == "gift") {
					var id = val.id;
					response.gifts.push(id.substr(0,id.indexOf("_")));
				} else if(val.data == "invite") {
					var id1 = val.id;
					response.invites.push(id1.substr(0,id1.indexOf("_")));
				}
			}
		} else haxe_Log.trace("d / fbservice / " + "Error on fbResponse or fbResponse is empty",{ fileName : "FBService.hx", lineNumber : 116, className : "oaktree.ext.social.fb.FBService", methodName : "extractAppRequestsIds"});
		return response;
	}
	,inviteFriends: function(obj,callback) {
		this.doInvite(obj.title,obj.message,obj.users,callback);
	}
	,doInvite: function(title,message,users,callback) {
		FB.ui({ method : "apprequests", title : title, message : message, to : users, data : "invite"},callback);
	}
	,__class__: oaktree_ext_social_fb_FBService
};
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	bottomScrollV: null
	,caretIndex: null
	,length: null
	,maxScrollH: null
	,maxScrollV: null
	,numLines: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,textHeight: null
	,textWidth: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__selectionIndex: null
	,__showCursor: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__textEngine.text += text;
		this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var index = this.__textEngine.text.indexOf("\n");
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.text.indexOf("\n",index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 3:case 2:case 5:
			margin = 2;
			break;
		case 4:case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.text.indexOf("\n",charIndex) + 1;
		if(endIndex == 0) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != 0 || this.__textEngine.gridFitType != 1);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				var cacheWidth = this.__textEngine.width;
				var cacheHeight = this.__textEngine.height;
				var _g = this.__textEngine.autoSize;
				switch(_g) {
				case 1:case 3:case 0:
					if(!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1) {
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) this.__dirty = true;
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) this.__dirty = true;
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__textEngine.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__textEngine.displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.displayAsPassword = value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) return this.__textEngine.text.length;
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) this.__dirty = true;
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) this.__dirty = true;
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) this.__dirty = true;
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var oaktree_ext_ui_Label = function(_options) {
	this._baseFontSize = -1;
	openfl_text_TextField.call(this);
	if(_options != null) this.initialize(_options);
};
$hxClasses["oaktree.ext.ui.Label"] = oaktree_ext_ui_Label;
oaktree_ext_ui_Label.__name__ = ["oaktree","ext","ui","Label"];
oaktree_ext_ui_Label.__super__ = openfl_text_TextField;
oaktree_ext_ui_Label.prototype = $extend(openfl_text_TextField.prototype,{
	_format: null
	,options: null
	,_baseFontSize: null
	,_multiline: null
	,initialize: function(_options) {
		if(_options.font == null) _options.font = oaktree_OakTree.get_fontName();
		_options.font;
		if(_options.text == null) _options.text = "";
		_options.text;
		if(_options.fontSize == null) _options.fontSize = 11;
		_options.fontSize;
		if(_options.color == null) _options.color = 0;
		_options.color;
		if(_options.bold == null) _options.bold = true;
		_options.bold;
		if(_options.align == null) _options.align = 3;
		_options.align;
		if(_options.wordWrap == null) _options.wordWrap = true;
		_options.wordWrap;
		if(_options.autoSize == null) _options.autoSize = 2;
		_options.autoSize;
		if(_options.maxWidth == null) _options.maxWidth = -1;
		_options.maxWidth;
		if(_options.maxHeight == null) _options.maxHeight = -1;
		_options.maxHeight;
		if(_options.leading == null) _options.leading = null;
		_options.leading;
		if(_options.multiline == null) _options.multiline = false;
		_options.multiline;
		this.options = _options;
		this._format = new openfl_text_TextFormat(_options.font,_options.fontSize,_options.color,_options.bold);
		this._format.align = _options.align;
		this._format.leading = _options.leading;
		this.set_defaultTextFormat(this._format);
		this.set_autoSize(_options.autoSize);
		this.set_text(StringTools.replace(_options.text,"\\n","\n"));
		this.set_multiline(_options.multiline);
		if(_options.width != null) {
			this.set_autoSize(2);
			this.set_width(_options.width);
			this.set_multiline(true);
			this.set_wordWrap(this.options.wordWrap);
		} else this.set_width(this.get_textWidth() + 5);
		this.set_height(this.get_textHeight() + 5);
		if(this.options.height != null) this.set_height(this.options.height);
		this._multiline = this.get_multiline();
	}
	,setText: function(value) {
		openfl_text_TextField.prototype.set_text.call(this,StringTools.replace(value,"\\n","\n"));
		this.set_height(this.get_textHeight() + 5);
		if(this.options.height != null) this.set_height(this.options.height);
		var textFormat = this.get_defaultTextFormat();
		if(this.options.maxWidth != -1 || this.options.maxHeight != -1) {
			if(this._baseFontSize < 0) this._baseFontSize = js_Boot.__cast(textFormat.size , Int);
			textFormat.size = this._baseFontSize;
			this.setTextFormat(textFormat);
			if(this.get_textWidth() >= this.options.maxWidth - 10 && this.options.maxWidth > 0) {
				var textHasSpaceChars = value.indexOf(" ") > 0;
				if(this._multiline && textHasSpaceChars) {
					var textWithFittingLines = "";
					var textWithLastWordsRemoved = new openfl_text_TextField();
					textWithLastWordsRemoved.set_autoSize(1);
					textWithLastWordsRemoved.set_text(value);
					textWithLastWordsRemoved.setTextFormat(textFormat);
					var splitWords = "";
					var numberOfLines = 1;
					while(true) if(textWithLastWordsRemoved.get_textWidth() >= this.options.maxWidth) {
						var indexOfLastSpaceChar = textWithLastWordsRemoved.get_text().lastIndexOf(" ");
						if(indexOfLastSpaceChar > 0) {
							if(splitWords == "") {
								splitWords = textWithLastWordsRemoved.get_text().substring(indexOfLastSpaceChar + 1);
								numberOfLines++;
							} else splitWords = textWithLastWordsRemoved.get_text().substring(indexOfLastSpaceChar + 1) + " " + splitWords;
							textWithLastWordsRemoved.set_text(textWithLastWordsRemoved.get_text().substring(0,indexOfLastSpaceChar));
							textWithLastWordsRemoved.setTextFormat(textFormat);
						} else {
							textFormat.size = js_Boot.__cast(textFormat.size - 1 , Int);
							textWithLastWordsRemoved.set_text(value);
							textWithLastWordsRemoved.setTextFormat(textFormat);
							splitWords = "";
							textWithFittingLines = "";
							numberOfLines = 1;
						}
					} else {
						if(this.options.maxHeight > 0 && textWithLastWordsRemoved.get_textHeight() * numberOfLines > this.options.maxHeight) {
							textFormat.size = js_Boot.__cast(textFormat.size - 1 , Int);
							textWithLastWordsRemoved.set_text(value);
							textWithLastWordsRemoved.setTextFormat(textFormat);
							splitWords = "";
							textWithFittingLines = "";
							numberOfLines = textWithFittingLines.split("\n").length + 1;
							continue;
						}
						if(textWithFittingLines == "") textWithFittingLines = textWithLastWordsRemoved.get_text(); else textWithFittingLines = textWithFittingLines + "\n" + textWithLastWordsRemoved.get_text();
						if(splitWords == "") break;
						textWithLastWordsRemoved.set_text(splitWords);
						textWithLastWordsRemoved.setTextFormat(textFormat);
						splitWords = "";
					}
					openfl_text_TextField.prototype.set_text.call(this,textWithFittingLines);
					this.setTextFormat(textFormat);
				} else {
					while(this.get_textWidth() > 0 && this.get_textWidth() >= this.options.maxWidth - 10 && this.options.maxWidth - 10 > 0) {
						openfl_text_TextField.prototype.set_text.call(this,value);
						textFormat.size = js_Boot.__cast(textFormat.size - 1 , Int);
						this.setTextFormat(textFormat);
					}
					if(this.options.maxHeight != -1) {
						while(this.get_textHeight() > this.options.maxHeight) {
							openfl_text_TextField.prototype.set_text.call(this,value);
							textFormat.size = js_Boot.__cast(textFormat.size - 1 , Int);
							this.setTextFormat(textFormat);
						}
						this.set_height(this.options.maxHeight);
					}
				}
			} else if(this.options.maxHeight != -1) while(this.get_textHeight() > this.options.maxHeight) {
				openfl_text_TextField.prototype.set_text.call(this,value);
				textFormat.size = js_Boot.__cast(textFormat.size - 1 , Int);
				this.setTextFormat(textFormat);
			}
			if(this.options.maxHeight != -1) this.set_height(this.options.maxHeight); else this.set_height(this.get_textHeight() + 5);
			this.set_width(this.options.maxWidth);
		} else this.set_height(this.get_textHeight() + 5);
		if(this.options.width == null) this.set_width(this.get_textWidth() + 5);
		if(this.options.height == null) this.set_height(this.get_textHeight() + 5);
		return value;
	}
	,set_text: function(value) {
		return this.setText(value);
	}
	,__class__: oaktree_ext_ui_Label
});
var oaktree_ext_ui_controls_CloseButton = function() {
	var closeBitmapData = oaktree_utils_Warehouse.fetch("dialog-closebutton");
	var closeDisabledBitmapData = oaktree_utils_Warehouse.fetch("dialog-closebutton-disabled");
	this.upState = new openfl_display_Bitmap(closeBitmapData);
	this.overState = new openfl_display_Bitmap(closeDisabledBitmapData);
	this.downState = new openfl_display_Bitmap(closeBitmapData);
	this.disabledState = new openfl_display_Bitmap(closeDisabledBitmapData);
	oaktree_ext_ui_controls_Button.call(this);
};
$hxClasses["oaktree.ext.ui.controls.CloseButton"] = oaktree_ext_ui_controls_CloseButton;
oaktree_ext_ui_controls_CloseButton.__name__ = ["oaktree","ext","ui","controls","CloseButton"];
oaktree_ext_ui_controls_CloseButton.__super__ = oaktree_ext_ui_controls_Button;
oaktree_ext_ui_controls_CloseButton.prototype = $extend(oaktree_ext_ui_controls_Button.prototype,{
	__class__: oaktree_ext_ui_controls_CloseButton
});
var oaktree_ext_ui_controls_IconLabel = function(lblOptions,icon,iconPosition,padding,paddingTop) {
	if(paddingTop == null) paddingTop = 0;
	if(padding == null) padding = 0;
	if(iconPosition == null) iconPosition = "left";
	openfl_display_Sprite.call(this);
	this.padding = padding;
	this.paddingTop = paddingTop;
	this.iconPosition = iconPosition;
	this.set_icon(icon);
	this.label = new oaktree_ext_ui_Label(lblOptions);
	if(icon != null) {
		this.addChild(icon);
		icon.set_y(0);
	}
	this.set_text(lblOptions.text);
	this.set_textAlign(lblOptions.align);
	this.addChild(this.label);
	this.label.addEventListener("addedToStage",$bind(this,this.onAdded));
	this.addEventListener("addedToStage",$bind(this,this.onAdded));
};
$hxClasses["oaktree.ext.ui.controls.IconLabel"] = oaktree_ext_ui_controls_IconLabel;
oaktree_ext_ui_controls_IconLabel.__name__ = ["oaktree","ext","ui","controls","IconLabel"];
oaktree_ext_ui_controls_IconLabel.__super__ = openfl_display_Sprite;
oaktree_ext_ui_controls_IconLabel.prototype = $extend(openfl_display_Sprite.prototype,{
	label: null
	,icon: null
	,get_icon: function() {
		return this.icon;
	}
	,set_icon: function(value) {
		if(value == null && this.get_icon() != null) this.removeChild(this.get_icon());
		return this.icon = value;
	}
	,iconPosition: null
	,padding: null
	,paddingTop: null
	,text: null
	,get_text: function() {
		return this.text;
	}
	,set_text: function(value) {
		this.updateLabelText(value);
		return this.text = value;
	}
	,textAlign: null
	,get_textAlign: function() {
		return this.textAlign;
	}
	,set_textAlign: function(value) {
		this.label.get_defaultTextFormat().align = value;
		this.updateLabelText(this.get_text());
		return this.textAlign = value;
	}
	,onAdded: function(e) {
		this.updateLabelText(this.get_text());
	}
	,updateLabelText: function(value) {
		this.label.set_text(value);
		this.updatePosition();
	}
	,updatePosition: function() {
		if(this.parent != null) {
			this.label.set_y(0);
			var _g = this.get_textAlign();
			switch(_g) {
			case 0:
				this.label.set_x((this.parent.get_width() - this.label.get_width()) / 2);
				break;
			case 4:
				this.label.set_x(this.parent.get_width() - this.label.get_width() - 5);
				break;
			default:
				this.label.set_x(5);
			}
			this.positionIcon();
		}
	}
	,positionIcon: function() {
		if(this.get_icon() != null) {
			if(this.iconPosition.toLowerCase() == "right") {
				var _g = this.label;
				_g.set_x(_g.get_x() - this.get_icon().get_width() / 2);
				this.get_icon().set_x(this.label.get_x() + this.label.get_width() + this.padding);
			} else {
				var _g1 = this.label;
				_g1.set_x(_g1.get_x() + this.get_icon().get_width() / 2);
				this.get_icon().set_x(this.label.get_x() - this.get_icon().get_width() - this.padding);
			}
			this.get_icon().set_y(this.label.get_y() + (this.label.get_height() - this.get_icon().get_height()) / 2 + this.paddingTop);
		}
	}
	,__class__: oaktree_ext_ui_controls_IconLabel
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_text:"set_text",get_text:"get_text",set_icon:"set_icon",get_icon:"get_icon"})
});
var oaktree_ext_ui_controls_LabelRectangle = function(options) {
	openfl_display_Sprite.call(this);
	if(options.labelOptions.autoSize == null) options.labelOptions.autoSize = 1;
	options.labelOptions.autoSize;
	this.label = new oaktree_ext_ui_Label(options.labelOptions);
	this.label.set_selectable(false);
	this.label.mouseEnabled = false;
	this.shape = new openfl_display_Shape();
	this.shape.get_graphics().beginFill(options.backgroundColor,1);
	this.shape.get_graphics().drawRoundRect(0,0,options.labelWidth,options.labelHeight,options.radius,options.radius);
	this.shape.get_graphics().endFill();
	this.addChild(this.shape);
	this.addChild(this.label);
	this.label.addEventListener("addedToStage",$bind(this,this.onAdded));
};
$hxClasses["oaktree.ext.ui.controls.LabelRectangle"] = oaktree_ext_ui_controls_LabelRectangle;
oaktree_ext_ui_controls_LabelRectangle.__name__ = ["oaktree","ext","ui","controls","LabelRectangle"];
oaktree_ext_ui_controls_LabelRectangle.__super__ = openfl_display_Sprite;
oaktree_ext_ui_controls_LabelRectangle.prototype = $extend(openfl_display_Sprite.prototype,{
	shape: null
	,label: null
	,onAdded: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAdded));
		this.doLayout();
	}
	,doLayout: function() {
		this.label.set_x((this.shape.get_width() - this.label.get_width()) / 2);
		this.label.set_y((this.shape.get_height() - this.label.get_height()) / 2);
	}
	,__class__: oaktree_ext_ui_controls_LabelRectangle
});
var oaktree_ext_ui_controls_PaginatedContainer = function(_opts) {
	this.totalPages = 0;
	this.itemsPerPage = 0;
	this.itemWidth = 0;
	this.currentPage = 0;
	this.spacing = 4;
	if(_opts.name == null) _opts.name = "paginated_control";
	_opts.name;
	if(_opts.w == null) _opts.w = 100;
	_opts.w;
	if(_opts.h == null) _opts.h = 100;
	_opts.h;
	this.options = _opts;
	this.S_onChange = new msignal_Signal0();
	oaktree_ext_ui_Control.call(this,this.options);
	this.items = [];
	this.container = new oaktree_ext_ui_Control({ name : "" + this.get_name() + ".container"});
	this.addChild(this.container);
	this.set_size(this.w,this.h);
};
$hxClasses["oaktree.ext.ui.controls.PaginatedContainer"] = oaktree_ext_ui_controls_PaginatedContainer;
oaktree_ext_ui_controls_PaginatedContainer.__name__ = ["oaktree","ext","ui","controls","PaginatedContainer"];
oaktree_ext_ui_controls_PaginatedContainer.__super__ = oaktree_ext_ui_Control;
oaktree_ext_ui_controls_PaginatedContainer.prototype = $extend(oaktree_ext_ui_Control.prototype,{
	container: null
	,items: null
	,options: null
	,clipMask: null
	,spacing: null
	,currentPage: null
	,typicalItem: null
	,itemWidth: null
	,itemsPerPage: null
	,totalPages: null
	,S_onChange: null
	,addItem: function(_item) {
		if(this.items.length == 0 && this.typicalItem == null) this.typicalItem = _item;
		this.items.push(_item);
		this.update_layout();
		return _item;
	}
	,empty: function() {
		while(this.container.get_numChildren() > 0) this.container.removeChildAt(0);
		this.items = [];
	}
	,update_layout: function() {
		this.itemWidth = this.typicalItem.w + this.spacing;
		this.itemsPerPage = Math.floor(this.w / this.itemWidth);
		this.totalPages = Math.ceil(this.items.length / this.itemsPerPage);
		var startIdx = this.currentPage * this.itemsPerPage;
		var _g1 = 0;
		var _g = this.itemsPerPage;
		while(_g1 < _g) {
			var i = _g1++;
			var idx = startIdx + i;
			if(idx >= this.items.length) break;
			var item = this.items[idx];
			if(!this.container.contains(item)) this.container.addChild(item);
			item.set_x(1 + idx * this.itemWidth);
			item.set_y(0);
		}
		var targetX = Math.round(-startIdx * this.itemWidth);
		motion_Actuate.tween(this.container,0.5,{ x : targetX});
	}
	,next_page: function() {
		this.set_page(this.currentPage + 1);
		this.S_onChange.dispatch();
	}
	,previous_page: function() {
		this.set_page(this.currentPage - 1);
		this.S_onChange.dispatch();
	}
	,set_page: function(toPage) {
		if(toPage < 0 || toPage >= this.totalPages) return;
		this.currentPage = toPage;
		this.update_layout();
	}
	,update_clip_mask: function() {
		if(this.clipMask != null && this.clipMask.get_width() == this.w && this.clipMask.get_height() == this.h) return;
		if(this.clipMask != null) {
			if(this.contains(this.clipMask)) this.removeChild(this.clipMask);
			this.clipMask.get_graphics().clear();
		} else this.clipMask = new openfl_display_Shape();
		this.clipMask.get_graphics().beginFill(16711935,0.3);
		this.clipMask.get_graphics().drawRect(0,0,this.w,this.h + 1);
		this.clipMask.get_graphics().endFill();
		this.clipMask.set_y(-1);
		this.addChild(this.clipMask);
		this.set_mask(this.clipMask);
	}
	,set_size: function(_w,_h) {
		oaktree_ext_ui_Control.prototype.set_size.call(this,_w,_h);
		this.update_clip_mask();
	}
	,__class__: oaktree_ext_ui_controls_PaginatedContainer
});
var oaktree_ext_ui_controls_PaginationControl = function() {
	this.totalPages = 1;
	this.visiblePages = 5;
	this.currentPage = 0;
	this.spacing = 10;
	this.firstPage = 0;
	oaktree_ext_ui_Control.call(this,{ name : "pagination_control"});
	this.itemPool = [];
	this.S_onChange = new msignal_Signal0();
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["oaktree.ext.ui.controls.PaginationControl"] = oaktree_ext_ui_controls_PaginationControl;
oaktree_ext_ui_controls_PaginationControl.__name__ = ["oaktree","ext","ui","controls","PaginationControl"];
oaktree_ext_ui_controls_PaginationControl.__super__ = oaktree_ext_ui_Control;
oaktree_ext_ui_controls_PaginationControl.prototype = $extend(oaktree_ext_ui_Control.prototype,{
	firstPage: null
	,spacing: null
	,currentPage: null
	,visiblePages: null
	,totalPages: null
	,paginationItemClass: null
	,itemPool: null
	,gotoFirstButton: null
	,gotoLastButton: null
	,gotoNextButton: null
	,gotoPreviousButton: null
	,S_onChange: null
	,hideArrows: function() {
		this.hideLeft();
		this.hideRight();
	}
	,hideRight: function() {
		this.gotoLastButton.set_enabled(false);
		this.gotoLastButton.set_alpha(0.6);
		this.gotoNextButton.set_enabled(false);
		this.gotoNextButton.set_alpha(0.6);
	}
	,hideLeft: function() {
		this.gotoFirstButton.set_enabled(false);
		this.gotoFirstButton.set_alpha(0.6);
		this.gotoPreviousButton.set_enabled(false);
		this.gotoPreviousButton.set_alpha(0.6);
	}
	,showArrows: function() {
		this.showLeft();
		this.showRight();
	}
	,showRight: function() {
		this.gotoLastButton.set_enabled(true);
		this.gotoLastButton.set_alpha(1);
		this.gotoNextButton.set_enabled(true);
		this.gotoNextButton.set_alpha(1);
	}
	,showLeft: function() {
		this.gotoFirstButton.set_enabled(true);
		this.gotoFirstButton.set_alpha(1);
		this.gotoPreviousButton.set_enabled(true);
		this.gotoPreviousButton.set_alpha(1);
	}
	,onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
		this.update();
	}
	,onRemovedFromStage: function(e) {
		this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	}
	,update: function() {
		if(this.stage == null) return;
		var minPage = Math.round(Math.max(this.firstPage,Math.ceil(this.currentPage - this.visiblePages / 2)));
		var maxPage = Math.round(Math.min(this.totalPages,minPage + this.visiblePages - 1));
		minPage = Math.round(Math.max(this.firstPage,Math.min(minPage,maxPage - this.visiblePages + 1)));
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		if(this.gotoFirstButton != null) {
			this.addChild(this.gotoFirstButton);
			this.gotoFirstButton.set_selected(false);
			this.gotoFirstButton.addEventListener("click",$bind(this,this.onFirstButtonClick));
		}
		if(this.gotoPreviousButton != null) {
			this.addChild(this.gotoPreviousButton);
			this.gotoPreviousButton.set_selected(false);
			this.gotoPreviousButton.addEventListener("click",$bind(this,this.onPreviousButtonClick));
		}
		var _g = minPage;
		while(_g < maxPage) {
			var i = _g++;
			var child;
			if(i >= this.itemPool.length) {
				child = Type.createInstance(this.paginationItemClass,[]);
				this.itemPool.push(child);
			} else child = this.itemPool[i];
			child.set_name("" + i);
			if(i == maxPage - 1) child.set_name("" + (this.totalPages - 1));
			var btn = this.addChild(child);
			btn.set_selected(i == this.currentPage);
			btn.setText("" + (Std.parseInt(child.get_name()) + 1));
			child.addEventListener("click",$bind(this,this.handlePageClick));
		}
		if(this.gotoNextButton != null) {
			this.addChild(this.gotoNextButton);
			this.gotoNextButton.set_selected(false);
			this.gotoNextButton.addEventListener("click",$bind(this,this.onNextButtonClick));
		}
		if(this.gotoLastButton != null) {
			this.addChild(this.gotoLastButton);
			this.gotoLastButton.set_selected(false);
			this.gotoLastButton.addEventListener("click",$bind(this,this.onLastButtonClick));
		}
		this.showArrows();
		if(this.totalPages == 1) {
			this.hideLeft();
			this.hideRight();
		} else if(this.currentPage == minPage) this.hideLeft(); else if(this.currentPage == maxPage - 1) this.hideRight();
		this.update_layout();
	}
	,onFirstButtonClick: function(e) {
		this.set_currentPage(0);
		this.S_onChange.dispatch();
	}
	,onLastButtonClick: function(e) {
		this.set_currentPage(this.totalPages - 1);
		this.S_onChange.dispatch();
	}
	,onPreviousButtonClick: function(e) {
		var _g = this;
		var _g1 = _g.currentPage;
		_g.set_currentPage(_g1 - 1);
		_g1;
		this.S_onChange.dispatch();
	}
	,onNextButtonClick: function(e) {
		var _g = this;
		var _g1 = _g.currentPage;
		_g.set_currentPage(_g1 + 1);
		_g1;
		this.S_onChange.dispatch();
	}
	,handlePageClick: function(e) {
		var child = e.currentTarget;
		var childIdx = Std.parseInt(child.get_name());
		this.set_currentPage(childIdx);
		this.S_onChange.dispatch();
	}
	,update_layout: function() {
		var maxH = 0.0;
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			maxH = Math.max(maxH,this.getChildAt(0).get_height());
		}
		var xx = 0.0;
		var child;
		var _g11 = 0;
		var _g2 = this.get_numChildren();
		while(_g11 < _g2) {
			var i1 = _g11++;
			child = this.getChildAt(i1);
			child.set_x(xx);
			child.set_y((maxH - child.get_height()) * 0.5);
			xx += child.get_width() + this.spacing;
		}
	}
	,set_totalPages: function(value) {
		this.totalPages = value;
		this.update();
		return this.totalPages;
	}
	,set_visiblePages: function(value) {
		this.visiblePages = value;
		this.update();
		return value;
	}
	,set_currentPage: function(value) {
		if(value < 0 || value >= this.totalPages) return this.currentPage;
		this.currentPage = value;
		this.update();
		return value;
	}
	,set_spacing: function(value) {
		this.spacing = value;
		this.update();
		return value;
	}
	,__class__: oaktree_ext_ui_controls_PaginationControl
	,__properties__: $extend(oaktree_ext_ui_Control.prototype.__properties__,{set_totalPages:"set_totalPages",set_visiblePages:"set_visiblePages",set_currentPage:"set_currentPage",set_spacing:"set_spacing"})
});
var oaktree_objects_FramedSpriteVO = function(obj) {
	this.topY = 0;
	this.bottomY = 0;
	this.rightX = 0;
	this.leftX = 0;
	oaktree_core_VO.call(this,obj);
	if(this.imageFrameName != null) this.imageFrameName = this.removeExtension(this.imageFrameName);
};
$hxClasses["oaktree.objects.FramedSpriteVO"] = oaktree_objects_FramedSpriteVO;
oaktree_objects_FramedSpriteVO.__name__ = ["oaktree","objects","FramedSpriteVO"];
oaktree_objects_FramedSpriteVO.__super__ = oaktree_core_VO;
oaktree_objects_FramedSpriteVO.prototype = $extend(oaktree_core_VO.prototype,{
	scaleHorizontal: null
	,scaleVertical: null
	,texture: null
	,imageFrameName: null
	,leftX: null
	,rightX: null
	,bottomY: null
	,topY: null
	,handleSpecialTypes: function(key,obj) {
		if(key == "UniqueImage") {
			if(Object.prototype.hasOwnProperty.call(obj.UniqueImage,"Source_Frame")) this.imageFrameName = obj.UniqueImage.Source_Frame;
			if(Object.prototype.hasOwnProperty.call(obj.UniqueImage,"X_Left")) this.leftX = obj.UniqueImage.X_Left;
			if(Object.prototype.hasOwnProperty.call(obj.UniqueImage,"X_Right")) this.rightX = obj.UniqueImage.X_Right;
			if(Object.prototype.hasOwnProperty.call(obj.UniqueImage,"Y_Bottom")) this.bottomY = obj.UniqueImage.Y_Bottom;
			if(Object.prototype.hasOwnProperty.call(obj.UniqueImage,"Y_Top")) this.topY = obj.UniqueImage.Y_Top;
			return true;
		}
		return false;
	}
	,removeExtension: function(frameName) {
		var regex = new EReg("\\.(png|jpg|gif)$","g");
		return regex.replace(frameName,"");
	}
	,asRectangle: function() {
		return new openfl_geom_Rectangle(this.leftX,this.topY,this.rightX,this.bottomY);
	}
	,clone: function() {
		var frame = new oaktree_objects_FramedSpriteVO();
		frame.leftX = this.leftX;
		frame.rightX = this.rightX;
		frame.topY = this.topY;
		frame.bottomY = this.bottomY;
		frame.scaleHorizontal = this.scaleHorizontal;
		frame.scaleVertical = this.scaleVertical;
		frame.texture = this.texture;
		frame.imageFrameName = this.imageFrameName;
		return frame;
	}
	,__class__: oaktree_objects_FramedSpriteVO
});
var oaktree_objects_ManifestVO = function(obj) {
	this.assets = [];
	oaktree_core_VO.call(this,obj);
};
$hxClasses["oaktree.objects.ManifestVO"] = oaktree_objects_ManifestVO;
oaktree_objects_ManifestVO.__name__ = ["oaktree","objects","ManifestVO"];
oaktree_objects_ManifestVO.__super__ = oaktree_core_VO;
oaktree_objects_ManifestVO.prototype = $extend(oaktree_core_VO.prototype,{
	build: null
	,assets: null
	,__class__: oaktree_objects_ManifestVO
});
var oaktree_objects_AssetVO = function(obj) {
	oaktree_core_VO.call(this,obj);
};
$hxClasses["oaktree.objects.AssetVO"] = oaktree_objects_AssetVO;
oaktree_objects_AssetVO.__name__ = ["oaktree","objects","AssetVO"];
oaktree_objects_AssetVO.__super__ = oaktree_core_VO;
oaktree_objects_AssetVO.prototype = $extend(oaktree_core_VO.prototype,{
	id: null
	,src: null
	,type: null
	,base: null
	,texture: null
	,metafile: null
	,__class__: oaktree_objects_AssetVO
});
var oaktree_utils_ArrayUtil = function() { };
$hxClasses["oaktree.utils.ArrayUtil"] = oaktree_utils_ArrayUtil;
oaktree_utils_ArrayUtil.__name__ = ["oaktree","utils","ArrayUtil"];
oaktree_utils_ArrayUtil.indexOf = function(arrayToCheck,objectToSearch) {
	var _g1 = 0;
	var _g = arrayToCheck.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(arrayToCheck[i] == objectToSearch) return i;
	}
	return -1;
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(isNaN(delay) || delay < 0) throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,repeatCount: null
	,running: null
	,__delay: null
	,__timer: null
	,__timerID: null
	,reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) this.stop();
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else this.dispatchEvent(new openfl_events_TimerEvent("timer"));
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var oaktree_utils_DataTimer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	this.data = { };
	openfl_utils_Timer.call(this,delay,repeatCount);
};
$hxClasses["oaktree.utils.DataTimer"] = oaktree_utils_DataTimer;
oaktree_utils_DataTimer.__name__ = ["oaktree","utils","DataTimer"];
oaktree_utils_DataTimer.__super__ = openfl_utils_Timer;
oaktree_utils_DataTimer.prototype = $extend(openfl_utils_Timer.prototype,{
	data: null
	,__class__: oaktree_utils_DataTimer
});
var oaktree_utils_PicSize = $hxClasses["oaktree.utils.PicSize"] = { __ename__ : true, __constructs__ : ["Small","Square","Normal","Large","Custom"] };
oaktree_utils_PicSize.Small = ["Small",0];
oaktree_utils_PicSize.Small.toString = $estr;
oaktree_utils_PicSize.Small.__enum__ = oaktree_utils_PicSize;
oaktree_utils_PicSize.Square = ["Square",1];
oaktree_utils_PicSize.Square.toString = $estr;
oaktree_utils_PicSize.Square.__enum__ = oaktree_utils_PicSize;
oaktree_utils_PicSize.Normal = ["Normal",2];
oaktree_utils_PicSize.Normal.toString = $estr;
oaktree_utils_PicSize.Normal.__enum__ = oaktree_utils_PicSize;
oaktree_utils_PicSize.Large = ["Large",3];
oaktree_utils_PicSize.Large.toString = $estr;
oaktree_utils_PicSize.Large.__enum__ = oaktree_utils_PicSize;
oaktree_utils_PicSize.Custom = function(width,height) { var $x = ["Custom",4,width,height]; $x.__enum__ = oaktree_utils_PicSize; $x.toString = $estr; return $x; };
var oaktree_utils_FBUtils = function() { };
$hxClasses["oaktree.utils.FBUtils"] = oaktree_utils_FBUtils;
oaktree_utils_FBUtils.__name__ = ["oaktree","utils","FBUtils"];
oaktree_utils_FBUtils.getFBProfilePic = function(userId,size) {
	var sizeStr;
	var dimensionsStr = "";
	switch(size[1]) {
	case 0:
		sizeStr = "small";
		break;
	case 2:
		sizeStr = "normal";
		break;
	case 3:
		sizeStr = "large";
		break;
	case 1:
		sizeStr = "square";
		break;
	case 4:
		var h = size[3];
		var w = size[2];
		sizeStr = "normal";
		dimensionsStr = "&width=" + w + "&height=" + h;
		break;
	}
	return "https://graph.facebook.com/" + userId + "/picture?type=" + sizeStr + dimensionsStr;
};
var oaktree_utils_FontUtils = function() { };
$hxClasses["oaktree.utils.FontUtils"] = oaktree_utils_FontUtils;
oaktree_utils_FontUtils.__name__ = ["oaktree","utils","FontUtils"];
oaktree_utils_FontUtils.registerFontOnHTML = function(id,fontUrl) {
	var head = window.document.getElementsByTagName("head")[0];
	var baseName = StringTools.replace(id,".ttf","");
	var baseFontUrl = StringTools.replace(fontUrl,".ttf","");
	var truetypeUrl = baseFontUrl + ".ttf";
	var eotUrl = baseFontUrl + ".eot";
	var woffFormat = baseFontUrl + ".woff";
	var styleNode = window.document.createElement("style");
	styleNode.setAttribute("type","text/css");
	var styletext = "@font-face {\n";
	styletext += "  font-family: '" + baseName + "';\n";
	styletext += "  src: url('" + eotUrl + "') format('eot'), url('" + woffFormat + "') format('woff'), url('" + truetypeUrl + "') format('truetype');\n";
	styletext += "}";
	styleNode.innerHTML = styletext;
	window.document.head.appendChild(styleNode);
	var dummyNode = window.document.createElement("div");
	dummyNode.setAttribute("style","font-family: \"" + baseName + "\"; position: absolute; left: -99999;");
	dummyNode.innerHTML = "lorem ipsum";
	window.document.body.appendChild(dummyNode);
};
var oaktree_utils_InputManager = function() { };
$hxClasses["oaktree.utils.InputManager"] = oaktree_utils_InputManager;
oaktree_utils_InputManager.__name__ = ["oaktree","utils","InputManager"];
oaktree_utils_InputManager.__properties__ = {get_mouseIsDown:"get_mouseIsDown",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"}
oaktree_utils_InputManager._keyStates = null;
oaktree_utils_InputManager._target = null;
oaktree_utils_InputManager._dispatcher = null;
oaktree_utils_InputManager._mouseX = null;
oaktree_utils_InputManager.get_mouseX = function() {
	return oaktree_utils_InputManager._target.stage.get_mouseX();
};
oaktree_utils_InputManager._mouseY = null;
oaktree_utils_InputManager.get_mouseY = function() {
	return oaktree_utils_InputManager._target.stage.get_mouseY();
};
oaktree_utils_InputManager._mouseIsDown = null;
oaktree_utils_InputManager.get_mouseIsDown = function() {
	return oaktree_utils_InputManager._mouseIsDown;
};
oaktree_utils_InputManager.initialize = function(target) {
	oaktree_utils_InputManager._keyStates = [];
	var _g = 0;
	while(_g < 255) {
		var k = _g++;
		oaktree_utils_InputManager._keyStates[k] = false;
	}
	oaktree_utils_InputManager._mouseIsDown = false;
	oaktree_utils_InputManager._mouseX = 0;
	oaktree_utils_InputManager._mouseY = 0;
	oaktree_utils_InputManager._dispatcher = new openfl_events_EventDispatcher();
	oaktree_utils_InputManager._target = target;
	target.stage.addEventListener("keyDown",oaktree_utils_InputManager.onKeyDown);
	target.stage.addEventListener("keyUp",oaktree_utils_InputManager.onKeyUp);
	target.stage.addEventListener("keyUp",oaktree_utils_InputManager.onKeyUpCapture,true);
	target.stage.addEventListener("mouseDown",oaktree_utils_InputManager.onMouseDown,true);
	target.stage.addEventListener("mouseUp",oaktree_utils_InputManager.onMouseUp,true);
	target.stage.addEventListener("mouseLeave",oaktree_utils_InputManager.onMouseLeave);
	target.stage.addEventListener("deactivate",oaktree_utils_InputManager.onDeactivate);
};
oaktree_utils_InputManager.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	oaktree_utils_InputManager._dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
oaktree_utils_InputManager.removeEventListener = function(type,listener,useCapture) {
	if(useCapture == null) useCapture = false;
	oaktree_utils_InputManager._dispatcher.removeEventListener(type,listener,useCapture);
};
oaktree_utils_InputManager.keyIsDown = function(keyCode) {
	return oaktree_utils_InputManager._keyStates[keyCode];
};
oaktree_utils_InputManager.onKeyDown = function(e) {
	if(!oaktree_utils_InputManager._keyStates[e.keyCode]) {
		oaktree_utils_InputManager._keyStates[e.keyCode] = true;
		oaktree_utils_InputManager._dispatcher.dispatchEvent(e.clone());
	}
};
oaktree_utils_InputManager.onKeyUp = function(e) {
	oaktree_utils_InputManager._keyStates[e.keyCode] = false;
	oaktree_utils_InputManager._dispatcher.dispatchEvent(e.clone());
};
oaktree_utils_InputManager.onKeyUpCapture = function(e) {
	oaktree_utils_InputManager._keyStates[e.keyCode] = false;
};
oaktree_utils_InputManager.onMouseDown = function(e) {
	oaktree_utils_InputManager._mouseIsDown = true;
	oaktree_utils_InputManager._dispatcher.dispatchEvent(e.clone());
};
oaktree_utils_InputManager.onMouseUp = function(e) {
	oaktree_utils_InputManager._mouseIsDown = false;
	oaktree_utils_InputManager._dispatcher.dispatchEvent(e.clone());
};
oaktree_utils_InputManager.onMouseLeave = function(e) {
	oaktree_utils_InputManager._mouseIsDown = false;
};
oaktree_utils_InputManager.onDeactivate = function(e) {
	var _g1 = 0;
	var _g = oaktree_utils_InputManager._keyStates.length;
	while(_g1 < _g) {
		var key = _g1++;
		if(oaktree_utils_InputManager._keyStates[key]) {
			oaktree_utils_InputManager._keyStates[key] = false;
			oaktree_utils_InputManager._dispatcher.dispatchEvent(new openfl_events_KeyboardEvent("keyUp",false,false,0,key,0));
		}
	}
};
var oaktree_utils_MCGraphics = function() { };
$hxClasses["oaktree.utils.MCGraphics"] = oaktree_utils_MCGraphics;
oaktree_utils_MCGraphics.__name__ = ["oaktree","utils","MCGraphics"];
oaktree_utils_MCGraphics.drawRoundRectComplex = function(_g,x,y,w,h,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
	_g.moveTo(x + topLeftRadius,y);
	_g.lineTo(x + w - topRightRadius,y);
	_g.curveTo(x + w,y,w,y + topRightRadius);
	_g.lineTo(x + w,y + h - bottomRightRadius);
	_g.curveTo(x + w,y + h,x + w - bottomRightRadius,y + h);
	_g.lineTo(x + bottomLeftRadius,y + h);
	_g.curveTo(x,y + h,x,y + h - bottomLeftRadius);
	_g.lineTo(x,y + topLeftRadius);
	_g.curveTo(x,y,x + topLeftRadius,y);
};
var oaktree_utils_MacroUtils = function() { };
$hxClasses["oaktree.utils.MacroUtils"] = oaktree_utils_MacroUtils;
oaktree_utils_MacroUtils.__name__ = ["oaktree","utils","MacroUtils"];
var oaktree_utils_Maths = function() {
};
$hxClasses["oaktree.utils.Maths"] = oaktree_utils_Maths;
oaktree_utils_Maths.__name__ = ["oaktree","utils","Maths"];
oaktree_utils_Maths.fixed = function(value,precision) {
	var n = Math.pow(10,precision);
	return (value * n | 0) / n;
};
oaktree_utils_Maths.lerp = function(value,target,time) {
	if(time < 0) time = 0; else if(time > 1) time = 1; else time = time;
	return value + time * (target - value);
};
oaktree_utils_Maths.toFixed = function(x,decimalPlaces) {
	if(isNaN(x)) return "NaN"; else {
		var t = oaktree_utils_Maths.exp(10,decimalPlaces);
		var s = Std.string((x * t | 0) / t);
		var i = s.indexOf(".");
		if(i != -1) {
			var _g = HxOverrides.substr(s,i + 1,null).length;
			while(_g < decimalPlaces) {
				var i1 = _g++;
				s += "0";
			}
		} else {
			s += ".";
			var _g1 = 0;
			while(_g1 < decimalPlaces) {
				var i2 = _g1++;
				s += "0";
			}
		}
		return s;
	}
};
oaktree_utils_Maths.exp = function(a,n) {
	var t = 1;
	var r = 0;
	while(true) {
		if((n & 1) != 0) t = a * t;
		n >>= 1;
		if(n == 0) {
			r = t;
			break;
		} else a *= a;
	}
	return r;
};
oaktree_utils_Maths.clamp = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
oaktree_utils_Maths.prototype = {
	__class__: oaktree_utils_Maths
};
var oaktree_utils_ObjectUtility = function() { };
$hxClasses["oaktree.utils.ObjectUtility"] = oaktree_utils_ObjectUtility;
oaktree_utils_ObjectUtility.__name__ = ["oaktree","utils","ObjectUtility"];
oaktree_utils_ObjectUtility.copyProperties = function(src,dst,ignoreProperties) {
	var _g = 0;
	var _g1 = Reflect.fields(src);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(ignoreProperties == null || !(HxOverrides.indexOf(ignoreProperties,k,0) != -1)) Reflect.setProperty(dst,k,Reflect.field(src,k));
	}
};
oaktree_utils_ObjectUtility.mergeObjects = function(obj1,obj2) {
	var mergedObj = oaktree_utils_ObjectUtility.cloneObject(obj1);
	oaktree_utils_ObjectUtility.copyProperties(obj2,mergedObj);
	return mergedObj;
};
oaktree_utils_ObjectUtility.cloneObject = function(obj) {
	var clone = { };
	oaktree_utils_ObjectUtility.copyProperties(obj,clone);
	return clone;
};
var oaktree_utils_State = function(_options) {
	this.inited = false;
	this.active = false;
	this.enabled = false;
	this.name = "";
	if(_options != null && _options.name != null) this.name = _options.name;
};
$hxClasses["oaktree.utils.State"] = oaktree_utils_State;
oaktree_utils_State.__name__ = ["oaktree","utils","State"];
oaktree_utils_State.prototype = {
	name: null
	,machine: null
	,enabled: null
	,active: null
	,inited: null
	,init: function() {
	}
	,enable: function(_enable_with) {
		this.machine.enable(this.name,_enable_with);
	}
	,disable: function(_disable_with) {
		this.machine.disable(this.name,_disable_with);
	}
	,destroy: function() {
		this.machine.kill(this.name);
	}
	,onEnter: function(options) {
	}
	,onLeave: function(options) {
	}
	,onEnabled: function(options) {
	}
	,onDisabled: function(options) {
	}
	,onAdded: function() {
	}
	,onRemoved: function() {
	}
	,onDestroy: function() {
	}
	,_init: function() {
		if(!this.inited) {
			this.inited = true;
			this.init();
		}
	}
	,__class__: oaktree_utils_State
};
var oaktree_utils_States = function(_options) {
	this.active_count = 0;
	this._state_count = 0;
	this.createOnGet = false;
	this.name = "";
	if(_options != null && _options.name != null) this.name = _options.name;
	this._states = new haxe_ds_StringMap();
	this.active_states = [];
};
$hxClasses["oaktree.utils.States"] = oaktree_utils_States;
oaktree_utils_States.__name__ = ["oaktree","utils","States"];
oaktree_utils_States.prototype = {
	name: null
	,createOnGet: null
	,_states: null
	,_state_count: null
	,active_states: null
	,current_state: null
	,active_count: null
	,enter: function(_state,opts) {
		_state.onEnter(opts);
		this.active_states.push(_state);
		this.active_count++;
		_state.active = true;
	}
	,leave: function(_state,opts) {
		_state.active = false;
		HxOverrides.remove(this.active_states,_state);
		this.active_count--;
		_state.onLeave(opts);
	}
	,add: function(_state) {
		this._states.set(_state.name,_state);
		this._state_count++;
		_state.machine = this;
		_state.onAdded();
		haxe_Log.trace("   d / states / " + ("" + this.name + " / adding a state called " + _state.name),{ fileName : "States.hx", lineNumber : 68, className : "oaktree.utils.States", methodName : "add"});
		return _state;
	}
	,remove: function(_name,opts) {
		if(this._states.exists(_name)) {
			var _state = this._states.get(_name);
			if(_state != null) {
				if(_state.active) {
					this.leave(_state,opts);
					if(_state == this.current_state) this.current_state = null;
				}
				if(_state.enabled) this.disable(_state.name);
				_state.onRemoved();
				this._states.remove(_name);
				this._state_count--;
			}
			return _state;
		}
		return null;
	}
	,kill: function(_name) {
		if(this._state_count > 0) {
			if(this._states.exists(_name)) {
				var _state = this.remove(_name);
				if(_state != null) _state.onDestroy();
			}
		}
	}
	,enable: function(_name,opts) {
		if(!this.createOnGet && this._state_count == 0) return;
		var state = this.getState(_name,this.createOnGet);
		if(state != null) {
			haxe_Log.trace("   d / states / " + ("" + this.name + " / enabling a state: " + _name),{ fileName : "States.hx", lineNumber : 128, className : "oaktree.utils.States", methodName : "enable"});
			state.onEnabled(opts);
			state.active = true;
			state.enabled = true;
			this.active_states.push(state);
			this.active_count++;
			haxe_Log.trace("   d / states / " + ("" + this.name + " / now at " + this.active_states.length + " active states"),{ fileName : "States.hx", lineNumber : 135, className : "oaktree.utils.States", methodName : "enable"});
		}
	}
	,disable: function(_name,opts) {
		if(!this.createOnGet && this._state_count == 0) return;
		var state = this.getState(_name,this.createOnGet);
		if(state != null) {
			haxe_Log.trace("   d / states / " + ("" + this.name + " / disabling a state: " + _name),{ fileName : "States.hx", lineNumber : 146, className : "oaktree.utils.States", methodName : "disable"});
			state.onDisabled(opts);
			state.active = false;
			state.enabled = false;
			HxOverrides.remove(this.active_states,state);
			this.active_count--;
			haxe_Log.trace("   d / states / " + ("" + this.name + " / now at " + this.active_states.length + " active states"),{ fileName : "States.hx", lineNumber : 152, className : "oaktree.utils.States", methodName : "disable"});
		}
	}
	,set: function(name,enter_opts,leave_opts) {
		if(this.current_state != null) {
			haxe_Log.trace("   d / states / " + ("current state was valid, leaving current state : " + this.current_state.name),{ fileName : "States.hx", lineNumber : 160, className : "oaktree.utils.States", methodName : "set"});
			this.leave(this.current_state,leave_opts);
			haxe_Log.trace("   d / states / " + ("removed " + this.current_state.name),{ fileName : "States.hx", lineNumber : 164, className : "oaktree.utils.States", methodName : "set"});
			this.current_state = null;
		}
		if(this._states.exists(name)) {
			haxe_Log.trace("   d / states / " + ("found state named " + name + ", calling enter"),{ fileName : "States.hx", lineNumber : 171, className : "oaktree.utils.States", methodName : "set"});
			this.current_state = this._states.get(name);
			this.enter(this.current_state,enter_opts);
		}
	}
	,getState: function(_name,createIfNull) {
		if(createIfNull == null) createIfNull = false;
		if(this._states.exists(_name)) return this._states.get(_name); else if(createIfNull) {
			var state = new oaktree_utils_State({ name : _name});
			this.add(state);
			return state;
		}
		return null;
	}
	,isTopState: function(name) {
		if(this.getTopState() != null) return this.getTopState().name == name;
		return false;
	}
	,getTopState: function() {
		if(this.active_states.length > 0) return this.active_states[this.active_states.length - 1];
		return null;
	}
	,isEnabled: function(name) {
		if(this._states.exists(name)) return this._states.get(name).enabled;
		return false;
	}
	,__class__: oaktree_utils_States
};
var oaktree_utils_StringUtility = function() {
	throw new js__$Boot_HaxeError(new openfl_errors_Error("StringUtility is a static class. It should not be instantiated"));
};
$hxClasses["oaktree.utils.StringUtility"] = oaktree_utils_StringUtility;
oaktree_utils_StringUtility.__name__ = ["oaktree","utils","StringUtility"];
oaktree_utils_StringUtility.compareStrings = function(str1,str2) {
	if(str1 == null) return -1; else if(str2 == null) return 1;
	str1 = str1.toLowerCase();
	str2 = str2.toLowerCase();
	if(str1 < str2) return -1; else if(str1 > str2) return 1; else return 0;
};
oaktree_utils_StringUtility.isEmpty = function(str) {
	return str == null || str == "";
};
oaktree_utils_StringUtility.isBlank = function(str) {
	return str == null || str == "" || !new EReg("\\S","").match(str);
};
oaktree_utils_StringUtility.formatNumber = function(n,format,separatorChar) {
	if(separatorChar == null) separatorChar = ",";
	if(format == null || format == "") if(n == null) return "null"; else return "" + n;
	if(format != null) switch(format) {
	case "n":
		return oaktree_utils_StringUtility.commaSeperateThousands(n,separatorChar);
	case "p":
		return oaktree_utils_StringUtility.formatPercentage(n);
	}
	var decimalIndex = format.indexOf(".");
	if(decimalIndex >= 0) return oaktree_utils_StringUtility.formatInteger(Math.floor(n),HxOverrides.substr(format,0,decimalIndex)) + "." + oaktree_utils_StringUtility.formatNumberDecimal(n,HxOverrides.substr(format,decimalIndex + 1,null)); else return oaktree_utils_StringUtility.formatInteger(Math.floor(n),format);
};
oaktree_utils_StringUtility.commaSeperateThousands = function(n,separatorChar) {
	if(separatorChar == null) separatorChar = ",";
	var number = Std.string(Math.abs(n));
	var decimalIndex = number.indexOf(".");
	var str = "";
	if(decimalIndex >= 0) {
		str = "." + HxOverrides.substr(number,decimalIndex,null);
		number = HxOverrides.substr(number,0,decimalIndex);
	}
	var numberLength = number.length;
	var numberIndex = numberLength - 1;
	var commaCount = Math.floor((numberLength - 1) / 3);
	var _g = 0;
	while(_g < commaCount) {
		var j = _g++;
		str = separatorChar + HxOverrides.substr(number,numberLength - (j + 1) * 3,3) + str;
	}
	str = HxOverrides.substr(number,0,numberLength - commaCount * 3) + str;
	if(n < 0) str = "-" + str;
	return str;
};
oaktree_utils_StringUtility.formatInteger = function(i,format) {
	var number = Std.string(Math.floor(Math.abs(i)));
	var numberLength = number.length;
	var numberIndex = numberLength - 1;
	var str = "";
	var _g1 = 0;
	var _g = format.length;
	while(_g1 < _g) {
		var k = _g1++;
		var formatChar = format.charAt(format.length - k - 1);
		switch(formatChar) {
		case "#":
			if(numberIndex >= 0) {
				str = number.charAt(numberIndex) + str;
				numberIndex--;
			}
			break;
		case "0":
			if(numberIndex >= 0) str = number.charAt(numberIndex) + str; else str = formatChar + str;
			numberIndex--;
			break;
		default:
			str = formatChar + str;
		}
	}
	if(numberIndex >= 0) str = HxOverrides.substr(number,0,numberIndex + 1) + str;
	if(i < 0) str = "-" + str;
	return str;
};
oaktree_utils_StringUtility.formatNumberDecimal = function(n,format) {
	var number;
	if(n == null) number = "null"; else number = "" + n;
	var decimalIndex = number.indexOf(".");
	if(decimalIndex < 0) number = ""; else number = HxOverrides.substr(number,decimalIndex + 1,null);
	var numberLength = number.length;
	var numberIndex = 0;
	var str = "";
	var _g1 = 0;
	var _g = format.length;
	while(_g1 < _g) {
		var k = _g1++;
		var formatChar = format.charAt(k);
		switch(formatChar) {
		case "#":
			if(numberIndex < numberLength) {
				str += number.charAt(numberIndex);
				numberIndex++;
			}
			break;
		case "0":
			if(numberIndex < numberLength) str += number.charAt(numberIndex); else str += formatChar;
			numberIndex++;
			break;
		default:
			str = formatChar + str;
		}
	}
	return str;
};
oaktree_utils_StringUtility.formatPercentage = function(p) {
	return Math.round(100 * p) + "%";
};
oaktree_utils_StringUtility.formatTime = function(totalSeconds) {
	var seconds = totalSeconds % 60;
	return Math.floor(totalSeconds / 60) + ":" + (seconds < 10?"0" + seconds:seconds == null?"null":"" + seconds);
};
oaktree_utils_StringUtility.formatFloat = function(n,decimalPlaces) {
	if(decimalPlaces == null) decimalPlaces = -1;
	if(decimalPlaces >= 0) {
		var p = Std["int"](Math.pow(10,decimalPlaces));
		n = Math.round(n * p) / p;
	}
	if(n == null) return "null"; else return "" + n;
};
oaktree_utils_StringUtility.withFormat = function(pSrc,pParams) {
	var result = pSrc;
	try {
		if(pParams != null) {
			if((pParams instanceof Array) && pParams.__enum__ == null) {
				var arr = pParams;
				var _g = 0;
				while(_g < arr.length) {
					var value = arr[_g];
					++_g;
					result = oaktree_utils_StringUtility.arrayParamsReg.replace(result,value);
				}
			} else {
				var fields = Reflect.fields(pParams);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					result = StringTools.replace(result,"%" + field + "%",Reflect.field(pParams,field));
				}
			}
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		haxe_Log.trace("Failed to get string withFormat(" + pSrc + " , " + Std.string(pParams) + ")",{ fileName : "StringUtility.hx", lineNumber : 257, className : "oaktree.utils.StringUtility", methodName : "withFormat"});
	}
	return result;
};
oaktree_utils_StringUtility.prototype = {
	__class__: oaktree_utils_StringUtility
};
var oaktree_utils_WarehouseInstance = function() {
	this._storage = new haxe_ds_StringMap();
};
$hxClasses["oaktree.utils.WarehouseInstance"] = oaktree_utils_WarehouseInstance;
oaktree_utils_WarehouseInstance.__name__ = ["oaktree","utils","WarehouseInstance"];
oaktree_utils_WarehouseInstance.prototype = {
	_storage: null
	,store: function(id,obj) {
		var value = obj;
		this._storage.set(id,value);
		return obj;
	}
	,fetch: function(id) {
		if(this._storage.get(id) == null) haxe_Log.trace("no object found with handle '" + id + "'",{ fileName : "Warehouse.hx", lineNumber : 30, className : "oaktree.utils.WarehouseInstance", methodName : "fetch"});
		return this._storage.get(id);
	}
	,'delete': function(id) {
		if(!this._storage.remove(id)) haxe_Log.trace("no object found with handle '" + id + "'",{ fileName : "Warehouse.hx", lineNumber : 42, className : "oaktree.utils.WarehouseInstance", methodName : "delete"});
	}
	,__class__: oaktree_utils_WarehouseInstance
};
var oaktree_utils_Warehouse = function() { };
$hxClasses["oaktree.utils.Warehouse"] = oaktree_utils_Warehouse;
oaktree_utils_Warehouse.__name__ = ["oaktree","utils","Warehouse"];
oaktree_utils_Warehouse.store = function(id,obj) {
	return oaktree_utils_Warehouse._store.store(id,obj);
};
oaktree_utils_Warehouse.fetch = function(id) {
	return oaktree_utils_Warehouse._store.fetch(id);
};
oaktree_utils_Warehouse["delete"] = function(id) {
	oaktree_utils_Warehouse._store["delete"](id);
	return;
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
		future.onComplete(function(bytes) {
			promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
		});
		future.onProgress(function(progress) {
			promise.progress(progress);
		});
		future.onError(function(msg) {
			promise.error(msg);
		});
	}
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getSound(id,useCache);
	});
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[index] = method;
			haxe_Log.trace("added script index " + index,{ fileName : "MovieClip.hx", lineNumber : 47, className : "openfl.display.MovieClip", methodName : "addFrameScript"});
		} else if(this.__frameScripts != null) this.__frameScripts.remove(index);
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return (function($this) {
			var $r;
			var array = [$this.redMultiplier,0,0,0,$this.redOffset / 255,0,$this.greenMultiplier,0,0,$this.greenOffset / 255,0,0,$this.blueMultiplier,0,$this.blueOffset / 255,0,0,0,$this.alphaMultiplier,$this.alphaOffset / 255];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this));
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 113, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 144, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,ts: null
	,append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c7 = data;
				this.drawPath(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.o[c7.oPos + 2]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c8 = data;
				this.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 9:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c9 = data;
				this.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 10:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c10 = data;
				this.drawTiles(c10.buffer.ts[c10.tsPos],c10.buffer.ff[c10.ffPos],c10.buffer.b[c10.bPos],c10.buffer.i[c10.iPos],c10.buffer.o[c10.oPos],c10.buffer.i[c10.iPos + 1]);
				break;
			case 11:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 12:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c12 = data;
				this.endFill();
				break;
			case 13:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 14:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 15:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 16:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 17:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 18:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
		this.ts = null;
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 4;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 15:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return this;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return this;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_shader:"get_shader",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.buffer.ts[this1.tsPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1.buffer.i[this1.iPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : true, __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "PolyK.hx", lineNumber : 104, className : "openfl._internal.renderer.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,projectionMatrix: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,defaultFramebuffer: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 8:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c3 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 6:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c4 = data;
				hasPath = true;
				var x = c4.buffer.f[c4.fPos];
				var y = c4.buffer.f[c4.fPos + 1];
				var width = c4.buffer.f[c4.fPos + 2];
				var height = c4.buffer.f[c4.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				closeGap = true;
				startX = c7.buffer.f[c7.fPos];
				startY = c7.buffer.f[c7.fPos + 1];
				break;
			case 15:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0?c8.buffer.o[c8.oPos]:1);
					if(c8.buffer.o[c8.oPos + 3] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = c8.buffer.o[c8.oPos + 3];
						$r = (function($this) {
							var $r;
							switch(_g2) {
							case 1:
								$r = 0;
								break;
							case 0:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = c8.buffer.o[c8.oPos + 2];
						$r = (function($this) {
							var $r;
							switch(_g21) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.f[c8.fPos + 1]);
					var r = ((c8.buffer.i[c8.iPos] & 16711680) >>> 16) / 255;
					var g = ((c8.buffer.i[c8.iPos] & 65280) >>> 8) / 255;
					var b = (c8.buffer.i[c8.iPos] & 255) / 255;
					if(c8.buffer.f[c8.fPos] == 1) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c8.buffer.f[c8.fPos]);
				}
				break;
			case 14:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos],c9.buffer.ii[c9.iiPos],c9.buffer.ff[c9.ffPos],c9.buffer.ii[c9.iiPos + 1],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3],c9.buffer.f[c9.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c10 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				if(c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255,((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255,(c12.buffer.i[c12.iPos] & 255) / 255,c12.buffer.f[c12.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 11:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c14 = data;
				var v = c14.buffer.o[c14.oPos];
				var ind = c14.buffer.o[c14.oPos + 1];
				var uvt = c14.buffer.o[c14.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				if(!colorFill) {
					if(uvt == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvt = this1;
						var _g3 = 0;
						var _g22 = v.length / 2 | 0;
						while(_g3 < _g22) {
							var i1 = _g3++;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data1;
									var this3;
									this3 = new Array(uvt.data.length + 10);
									data1 = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
									uvt.data = data1;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvt.length;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data2;
									var this4;
									this4 = new Array(uvt.data.length + 10);
									data2 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
									uvt.data = data2;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvt.length;
						}
					}
					var skipT = c14.buffer.o[c14.oPos + 2].length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data[a_] * 2;
					iay = ind.data[a_] * 2 + 1;
					ibx = ind.data[b_] * 2;
					iby = ind.data[b_] * 2 + 1;
					icx = ind.data[c_] * 2;
					icy = ind.data[c_] * 2 + 1;
					x1 = v.data[iax];
					y1 = v.data[iay];
					x2 = v.data[ibx];
					y2 = v.data[iby];
					x3 = v.data[icx];
					y3 = v.data[icy];
					var _g23 = c14.buffer.o[c14.oPos + 3];
					switch(_g23) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width1;
					uvx2 = uvt.data[ibx] * width1;
					uvx3 = uvt.data[icx] * width1;
					uvy1 = uvt.data[iay] * height1;
					uvy2 = uvt.data[iby] * height1;
					uvy3 = uvt.data[icy] * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					var matrix = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 10:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c15 = data;
				var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
				var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
				var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
				var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
				var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
				var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
				var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
				var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
				var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
				var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
				var useBlendOverlay = (c15.buffer.i[c15.iPos] & 4194304) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = c15.buffer.ff[c15.ffPos].length;
				if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				c15.buffer.ts[c15.tsPos].__bitmap.__sync();
				surface = c15.buffer.ts[c15.tsPos].__bitmap.getSurface();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				if(useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
				while(index < totalCount) {
					var i2 = c15.buffer.ff[c15.ffPos][index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
						center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = c15.buffer.ts[c15.tsPos].__rectTile;
						rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
						center = c15.buffer.ts[c15.tsPos].__point;
						if(useOrigin) center.setTo(c15.buffer.ff[c15.ffPos][index + 6],c15.buffer.ff[c15.ffPos][index + 7]); else center.setTo(0,0);
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix1 = new lime_math_Matrix3(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(c15.buffer.ff[c15.ffPos][index] - offsetX1,c15.buffer.ff[c15.ffPos][index + 1] - offsetY1);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
						if(useScale) {
							var scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) {
							if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(c15.buffer.ff[c15.ffPos][index + alphaIndex]);
						} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix2.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix2.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 4];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getWorldTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,renderDisplayObject: function(object) {
		this.cairo.identityMatrix();
		object.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 0:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 16:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 17:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 14:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.f[c4.fPos]);
				break;
			case 13:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.i[c6.iPos],1,c6.buffer.b[c6.bPos],c6.buffer.o[c6.oPos + 1],c6.buffer.o[c6.oPos + 2],c6.buffer.o[c6.oPos + 3],c6.buffer.f[c6.fPos + 1]);
				break;
			case 12:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 8:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 9:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			c = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
			break;
		case 4:
			var c1;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			c1 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
			break;
		case 5:
			var c2;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			c2 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			var c3;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			c3 = data;
			var x = c3.buffer.f[c3.fPos];
			var y = c3.buffer.f[c3.fPos + 1];
			var width = c3.buffer.f[c3.fPos + 2];
			var height = c3.buffer.f[c3.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 9:
			var c4;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			c4 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.o[c4.oPos]);
			break;
		case 16:
			var c5;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			c5 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
			positionX = c5.buffer.f[c5.fPos];
			positionY = c5.buffer.f[c5.fPos + 1];
			break;
		case 17:
			var c6;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			c6 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
			positionX = c6.buffer.f[c6.fPos];
			positionY = c6.buffer.f[c6.fPos + 1];
			closeGap = true;
			startX = c6.buffer.f[c6.fPos];
			startY = c6.buffer.f[c6.fPos + 1];
			break;
		case 15:
			var c7;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			c7 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(c7.buffer.o[c7.oPos + 3] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c7.buffer.o[c7.oPos + 3]).toLowerCase();
				if(c7.buffer.o[c7.oPos + 2] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = c7.buffer.o[c7.oPos + 2];
					switch(_g2) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c7.buffer.o[c7.oPos + 2]).toLowerCase();
					}
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.f[c7.fPos + 1];
				if(c7.buffer.f[c7.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.i[c7.iPos] & 16777215,6); else {
					var r = (c7.buffer.i[c7.iPos] & 16711680) >>> 16;
					var g = (c7.buffer.i[c7.iPos] & 65280) >>> 8;
					var b = c7.buffer.i[c7.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.f[c7.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var c8;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			c8 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c9;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			c9 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			c10 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c10.buffer.o[c10.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			c11 = data;
			if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos],6); else {
					var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
					var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
					var b1 = c11.buffer.i[c11.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			c12 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 8:
			var c13;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			c13 = data;
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c13.buffer.f[c13.fPos + 1];
					sl = c13.buffer.f[c13.fPos];
					sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
					sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
			break;
		default:
			data.advance();
			data.prev = type;
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 2],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 15:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos],c4.buffer.i[c4.iPos],c4.buffer.f[c4.fPos],c4.buffer.b[c4.bPos],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.f[c4.fPos + 1]);
						break;
					case 14:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos],c5.buffer.ii[c5.iiPos],c5.buffer.ff[c5.ffPos],c5.buffer.ii[c5.iiPos + 1],c5.buffer.o[c5.oPos + 1],c5.buffer.o[c5.oPos + 2],c5.buffer.o[c5.oPos + 3],c5.buffer.f[c5.fPos]);
						break;
					case 13:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],c6.buffer.b[c6.bPos],c6.buffer.b[c6.bPos + 1]);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.f[c8.fPos]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.o[c13.oPos]);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvt.length;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = c14.buffer.o[c14.oPos + 3];
							switch(_g21) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if(useOrigin) center.setTo(c15.buffer.ff[c15.ffPos][index + 6],c15.buffer.ff[c15.ffPos][index + 7]); else center.setTo(0,0);
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX,c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = c15.buffer.b[c15.bPos];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						data.advance();
						data.prev = type;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__renderTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				if(shape.__mask != null) renderSession.maskManager.popMask();
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g1 < _g2) {
					var i1 = _g1++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g3 < _g11.length) {
					var group = _g11[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) break;
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__renderTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.__shader,bitmap.pixelSnapping);
};
openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession,texture,viewPort,smoothing,transparent,clearBuffer,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(clearBuffer == null) clearBuffer = false;
	if(transparent == null) transparent = true;
	var gl = renderSession.gl;
	if(gl == null) return null;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var x = viewPort.x | 0;
	var y = viewPort.y | 0;
	var width = viewPort.width | 0;
	var height = viewPort.height | 0;
	spritebatch.finish();
	if(openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : null, viewPort : null, transparent : renderer.transparent});
	if(texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl,width,height,smoothing,powerOfTwo);
	texture.resize(width,height);
	renderer.transparent = transparent;
	renderSession.maskManager.saveState();
	gl.bindFramebuffer(gl.FRAMEBUFFER,(texture.__swapped?texture.__texture1:texture.__texture0).frameBuffer);
	renderer.setViewport(x,y,width,height);
	gl.colorMask(true,true,true,true);
	renderSession.blendModeManager.setBlendMode(10);
	if(clearBuffer) (texture.__swapped?texture.__texture1:texture.__texture0).clear(0,0,0,0,null);
	openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : texture, viewPort : viewPort, transparent : transparent});
	return texture;
};
openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession,target,source,matrix,colorTransform,blendMode,clipRect) {
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("No data to draw to");
	var gl = renderSession.gl;
	if(gl == null) return;
	var viewPort = data.viewPort;
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var drawTarget = target != null;
	var tmpRect;
	if(clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x,viewPort.y,viewPort.width,viewPort.height); else tmpRect = clipRect.clone();
	spritebatch.begin(renderSession,drawTarget?null:tmpRect);
	if(drawTarget) {
		target.__worldTransform.identity();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform,viewPort.height);
		target.__renderGL(renderSession);
		spritebatch.stop();
		if(target.__texture != null) gl.deleteTexture(target.__texture);
		target.__texture = null;
		spritebatch.start(tmpRect);
	}
	var ctCache = source.__worldColorTransform;
	var blendModeCache = source.__blendMode;
	var cached = source.__cacheAsBitmap;
	var m;
	if(matrix != null) m = matrix.clone(); else m = new openfl_geom_Matrix();
	openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,viewPort.height);
	if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
	source.__blendMode = blendMode;
	openfl_display_DisplayObject.__cacheAsBitmapMode = true;
	source.__updateTransforms(m);
	source.__updateChildren(false);
	source.__cacheAsBitmap = false;
	source.__renderGL(renderSession);
	source.__cacheAsBitmap = cached;
	source.__worldColorTransform = ctCache;
	source.__blendMode = blendModeCache;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	source.__updateTransforms();
	source.__updateChildren(false);
};
openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession,image) {
	var gl = renderSession.gl;
	if(gl == null) return;
	renderSession.spriteBatch.finish();
	openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) throw new js__$Boot_HaxeError("oh");
	var x;
	var y;
	var width;
	var height;
	if(data.viewPort == null) {
		x = y = 0;
		width = renderSession.renderer.width;
		height = renderSession.renderer.height;
	} else {
		x = Math.floor(data.viewPort.x);
		y = Math.floor(data.viewPort.y);
		width = Math.ceil(data.viewPort.width);
		height = Math.ceil(data.viewPort.height);
	}
	if(image != null) {
		if(image.width != width || image.height != height) image.resize(width,height);
		gl.readPixels(x,y,width,height,gl.RGBA,gl.UNSIGNED_BYTE,image.buffer.data);
		image.dirty = false;
		image.set_premultiplied(true);
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,data.texture == null?renderSession.defaultFramebuffer:data.texture.get_framebuffer());
	renderSession.renderer.setViewport(x,y,width,height);
	renderSession.renderer.transparent = data.transparent;
	renderSession.maskManager.restoreState();
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) smooth = true;
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,null,0);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,projectionMatrix: null
	,__stage: null
	,vpX: null
	,vpY: null
	,vpWidth: null
	,vpHeight: null
	,destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
	var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
	if(__map_reserved[key] != null?cache.existsReserved(key):cache.h.hasOwnProperty(key)) return __map_reserved[key] != null?cache.getReserved(key):cache.h[key];
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		gl.deleteShader(vertexShader);
		gl.deleteShader(fragmentShader);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program),{ fileName : "Shader.hx", lineNumber : 226, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc,{ fileName : "Shader.hx", lineNumber : 227, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			return null;
		}
	}
	if(__map_reserved[key] != null) cache.setReserved(key,program); else cache.h[key] = program;
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc;
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 244, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		haxe_Log.trace(shaderSrc,{ fileName : "Shader.hx", lineNumber : 245, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,compiled: null
	,ID: null
	,program: null
	,wrapS: null
	,wrapT: null
	,smooth: null
	,blendMode: null
	,vertexString: null
	,fragmentString: null
	,init: function(force) {
		if(force == null) force = false;
		if(this.compiled && !force) return;
		if(this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
		if(this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
		if(this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexString,this.fragmentString);
		if(this.program != null) this.compiled = true;
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.compiled = false;
		this.attributes = null;
	}
	,applyData: function(shaderData,renderSession) {
		if(shaderData == null) return;
		var param;
		var u;
		var v;
		var bd;
		var $it0 = shaderData.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			u = this.getUniformLocation(key);
			param = __map_reserved[key] != null?shaderData.getReserved(key):shaderData.h[key];
			if(param == null) continue;
			v = param.value;
			bd = param.bitmap;
			if(v == null && bd == null) continue;
			var _g = param.internalType;
			switch(_g) {
			case 1:
				var _g1 = param.size;
				switch(_g1) {
				case 1:
					this.gl.uniform1i(u,v[0] | 0);
					break;
				case 2:
					this.gl.uniform2i(u,v[0] | 0,v[1] | 0);
					break;
				case 3:
					this.gl.uniform3i(u,v[0] | 0,v[1] | 0,v[2] | 0);
					break;
				case 4:
					this.gl.uniform4i(u,v[0] | 0,v[1] | 0,v[2] | 0,v[3] | 0);
					break;
				}
				break;
			case 2:
				var _g11 = param.size;
				switch(_g11) {
				case 1:
					this.gl.uniform1f(u,v[0]);
					break;
				case 2:
					this.gl.uniform2f(u,v[0],v[1]);
					break;
				case 3:
					this.gl.uniform3f(u,v[0],v[1],v[2]);
					break;
				case 4:
					this.gl.uniform4f(u,v[0],v[1],v[2],v[3]);
					break;
				}
				break;
			case 3:
				var _g12 = param.size;
				switch(_g12) {
				case 2:
					this.gl.uniformMatrix2fv(u,param.transpose,(function($this) {
						var $r;
						var array = param.value;
						var this1;
						if(array != null) this1 = new Float32Array(array); else this1 = null;
						$r = this1;
						return $r;
					}(this)));
					break;
				case 3:
					this.gl.uniformMatrix3fv(u,param.transpose,(function($this) {
						var $r;
						var array1 = param.value;
						var this2;
						if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
						$r = this2;
						return $r;
					}(this)));
					break;
				case 4:
					this.gl.uniformMatrix4fv(u,param.transpose,(function($this) {
						var $r;
						var array2 = param.value;
						var this3;
						if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
						$r = this3;
						return $r;
					}(this)));
					break;
				}
				break;
			case 4:
				if(bd == null || !bd.__isValid) continue;
				this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
				this.gl.bindTexture(this.gl.TEXTURE_2D,bd.getTexture(this.gl));
				this.gl.uniform1i(u,renderSession.activeTextures);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,param.repeatX);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,param.repeatY);
				renderSession.activeTextures++;
				break;
			default:
			}
		}
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tif(!" + "openfl_uUseColorTransform" + ") {","\t\treturn color * tint;","\t}","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");","   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
		this.getUniformLocation("openfl_uUseColorTransform");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "openfl_aTexCoord0" + ";","   vColor = " + "openfl_aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec3 " + "openfl_uColor" + ";","uniform bool " + "openfl_uUseTexture" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "openfl_uUseTexture" + ") {","       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "openfl_uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uUseTexture");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColor" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform mat3 " + "openfl_uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "openfl_uAlpha" + ";","uniform vec2 " + "openfl_uPatternTL" + ";","uniform vec2 " + "openfl_uPatternBR" + ";","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uPatternMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uPatternTL");
		this.getUniformLocation("openfl_uPatternBR");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform float " + "openfl_uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) force = false;
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = 10;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 14:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) makeArray = true;
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) this.points = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = 2; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = 1; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = 2; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215,c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c2 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 3],c2.buffer.f[c2.fPos + 4],c2.buffer.f[c2.fPos + 5]);
				break;
			case 4:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c3 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				var x = c7.buffer.f[c7.fPos];
				var y = c7.buffer.f[c7.fPos + 1];
				var width = c7.buffer.f[c7.fPos + 2];
				var height = c7.buffer.f[c7.fPos + 3];
				var rx = c7.buffer.f[c7.fPos + 4];
				var ry = c7.buffer.o[c7.oPos];
				if(ry == null) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) rx = width / 2;
				if(ry > height / 2) ry = height / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x,y,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c8 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c9 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.i[c9.iPos];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.f[c9.fPos];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 1];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 3];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.f[c9.fPos + 1];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c10 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1]);
				break;
			case 17:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c11 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c12 = data;
				var uvtData = c12.buffer.o[c12.oPos + 2];
				var vertices = c12.buffer.o[c12.oPos];
				var indices = c12.buffer.o[c12.oPos + 1];
				var culling = c12.buffer.o[c12.oPos + 3];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data1 = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data2;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data2 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
										uvtData.data = data2;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,null,0);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c13 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos],c13.buffer.ff[c13.ffPos],c13.buffer.b[c13.bPos],c13.buffer.i[c13.iPos],c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c14 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				var _g22 = c14.buffer.o[c14.oPos + 2];
				switch(_g22) {
				case "evenOdd":
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case "nonZero":
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx;
				var cy;
				var cx2;
				var cy2;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g23 = c14.buffer.o[c14.oPos].length;
				while(_g31 < _g23) {
					var i1 = _g31++;
					command = c14.buffer.o[c14.oPos].data[i1];
					switch(command) {
					case 1:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,ax,ay);
						break;
					case 6:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c15 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = 2;
	this.caps = 1;
	this.joints = 2;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	gl: null
	,clips: null
	,currentClip: null
	,savedClip: null
	,destroy: function() {
		this.gl = null;
	}
	,pushRect: function(rect,transform) {
		if(rect == null) return;
		var m = transform.clone();
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,this.renderSession.renderer.viewport.height);
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) clip = this.currentClip.intersection(clip);
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		var this1;
		if(components != null) this1 = new Float32Array(components); else this1 = null;
		this.defaultValue = this1;
	} else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry;
	if(rectData.length == 3) ry = rx; else ry = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		openfl__$internal_renderer_GraphicsPaths.ellipse(path.points,x,y,rx,ry,totalSegs);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 407, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.get_cacheAsBitmap());
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) return;
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4],args[5]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = m.clone();
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("openfl_uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : true, __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		var this1;
		if(elements != null) this1 = new Float32Array(elements); else this1 = null;
		this.glData = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		var this2;
		if(elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
		this.glIndices = this2;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,shader,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,shader,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.__swapped = false;
	this.powerOfTwo = true;
	this.useOldTexture = false;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.smoothing = smoothing;
	this.powerOfTwo = powerOfTwo;
	this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl,width,height,smoothing,powerOfTwo));
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	gl: null
	,width: null
	,height: null
	,smoothing: null
	,useOldTexture: null
	,powerOfTwo: null
	,__swapped: null
	,__texture0: null
	,__texture1: null
	,swap: function() {
		this.__swapped = !this.__swapped;
		if((this.__swapped?this.__texture1:this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl,this.width,this.height,this.smoothing,this.powerOfTwo));
	}
	,clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		(this.__swapped?this.__texture1:this.__texture0).clear(r,g,b,a,mask);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		(this.__swapped?this.__texture1:this.__texture0).resize(width,height);
	}
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,get_renderTexture: function() {
		if(this.__swapped) return this.__texture1; else return this.__texture0;
	}
	,set_renderTexture: function(v) {
		if(this.__swapped) return this.__texture1 = v; else return this.__texture0 = v;
	}
	,get_oldRenderTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,set_oldRenderTexture: function(v) {
		if(this.__swapped) return this.__texture0 = v; else return this.__texture1 = v;
	}
	,get_framebuffer: function() {
		return (this.__swapped?this.__texture1:this.__texture0).frameBuffer;
	}
	,get_texture: function() {
		if(this.useOldTexture) return (this.__swapped?this.__texture0:this.__texture1).texture; else return (this.__swapped?this.__texture1:this.__texture0).texture;
	}
	,get___otherTexture: function() {
		if(this.__swapped) return this.__texture0; else return this.__texture1;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
	,__properties__: {get___otherTexture:"get___otherTexture",get_texture:"get_texture",get_framebuffer:"get_framebuffer",set_oldRenderTexture:"set_oldRenderTexture",get_oldRenderTexture:"get_oldRenderTexture",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture"}
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) powerOfTwo = true;
	if(smoothing == null) smoothing = true;
	this.powerOfTwo = true;
	this.gl = gl;
	this.powerOfTwo = powerOfTwo;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	gl: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,smoothing: null
	,width: null
	,height: null
	,powerOfTwo: null
	,__width: null
	,__height: null
	,__uvData: null
	,clear: function(r,g,b,a,mask) {
		if(a == null) a = 0;
		if(b == null) b = 0;
		if(g == null) g = 0;
		if(r == null) r = 0;
		this.gl.clearColor(r,g,b,a);
		this.gl.clear(mask == null?this.gl.COLOR_BUFFER_BIT:mask);
	}
	,destroy: function() {
		if(this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
		if(this.texture != null) this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var pow2W = width;
		var pow2H = height;
		if(this.powerOfTwo) {
			pow2W = this.powOfTwo(width);
			pow2H = this.powOfTwo(height);
		}
		var lastW = this.__width;
		var lastH = this.__height;
		this.__width = pow2W;
		this.__height = pow2H;
		this.createUVs();
		if(lastW == pow2W && lastH == pow2H) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.__width,this.__height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,this.__width,this.__height);
	}
	,createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		var w = this.width / this.__width;
		var h = this.height / this.__height;
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = w;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = w;
		this.__uvData.y2 = h;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = h;
	}
	,powOfTwo: function(value) {
		var n = 1;
		while(n < value) n <<= 1;
		return n;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.colorTransform = new openfl_geom_ColorTransform();
	this.uvs = new openfl_display_TextureUvs();
	this.matrix = new openfl_geom_Matrix();
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,matrix: null
	,uvs: null
	,colorTransform: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.colorTransform = null;
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) this.stop();
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,flashShader,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		this.prepareShader(flashShader,bitmapData);
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,flashShader,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,flashShader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var useRGBOffset = (flags & 128) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = 0;
			break;
		case 131072:
			blendMode = 9;
			break;
		case 262144:
			blendMode = 12;
			break;
		case 524288:
			blendMode = 14;
			break;
		default:
			var _g1 = flags & 15728640;
			switch(_g1) {
			case 1048576:
				blendMode = 2;
				break;
			case 2097152:
				blendMode = 8;
				break;
			case 4194304:
				blendMode = 11;
				break;
			case 8388608:
				blendMode = 5;
				break;
			default:
				var _g2 = flags & 251658240;
				switch(_g2) {
				case 16777216:
					blendMode = 3;
					break;
				case 33554432:
					blendMode = 6;
					break;
				default:
					blendMode = 10;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var rgbOffsetIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		if(useRGBOffset) {
			rgbOffsetIndex = numValues;
			numValues += 4;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = Math.ceil(totalCount / numValues);
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var oMatrix = object.__worldTransform;
		var bIndex = 0;
		var tMa = 1.0;
		var tMb = 0.0;
		var tMc = 0.0;
		var tMd = 1.0;
		var tMtx = 0.0;
		var tMty = 0.0;
		var oMa = oMatrix.a;
		var oMb = oMatrix.b;
		var oMc = oMatrix.c;
		var oMd = oMatrix.d;
		var oMtx = oMatrix.tx;
		var oMty = oMatrix.ty;
		var rx = 0.0;
		var ry = 0.0;
		var rw = 0.0;
		var rh = 0.0;
		var tuvx = 0.0;
		var tuvy = 0.0;
		var tuvw = 0.0;
		var tuvh = 0.0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		this.prepareShader(flashShader,null);
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else center.setTo(0,0);
				rw = rect.width;
				rh = rect.height;
				tuvx = rect.get_left() / sheet.__bitmap.width;
				tuvy = rect.get_top() / sheet.__bitmap.height;
				tuvw = rect.get_right() / sheet.__bitmap.width;
				tuvh = rect.get_bottom() / sheet.__bitmap.height;
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
				if(rect != null) {
					rw = rect.width;
					rh = rect.height;
					tuvx = tileUV.x;
					tuvy = tileUV.y;
					tuvw = tileUV.width;
					tuvh = tileUV.height;
				}
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				var wct = object.__worldColorTransform;
				this.colorTransform.redMultiplier = wct.redMultiplier;
				this.colorTransform.greenMultiplier = wct.greenMultiplier;
				this.colorTransform.blueMultiplier = wct.blueMultiplier;
				this.colorTransform.alphaMultiplier = wct.alphaMultiplier;
				this.colorTransform.redOffset = wct.redOffset;
				this.colorTransform.greenOffset = wct.greenOffset;
				this.colorTransform.blueOffset = wct.blueOffset;
				this.colorTransform.alphaOffset = wct.alphaOffset;
				if(useRGBOffset) {
					this.colorTransform.redOffset += tileData[iIndex + rgbOffsetIndex];
					this.colorTransform.greenOffset += tileData[iIndex + rgbOffsetIndex + 1];
					this.colorTransform.blueOffset += tileData[iIndex + rgbOffsetIndex + 2];
					this.colorTransform.alphaOffset += tileData[iIndex + rgbOffsetIndex + 3];
				}
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				tMa = (a * oMa + b * oMc) * rw;
				tMb = (a * oMb + b * oMd) * rw;
				tMc = (c * oMa + d * oMc) * rh;
				tMd = (c * oMb + d * oMd) * rh;
				tMtx = tx * oMa + ty * oMc + oMtx;
				tMty = tx * oMb + ty * oMd + oMty;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				this.positions[bIndex] = tMtx;
				this.positions[bIndex + 1] = tMty;
				this.positions[bIndex + 5] = tMa + tMtx;
				this.positions[bIndex + 6] = tMb + tMty;
				this.positions[bIndex + 10] = tMa + tMc + tMtx;
				this.positions[bIndex + 11] = tMd + tMb + tMty;
				this.positions[bIndex + 15] = tMc + tMtx;
				this.positions[bIndex + 16] = tMd + tMty;
				var val;
				var val1;
				var val2 = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
				val1 = this.colors[bIndex + 14] = val2;
				val = this.colors[bIndex + 9] = val1;
				this.colors[bIndex + 4] = val;
				this.positions[bIndex + 2] = tuvx;
				this.positions[bIndex + 3] = tuvy;
				this.positions[bIndex + 7] = tuvw;
				this.positions[bIndex + 8] = tuvy;
				this.positions[bIndex + 12] = tuvw;
				this.positions[bIndex + 13] = tuvh;
				this.positions[bIndex + 17] = tuvx;
				this.positions[bIndex + 18] = tuvh;
				this.writtenVertexBytes = bIndex + 20;
				this.setState(this.batchedSprites,texture,smooth,blendMode,this.colorTransform,flashShader,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,color,pixelSnapping) {
		if(color == null) color = -1;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == 2) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			var val = Math.round(tx);
			this.positions[index] = val;
			var val1 = Math.round(ty);
			this.positions[index + 1] = val1;
			var val2 = Math.round(a * width + tx);
			this.positions[index + 5] = val2;
			var val3 = Math.round(b * width + ty);
			this.positions[index + 6] = val3;
			var val4 = Math.round(a * width + c * height + tx);
			this.positions[index + 10] = val4;
			var val5 = Math.round(d * height + b * width + ty);
			this.positions[index + 11] = val5;
			var val6 = Math.round(c * height + tx);
			this.positions[index + 15] = val6;
			var val7 = Math.round(d * height + ty);
			this.positions[index + 16] = val7;
		}
		if(this.enableColor) {
			var val8;
			var val9;
			var val10 = this.colors[index + 19] = color;
			val9 = this.colors[index + 14] = val10;
			val8 = this.colors[index + 9] = val9;
			this.colors[index + 4] = val8;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.renderSession.activeTextures = 1;
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = null;
		this.currentState.shaderData = null;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.shaderData = nextState.shaderData;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.skipColorTransform = nextState.skipColorTransform;
				if(this.currentState.skipColorTransform) this.currentState.colorTransform = null; else this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null?shader.blendMode:state.blendMode);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),1);
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),0);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),0,0,0,0);
		}
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"),0);
		if(shader.smooth != null && shader.smooth || state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,shader.wrapS);
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,shader.wrapT);
		shader.applyData(state.shaderData,this.renderSession);
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,shader,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.skipColorTransform = colorTransform != null && colorTransform.__isDefault();
		if(!state.skipColorTransform) {
			state.colorTransform.redMultiplier = colorTransform.redMultiplier;
			state.colorTransform.greenMultiplier = colorTransform.greenMultiplier;
			state.colorTransform.blueMultiplier = colorTransform.blueMultiplier;
			state.colorTransform.alphaMultiplier = colorTransform.alphaMultiplier;
			state.colorTransform.redOffset = colorTransform.redOffset;
			state.colorTransform.greenOffset = colorTransform.greenOffset;
			state.colorTransform.blueOffset = colorTransform.blueOffset;
			state.colorTransform.alphaOffset = colorTransform.alphaOffset;
		}
		state.skipColorTransformAlpha = skipAlpha;
		if(shader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = shader.__shader;
			state.shaderData = shader.data;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,prepareShader: function(flashShader,bd) {
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
			var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
			if(bd != null) {
				objSize.value[0] = bd.width;
				objSize.value[1] = bd.height;
				if(bd.__pingPongTexture != null) {
					texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
					texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
				} else {
					texSize.value[0] = bd.width;
					texSize.value[1] = bd.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.skipColorTransform = false;
	this.colorTransform = new openfl_geom_ColorTransform();
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,shaderData: null
	,equals: function(other) {
		return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.skipColorTransform && other.skipColorTransform || !this.skipColorTransform && !other.skipColorTransform && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tileDataLength: null
	,__tilesheets: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.length + 1) return null;
		if(this.lineBreaks.length == 0) return this.text; else return this.text.substring(index > 0?this.lineBreaks[index - 1]:0,this.lineBreaks[index]);
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.length - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges[rangeIndex];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				lineIndex++;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			lineIndex++;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g11 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
			}
		} else {
			if(textIndex >= formatRange.end) break;
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var advances4 = [];
			var _g6 = textIndex;
			while(_g6 < formatRange.end) {
				var i4 = _g6++;
				advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances4;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances5 = layoutGroup.advances;
			var width2 = 0.0;
			var _g7 = 0;
			while(_g7 < advances5.length) {
				var advance2 = advances5[_g7];
				++_g7;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
					break;
				case 4:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = 1;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			this.__cacheGL(renderSession);
			return;
		}
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.__shader,this.pixelSnapping);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__cacheAsBitmap: null
	,__blendMode: null
	,__shader: null
	,__buffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureImage: null
	,__pingPongTexture: null
	,__usingPingPongTexture: null
	,__uvData: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		filter.__applyFilter(this.image.buffer.__srcImageData,sourceBitmapData.image.buffer.__srcImageData,sourceRect,destPoint);
		this.image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingPingPongTexture = false;
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.__isValid == false || otherBitmapData.__isValid == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingPingPongTexture = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingPingPongTexture = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		if(colorTransform != null) {
			var copy = new openfl_display_BitmapData(Reflect.getProperty(source,"width"),Reflect.getProperty(source,"height"),true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null?matrix:new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) renderSession.maskManager.popMask();
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality));
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		if(this.transparent && (color & -16777216) == 0) color = 0;
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingPingPongTexture = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.floodFill(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,(function($this) {
				var $r;
				var this1;
				if(data != null) this1 = new Float32Array(data); else this1 = null;
				$r = this1;
				return $r;
			}(this)),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) color1 = 0;
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingPingPongTexture = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		var rand;
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return Std["int"](Math.abs(randomSeed / 65536)) % 32768;
		};
		rand = func;
		rand();
		var range = high - low;
		var data = new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					red = green = blue = low + rand() % range;
					alpha = 255;
				} else {
					if(redChannel) red = low + rand() % range;
					if(greenChannel) green = low + rand() % range;
					if(blueChannel) blue = low + rand() % range;
					if(alphaChannel) alpha = low + rand() % range;
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) return;
		this.image.scroll(x,y);
		this.__usingPingPongTexture = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel32(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
		this.__usingPingPongTexture = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) y3 = 1;
		if(x3 == null) x3 = 0;
		if(y2 == null) y2 = 1;
		if(x2 == null) x2 = 1;
		if(y1 == null) y1 = 0;
		if(x1 == null) x1 = 1;
		if(y0 == null) y0 = 0;
		if(x0 == null) x0 = 0;
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__drawGL: function(renderSession,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels,powerOfTwo) {
		if(powerOfTwo == null) powerOfTwo = true;
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession,this.__pingPongTexture,this.rect,smoothing,this.transparent,clearBuffer,powerOfTwo);
		openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession,drawSelf?this:null,source,matrix,colorTransform,blendMode,clipRect);
		openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession,readPixels?this.image:null);
		var uv = this.__pingPongTexture.get_renderTexture().__uvData;
		this.__createUVs(uv.x0,uv.y0,uv.x1,uv.y1,uv.x2,uv.y2,uv.x3,uv.y3);
		this.__isValid = true;
		this.__usingPingPongTexture = true;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g2 = 0;
				var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode,this.__shader);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,reset: function() {
		this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
	}
	,__class__: openfl_display_TextureUvs
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__hardware: null
	,__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__image: null
	,__positionX: null
	,__positionY: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		if(sourceGraphics.__bounds != null) this.__bounds = sourceGraphics.__bounds.clone(); else this.__bounds = null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.length) {
			var graphics = graphicsData.data[_g];
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) this.endFill();
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) winding = "evenOdd";
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.length) {
				var command = commands.data[_g];
				++_g;
				if(command != null) switch(command) {
				case 1:
					this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
					dataIndex += 6;
					break;
				default:
				} else {
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useColorTransform = (flags & 128) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) totalCount = tileData.length;
		if(useTransform || useScale || useRotation || useRGB || useAlpha || useColorTransform) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
			if(useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if(useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) numValues += 3;
			if(useAlpha) numValues++;
			if(useColorTransform) numValues += 4;
			var itemCount = totalCount / numValues | 0;
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) id = tileData[index + 2] | 0; else id = -1;
				scale = 1.0;
				rotation = 0.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useRotation) rotation = tileData[index + rotationIndex];
				if(id < 0) tile = null; else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) tilePoint.setTo(tileData[index + 6] / tile.width,tileData[index + 7] / tile.height); else tilePoint.setTo(0,0);
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) culling = 1;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = 1;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) miterLimit = 3;
		if(scaleMode == null) scaleMode = 2;
		if(pixelHinting == null) pixelHinting = false;
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = 0;
	if(spreadMethod == null) spreadMethod = 0;
	if(interpolationMethod == null) interpolationMethod = 1;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = "evenOdd";
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 3;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = anchorX;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = anchorY;
			}
			this5.length;
			var this7 = this.data;
			if(!this7.fixed) {
				this7.length++;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
				this7.data[this7.length - 1] = controlX;
			}
			this7.length;
			var this9 = this.data;
			if(!this9.fixed) {
				this9.length++;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
				this9.data[this9.length - 1] = controlY;
			}
			this9.length;
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = 0;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = 2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = 2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : true, __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			var path = request.url;
			openfl_display_BitmapData.fromFile(path,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 76, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 77, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	return false;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener("complete",$bind(this,this.sound_onComplete));
			sound1.addEventListener("ioError",$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener("complete",$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function(precision) {
	if(precision == null) precision = 1;
	this.__dirty = true;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.precision = 1;
	this.precision = precision;
	this.data = new haxe_ds_StringMap();
	var value = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uObjectSize,value);
	var value1 = new openfl_display_GLShaderParameter("vec2");
	this.data.set(openfl_display_Shader.uTextureSize,value1);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	precision: null
	,data: null
	,repeatX: null
	,repeatY: null
	,smooth: null
	,blendMode: null
	,__dirty: null
	,__fragmentCode: null
	,__vertexCode: null
	,__shader: null
	,__init: function(gl) {
		var dirty = this.__dirty;
		if(dirty) {
			if(this.__shader != null) this.__shader.destroy();
			this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
			if(this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode; else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
			this.__shader.fragmentString = this.__fragmentCode;
			this.__dirty = false;
		}
		this.__shader.init(dirty);
	}
	,__buildFragmentCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.fragmentHeader);
		output.push(code);
		this.__fragmentCode = output.join("\n");
	}
	,__buildVertexCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		output.push((function($this) {
			var $r;
			var _g = $this.precision;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 2:
					$r = "precision highp float;";
					break;
				case 1:
					$r = "precision mediump float;";
					break;
				default:
					$r = "precision lowp float;";
				}
				return $r;
			}($this));
			return $r;
		}(this)));
		output.push("#endif");
		output = output.concat(openfl_display_Shader.vertexHeader);
		output.push(code);
		this.__vertexCode = output.join("\n");
	}
	,__class__: openfl_display_Shader
};
var openfl_display_GLShaderParameter = function(type,arraySize) {
	this.internalType = 0;
	this.transpose = false;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.smooth = false;
	this.arraySize = 0;
	this.size = 0;
	this.type = type;
	if(arraySize == null) this.arraySize = 0; else this.arraySize = arraySize;
	this.__init();
};
$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
openfl_display_GLShaderParameter.__name__ = ["openfl","display","GLShaderParameter"];
openfl_display_GLShaderParameter.prototype = {
	type: null
	,size: null
	,arraySize: null
	,value: null
	,bitmap: null
	,smooth: null
	,repeatX: null
	,repeatY: null
	,transpose: null
	,internalType: null
	,__init: function() {
		var _g = this.type;
		var v = _g;
		var m = _g;
		switch(_g) {
		case "bool":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "int":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "float":
			this.internalType = 2;
			this.size = 1;
			if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			this.value = [0.0];
			break;
		case "sampler2D":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s;
				this.set_value((function($this) {
					var $r;
					var _g1 = [];
					{
						var _g3 = 0;
						var _g2 = $this.size;
						while(_g3 < _g2) {
							var i = _g3++;
							_g1.push(0.0);
						}
					}
					$r = _g1;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s1 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s1;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g11 = this.size;
				switch(_g11) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		case "samplerCube":
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s2 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s2;
				this.set_value((function($this) {
					var $r;
					var _g12 = [];
					{
						var _g31 = 0;
						var _g21 = $this.size;
						while(_g31 < _g21) {
							var i1 = _g31++;
							_g12.push(0.0);
						}
					}
					$r = _g12;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s3 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s3;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g13 = this.size;
				switch(_g13) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		default:
			if(v.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) this.internalType = 1; else this.internalType = 2;
				var s4 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s4;
				this.set_value((function($this) {
					var $r;
					var _g14 = [];
					{
						var _g32 = 0;
						var _g22 = $this.size;
						while(_g32 < _g22) {
							var i2 = _g32++;
							_g14.push(0.0);
						}
					}
					$r = _g14;
					return $r;
				}(this)));
			} else if(m.indexOf("mat") > -1) {
				this.internalType = 3;
				var s5 = Std.parseInt(this.type.charAt(this.type.length - 1));
				this.size = s5;
				if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				var _g15 = this.size;
				switch(_g15) {
				case 2:
					this.value = [1,0,1,0];
					break;
				case 3:
					this.value = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					this.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					this.value = [0];
				}
			} else {
				this.internalType = 0;
				haxe_Log.trace("Can't initialize value for type " + this.type,{ fileName : "Shader.hx", lineNumber : 307, className : "openfl.display.GLShaderParameter", methodName : "__init"});
			}
		}
	}
	,set_value: function(v) {
		if(this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		return this.value = v;
	}
	,set_bitmap: function(v) {
		if(this.internalType != 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
		return this.bitmap = v;
	}
	,__class__: openfl_display_GLShaderParameter
	,__properties__: {set_bitmap:"set_bitmap",set_value:"set_value"}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event("deactivate");
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event("activate");
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				var element = _g[2];
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
				break;
			case 4:
				var cairo = _g[2];
				this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
				break;
			case 5:
				var ctx = _g[2];
				this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth,this.stageHeight,ctx);
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event("deactivate");
		this.__broadcast(event,true);
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent("focusIn",true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent("focusOut",true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) return;
		if(this.__displayState == 2) this.__displayState = 1;
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		if(this.__displayState != 2 && !window.__fullscreen) this.__displayState = 2;
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) this.__renderer.resize(this.stageWidth,this.stageHeight);
		var event = new openfl_events_Event("resize");
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event("enterFrame"),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event("render"),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			{
				var _g = renderer.context;
				switch(_g[1]) {
				case 4:
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
					break;
				default:
				}
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCanceled) return;
			}
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
			if(event.__isCanceled) return;
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCanceled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == "keyDown") this.window.onKeyDown.cancel(); else this.window.onKeyUp.cancel();
			}
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var clickType = null;
		switch(type) {
		case "mouseDown":
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
			this.__mouseDownLeft = target;
			break;
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) clickType = "click";
			this.__mouseDownLeft = null;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) clickType = "middleClick";
			this.__mouseDownMiddle = null;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) clickType = "rightClick";
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var event;
		var localPoint;
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				localPoint = target2.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,target2);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener("mouseOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("mouseOut")) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value) {
		case 2:
			if(this.window.__fullscreen) {
				this.window.set_fullscreen(false);
				this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
			break;
		default:
			if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		var _g = this;
		if(openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function() {
			_g.context3D = new openfl_display3D_Context3D();
			_g.dispatchEvent(new openfl_events_Event("context3DCreate"));
		},1); else haxe_Timer.delay(function() {
			_g.dispatchEvent(new openfl_events_ErrorEvent("error"));
		},1);
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,null,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this.stencilCompareMode = 519;
	this.stencilRef = 0;
	this.stencilReadMask = 255;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
	lime_graphics_opengl_GL.context.pixelStorei(37440,1);
	lime_graphics_opengl_GL.context.pixelStorei(37441,1);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(this,lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var indexBuffer = new openfl_display3D_IndexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numIndices,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(this,lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,__deleteTexture: function(texture) {
		if(texture.glTexture == null) return;
		HxOverrides.remove(this.texturesCreated,texture);
		lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
		texture.glTexture = null;
	}
	,__deleteVertexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.vertexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteIndexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.indexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteProgram: function(program) {
		if(program.glProgram == null) return;
		HxOverrides.remove(this.programsCreated,program);
		lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
		program.glProgram = null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,(function($this) {
			var $r;
			var array;
			{
				var this2 = matrix.rawData;
				var value = [];
				var _g1 = 0;
				var _g = this2.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this2.data[i]);
				}
				array = value;
			}
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			if(openfl_display3D_Context3D.supportsAnisotropy) {
				openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
				lime_graphics_opengl_GL.context.texParameteri(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,openfl_display3D_Context3D.maxSupportedAnisotropy);
			}
			openfl_display3D_Context3D.anisotropySupportTested = true;
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var tex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				tex.mipmapsGenerated = true;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var cubetex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(34067);
				cubetex.mipmapsGenerated = true;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DBufferUsage = $hxClasses["openfl.display3D.Context3DBufferUsage"] = { __ename__ : true, __constructs__ : ["STATIC_DRAW","DYNAMIC_DRAW"] };
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = ["STATIC_DRAW",0];
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = ["DYNAMIC_DRAW",1];
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(context,glBuffer,numIndices,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	context: null
	,glBuffer: null
	,numIndices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteIndexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		var this1;
		if(length != null) this1 = new Int16Array(length); else this1 = null;
		indices = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			indices[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indices = this1;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromInt16Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.bufferUsage);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context,program) {
	this.context = context;
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	context: null
	,glProgram: null
	,dispose: function() {
		this.context.__deleteProgram(this);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(context,glBuffer,numVertices,data32PerVertex,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	context: null
	,data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteVertexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			float32Array[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
	}
	,uploadFromFloat32Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.bufferUsage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.context = context;
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context: null
	,height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		this.context.__deleteTexture(this);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,size,size);
	this.size = size;
	this.mipmapsGenerated = false;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	size: null
	,_textures: null
	,mipmapsGenerated: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(bitmapData.image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	this.mipmapsGenerated = false;
	if(openfl_display3D_textures_Texture.internalFormat == -1) openfl_display3D_textures_Texture.internalFormat = 6408;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,mipmapsGenerated: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source;
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,openfl_display3D_textures_Texture.internalFormat,this.width,this.height,0,openfl_display3D_textures_Texture.internalFormat,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
	this.__saveLastFilter = false;
	this.__passes = 0;
	this.__dirty = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__tmpRenderTexture = null;
openfl_filters_BitmapFilter.__applyFilters = function(filters,renderSession,source,target,sourceRect,destPoint) {
	var same = target == source && target.__usingPingPongTexture;
	if(same) target.__pingPongTexture.useOldTexture = true;
	if(sourceRect == null) sourceRect = source.rect;
	var lastFilterOutput = null;
	var useLastFilter = false;
	var srcShader = source.__shader;
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		useLastFilter = false;
		if(filter.__saveLastFilter) {
			target.__pingPongTexture.swap();
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,true);
			lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
			target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
		}
		var _g2 = 0;
		var _g1 = filter.__passes;
		while(_g2 < _g1) {
			var pass = _g2++;
			useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
			if(same && !useLastFilter) target.__pingPongTexture.swap();
			if(useLastFilter) {
				openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
				target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
			}
			source.__shader = filter.__preparePass(pass);
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,!useLastFilter);
		}
	}
	source.__shader = srcShader;
	if(same) target.__pingPongTexture.useOldTexture = false;
};
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		filter.__growBounds(r);
	}
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
openfl_filters_BitmapFilter.prototype = {
	__dirty: null
	,__passes: null
	,__saveLastFilter: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__growBounds: function(rect) {
	}
	,__preparePass: function(pass) {
		return null;
	}
	,__useLastFilter: function(pass) {
		return false;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
	this.__passes = 1;
	this.set_matrix(matrix);
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,__colorMatrixShader: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
		var source = sourceData.data;
		var target = targetData.data;
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceData.width * 4;
		var targetStride = targetData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				target[targetOffset] = this.matrix[0] * srcR + this.matrix[1] * srcG + this.matrix[2] * srcB + this.matrix[3] * srcA + this.matrix[4] | 0;
				target[targetOffset + 1] = this.matrix[5] * srcR + this.matrix[6] * srcG + this.matrix[7] * srcB + this.matrix[8] * srcA + this.matrix[9] | 0;
				target[targetOffset + 2] = this.matrix[10] * srcR + this.matrix[11] * srcG + this.matrix[12] * srcB + this.matrix[13] * srcA + this.matrix[14] | 0;
				target[targetOffset + 3] = this.matrix[15] * srcR + this.matrix[16] * srcG + this.matrix[17] * srcB + this.matrix[18] * srcA + this.matrix[19] | 0;
			}
		}
	}
	,__preparePass: function(pass) {
		return this.__colorMatrixShader;
	}
	,set_matrix: function(value) {
		if(value == null) value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	this.__uOffsets = new openfl_display_GLShaderParameter("vec4",0);
	this.__uMultipliers = new openfl_display_GLShaderParameter("mat4",0);
	this.fragment = ["uniform mat4 uMultipliers;","uniform vec4 uOffsets;","void main(void) {","\tvec4 color = texture2D(" + openfl_display_Shader.uSampler + ", " + openfl_display_Shader.vTexCoord + ");","\tcolor = vec4(color.rgb / color.a, color.a);","\tcolor = uOffsets + color * uMultipliers;","\tcolor = vec4(color.rgb * color.a, color.a);","\tgl_FragColor = color;","}"];
	openfl_display_Shader.call(this);
	this.data.set("uMultipliers",this.__uMultipliers);
	this.data.set("uOffsets",this.__uOffsets);
	this.__buildFragmentCode("uniform mat4 uMultipliers;\nuniform vec4 uOffsets;\nvoid main(void) {\n\tvec4 color = texture2D(" + openfl_display_Shader.uSampler + ", " + openfl_display_Shader.vTexCoord + ");\n\tcolor = vec4(color.rgb / color.a, color.a);\n\tcolor = uOffsets + color * uMultipliers;\n\tcolor = vec4(color.rgb * color.a, color.a);\n\tgl_FragColor = color;\n}");
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	fragment: null
	,__uMultipliers: null
	,get_uMultipliers: function() {
		return this.__uMultipliers.value;
	}
	,set_uMultipliers: function(v) {
		return this.__uMultipliers.set_value(v);
	}
	,__uOffsets: null
	,get_uOffsets: function() {
		return this.__uOffsets.value;
	}
	,set_uOffsets: function(v) {
		return this.__uOffsets.set_value(v);
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
	,__properties__: {set_uOffsets:"set_uOffsets",get_uOffsets:"get_uOffsets",set_uMultipliers:"set_uMultipliers",get_uMultipliers:"get_uMultipliers"}
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var length = vector.length - index;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = vector.data[i + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var _g1 = 0;
		var _g = this.rawData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = i + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[i];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = 1;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = vup.crossProduct(dir);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = 1;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,0)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,0)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.length) {
			x = vin.data[i];
			y = vin.data[i + 1];
			z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5],value.rawData.data[4]) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.data[0];
			this.__displayObject.__transform.b = value.rawData.data[1];
			this.__displayObject.__transform.c = value.rawData.data[5];
			this.__displayObject.__transform.d = value.rawData.data[6];
			this.__displayObject.__transform.tx = value.rawData.data[12];
			this.__displayObject.__transform.ty = value.rawData.data[13];
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var pan = sndTransform.pan;
		if(pan == 0) pan = -0.0000001;
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent("ioError")); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 1000;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(1);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g) {
			case 0:
				uri = js_Boot.__cast(data1 , ArrayBuffer);
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g) {
		case 0:
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event("complete");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent("ioError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event("open");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent("progress");
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent("securityError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent("httpStatus",false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == 0 && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = 1; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString(1);
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString(this.method) == 1 || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$ = {};
$hxClasses["openfl.net._URLRequestMethod.URLRequestMethod_Impl_"] = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.__name__ = ["openfl","net","_URLRequestMethod","URLRequestMethod_Impl_"];
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "DELETE":
		return 0;
	case "GET":
		return 1;
	case "HEAD":
		return 2;
	case "OPTIONS":
		return 3;
	case "POST":
		return 4;
	case "PUT":
		return 5;
	default:
		return null;
	}
};
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "DELETE";
	case 1:
		return "GET";
	case 2:
		return "HEAD";
	case 3:
		return "OPTIONS";
	case 4:
		return "POST";
	case 5:
		return "PUT";
	default:
		return null;
	}
};
var openfl_net_URLVariables = function(source) {
	if(source != null) this.decode(source);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.totalMemory = null;
openfl_system_System.vmVersion = null;
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented("System.pause");
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented("System.resume");
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) length = 0;
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) return bytes; else return openfl_utils_ByteArrayData.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray),byteArray.b.bufferValue);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) this1.__resize(value);
	this1.__length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = haxe_io_Bytes.alloc(length);
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.__length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		this.__length = this.length;
		this.position = this.__length;
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) return this.get(this.position++) != 0; else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return false;
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) return value - 256; else return value;
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(length == 0) length = this.__length - this.position;
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		if(bytes.__length < offset + length) bytes.__resize(offset + length);
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.position + 8 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 8;
		return this.getDouble(this.position - 8);
	}
	,readFloat: function() {
		if(this.position + 4 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += 4;
		return this.getFloat(this.position - 4);
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) value = ch2 << 8 | ch1; else value = ch1 << 8 | ch2;
		if((value & 32768) != 0) return value - 65536; else return value;
	}
	,readUnsignedByte: function() {
		if(this.position < this.__length) return this.get(this.position++); else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return 0;
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) return (ch2 << 8) + ch1; else return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		this.__setData(format_tools_Inflate.run(this));
		this.__length = this.length;
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
		if(length == 0) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
			length = a - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		this.__resize(this.position + 8);
		this.setDouble(this.position,value);
		this.position += 8;
	}
	,writeFloat: function(value) {
		this.__resize(this.position + 4);
		this.setFloat(this.position,value);
		this.position += 4;
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 24);
		} else {
			this.set(this.position++,value >> 24);
			this.set(this.position++,value >> 16);
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.length) {
			var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
			bytes.blit(0,this,0,this.length);
			this.b = bytes.b;
			this.length = bytes.length;
			this.data = bytes.data;
		}
		if(this.__length < size) this.__length = size;
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.__length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name);
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c;
	if(this1 == null) c = null; else c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) return true;
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) fields = [];
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name) && Std["is"](Reflect.field(this1,name),haxe_lang_Iterable);
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var org_zamedev_particles_Particle = function() {
	this.position = { x : 0.0, y : 0.0};
	this.direction = { x : 0.0, y : 0.0};
	this.startPos = { x : 0.0, y : 0.0};
	this.color = { r : 0.0, g : 0.0, b : 0.0, a : 0.0};
	this.colorDelta = { r : 0.0, g : 0.0, b : 0.0, a : 0.0};
};
$hxClasses["org.zamedev.particles.Particle"] = org_zamedev_particles_Particle;
org_zamedev_particles_Particle.__name__ = ["org","zamedev","particles","Particle"];
org_zamedev_particles_Particle.prototype = {
	startPos: null
	,position: null
	,direction: null
	,color: null
	,colorDelta: null
	,rotation: null
	,rotationDelta: null
	,radius: null
	,radiusDelta: null
	,angle: null
	,angleDelta: null
	,particleSize: null
	,particleSizeDelta: null
	,radialAcceleration: null
	,tangentialAcceleration: null
	,timeToLive: null
	,update: function(ps,dt) {
		this.timeToLive -= dt;
		if(this.timeToLive <= 0.0) return false;
		if(ps.emitterType == 1) {
			this.angle += this.angleDelta * dt;
			this.radius += this.radiusDelta * dt;
			this.position.x = this.startPos.x - Math.cos(this.angle) * this.radius;
			this.position.y = this.startPos.y - Math.sin(this.angle) * this.radius * ps.yCoordMultiplier;
		} else {
			var radial_x = 0.0;
			var radial_y = 0.0;
			this.position.x -= this.startPos.x;
			this.position.y = (this.position.y - this.startPos.y) * ps.yCoordMultiplier;
			if(this.position.x != 0.0 || this.position.y != 0.0) {
				var length = Math.sqrt(this.position.x * this.position.x + this.position.y * this.position.y);
				radial_x = this.position.x / length;
				radial_y = this.position.y / length;
			}
			var tangential_x = -radial_y;
			var tangential_y = radial_x;
			radial_x *= this.radialAcceleration;
			radial_y *= this.radialAcceleration;
			tangential_x *= this.tangentialAcceleration;
			tangential_y *= this.tangentialAcceleration;
			this.direction.x += (radial_x + tangential_x + ps.gravity.x) * dt;
			this.direction.y += (radial_y + tangential_y + ps.gravity.y) * dt;
			this.position.x += this.direction.x * dt + this.startPos.x;
			this.position.y = (this.position.y + this.direction.y * dt) * ps.yCoordMultiplier + this.startPos.y;
		}
		this.color.r += this.colorDelta.r * dt;
		this.color.g += this.colorDelta.g * dt;
		this.color.b += this.colorDelta.b * dt;
		this.color.a += this.colorDelta.a * dt;
		this.particleSize += this.particleSizeDelta * dt;
		this.particleSize = Math.max(0,this.particleSize);
		this.rotation += this.rotationDelta * dt;
		return true;
	}
	,__class__: org_zamedev_particles_Particle
};
var org_zamedev_particles_ParticleSystem = function() {
	this.active = false;
	this.restart = false;
	this.particleScaleX = 1.0;
	this.particleScaleY = 1.0;
	this.particleScaleSize = 1.0;
};
$hxClasses["org.zamedev.particles.ParticleSystem"] = org_zamedev_particles_ParticleSystem;
org_zamedev_particles_ParticleSystem.__name__ = ["org","zamedev","particles","ParticleSystem"];
org_zamedev_particles_ParticleSystem.prototype = {
	emitterType: null
	,maxParticles: null
	,positionType: null
	,duration: null
	,gravity: null
	,particleLifespan: null
	,particleLifespanVariance: null
	,speed: null
	,speedVariance: null
	,sourcePosition: null
	,sourcePositionVariance: null
	,angle: null
	,angleVariance: null
	,startParticleSize: null
	,startParticleSizeVariance: null
	,finishParticleSize: null
	,finishParticleSizeVariance: null
	,startColor: null
	,startColorVariance: null
	,finishColor: null
	,finishColorVariance: null
	,minRadius: null
	,minRadiusVariance: null
	,maxRadius: null
	,maxRadiusVariance: null
	,rotationStart: null
	,rotationStartVariance: null
	,rotationEnd: null
	,rotationEndVariance: null
	,radialAcceleration: null
	,radialAccelerationVariance: null
	,tangentialAcceleration: null
	,tangentialAccelerationVariance: null
	,rotatePerSecond: null
	,rotatePerSecondVariance: null
	,blendFuncSource: null
	,blendFuncDestination: null
	,textureBitmapData: null
	,active: null
	,restart: null
	,particleScaleX: null
	,particleScaleY: null
	,particleScaleSize: null
	,yCoordMultiplier: null
	,prevTime: null
	,emissionRate: null
	,emitCounter: null
	,elapsedTime: null
	,__particleList: null
	,__particleCount: null
	,__initialize: function() {
		if(this.blendFuncSource == 772) this.blendFuncSource = 1;
		if(this.blendFuncDestination == 772) this.blendFuncDestination = 1;
		this.prevTime = -1.0;
		this.emissionRate = this.maxParticles / Math.max(0.0001,this.particleLifespan);
		this.emitCounter = 0.0;
		this.elapsedTime = 0.0;
		this.__particleList = [];
		this.__particleCount = 0;
		var _g1 = 0;
		var _g = this.maxParticles;
		while(_g1 < _g) {
			var i = _g1++;
			this.__particleList[i] = new org_zamedev_particles_Particle();
		}
		return this;
	}
	,__update: function() {
		var currentTime = haxe_Timer.stamp();
		if(this.prevTime < 0.0) {
			this.prevTime = currentTime;
			return false;
		}
		var dt = currentTime - this.prevTime;
		if(dt < 0.0001) return false;
		this.prevTime = currentTime;
		if(this.active && this.emissionRate > 0.0) {
			var rate = 1.0 / this.emissionRate;
			this.emitCounter += dt;
			while(this.__particleCount < this.maxParticles && this.emitCounter > rate) {
				this.initParticle(this.__particleList[this.__particleCount]);
				this.__particleCount++;
				this.emitCounter -= rate;
			}
			if(this.emitCounter > rate) this.emitCounter = this.emitCounter % rate;
			this.elapsedTime += dt;
			if(this.duration >= 0.0 && this.duration < this.elapsedTime) this.stop();
		}
		var updated = false;
		if(this.__particleCount > 0) updated = true;
		var index = 0;
		while(index < this.__particleCount) {
			var particle = this.__particleList[index];
			if(particle.update(this,dt)) index++; else {
				if(index != this.__particleCount - 1) {
					var tmp = this.__particleList[index];
					this.__particleList[index] = this.__particleList[this.__particleCount - 1];
					this.__particleList[this.__particleCount - 1] = tmp;
				}
				this.__particleCount--;
			}
		}
		if(this.__particleCount > 0) updated = true; else if(this.restart) this.active = true;
		return updated;
	}
	,initParticle: function(p) {
		p.timeToLive = Math.max(0.0001,this.particleLifespan + this.particleLifespanVariance * (Math.random() * 2.0 - 1.0));
		p.startPos.x = this.sourcePosition.x / this.particleScaleX;
		p.startPos.y = this.sourcePosition.y / this.particleScaleY;
		p.color = { r : org_zamedev_particles_util_MathHelper.clamp(this.startColor.r + this.startColorVariance.r * (Math.random() * 2.0 - 1.0)), g : org_zamedev_particles_util_MathHelper.clamp(this.startColor.g + this.startColorVariance.g * (Math.random() * 2.0 - 1.0)), b : org_zamedev_particles_util_MathHelper.clamp(this.startColor.b + this.startColorVariance.b * (Math.random() * 2.0 - 1.0)), a : org_zamedev_particles_util_MathHelper.clamp(this.startColor.a + this.startColorVariance.a * (Math.random() * 2.0 - 1.0))};
		p.colorDelta = { r : (org_zamedev_particles_util_MathHelper.clamp(this.finishColor.r + this.finishColorVariance.r * (Math.random() * 2.0 - 1.0)) - p.color.r) / p.timeToLive, g : (org_zamedev_particles_util_MathHelper.clamp(this.finishColor.g + this.finishColorVariance.g * (Math.random() * 2.0 - 1.0)) - p.color.g) / p.timeToLive, b : (org_zamedev_particles_util_MathHelper.clamp(this.finishColor.b + this.finishColorVariance.b * (Math.random() * 2.0 - 1.0)) - p.color.b) / p.timeToLive, a : (org_zamedev_particles_util_MathHelper.clamp(this.finishColor.a + this.finishColorVariance.a * (Math.random() * 2.0 - 1.0)) - p.color.a) / p.timeToLive};
		p.particleSize = Math.max(0.0,this.startParticleSize + this.startParticleSizeVariance * (Math.random() * 2.0 - 1.0));
		p.particleSizeDelta = (Math.max(0.0,this.finishParticleSize + this.finishParticleSizeVariance * (Math.random() * 2.0 - 1.0)) - p.particleSize) / p.timeToLive;
		p.rotation = this.rotationStart + this.rotationStartVariance * (Math.random() * 2.0 - 1.0);
		p.rotationDelta = (this.rotationEnd + this.rotationEndVariance * (Math.random() * 2.0 - 1.0) - p.rotation) / p.timeToLive;
		var computedAngle = this.angle + this.angleVariance * (Math.random() * 2.0 - 1.0);
		var directionSpeed = this.speed + this.speedVariance * (Math.random() * 2.0 - 1.0);
		p.position.x = p.startPos.x + this.sourcePositionVariance.x * (Math.random() * 2.0 - 1.0);
		p.position.y = p.startPos.y + this.sourcePositionVariance.y * (Math.random() * 2.0 - 1.0);
		p.direction.x = Math.cos(computedAngle) * directionSpeed;
		p.direction.y = Math.sin(computedAngle) * directionSpeed;
		p.radialAcceleration = this.radialAcceleration + this.radialAccelerationVariance * (Math.random() * 2.0 - 1.0);
		p.tangentialAcceleration = this.tangentialAcceleration + this.tangentialAccelerationVariance * (Math.random() * 2.0 - 1.0);
		p.angle = computedAngle;
		p.angleDelta = (this.rotatePerSecond + this.rotatePerSecondVariance * (Math.random() * 2.0 - 1.0)) / p.timeToLive;
		p.radius = this.maxRadius + this.maxRadiusVariance * (Math.random() * 2.0 - 1.0);
		p.radiusDelta = (this.minRadius + this.minRadiusVariance * (Math.random() * 2.0 - 1.0) - p.radius) / p.timeToLive;
	}
	,emit: function(sourcePositionX,sourcePositionY) {
		if(sourcePositionX != null) this.sourcePosition.x = sourcePositionX;
		if(sourcePositionY != null) this.sourcePosition.y = sourcePositionY;
		this.active = true;
	}
	,stop: function() {
		this.active = false;
		this.elapsedTime = 0.0;
		this.emitCounter = 0.0;
	}
	,reset: function() {
		this.stop();
		var _g1 = 0;
		var _g = this.__particleCount;
		while(_g1 < _g) {
			var i = _g1++;
			this.__particleList[i].timeToLive = 0.0;
		}
	}
	,__class__: org_zamedev_particles_ParticleSystem
};
var org_zamedev_particles_internal_tiff_TiffDecoder = function(data) {
	if(data.length < 8) throw new js__$Boot_HaxeError("invalid header: size");
	this.data = data;
	if(data.b[0] == 77 && data.b[1] == 77) this.isBigEndian = true; else if(data.b[0] == 73 && data.b[1] == 73) this.isBigEndian = false; else throw new js__$Boot_HaxeError("invalid header: Identifier");
	if(this.getUShort(2) != 42) throw new js__$Boot_HaxeError("invalid header: Version");
	this.ifdOffset = this.getULong(4);
	if(this.ifdOffset >= data.length) throw new js__$Boot_HaxeError("invalid header: IFDOffset");
};
$hxClasses["org.zamedev.particles.internal.tiff.TiffDecoder"] = org_zamedev_particles_internal_tiff_TiffDecoder;
org_zamedev_particles_internal_tiff_TiffDecoder.__name__ = ["org","zamedev","particles","internal","tiff","TiffDecoder"];
org_zamedev_particles_internal_tiff_TiffDecoder.decode = function(data) {
	var decoder = new org_zamedev_particles_internal_tiff_TiffDecoder(data);
	return decoder.run();
};
org_zamedev_particles_internal_tiff_TiffDecoder.prototype = {
	data: null
	,isBigEndian: null
	,ifdOffset: null
	,run: function() {
		return this.parseIfd(this.ifdOffset);
	}
	,parseIfd: function(pos) {
		var numDirEntries = this.getUShort(pos);
		pos += 2;
		var tagMap = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < numDirEntries) {
			var i = _g++;
			this.parseTag(pos,tagMap);
			pos += 12;
		}
		return this.parseImage(tagMap);
	}
	,parseImage: function(tagMap) {
		if(!tagMap.h.hasOwnProperty(256) || !tagMap.h.hasOwnProperty(257) || !tagMap.h.hasOwnProperty(262) || !tagMap.h.hasOwnProperty(273) || !tagMap.h.hasOwnProperty(279)) throw new js__$Boot_HaxeError("required tags are missing: ImageWidth | ImageLength | PhotometricInterpretation | StripOffsets | StripByteCounts");
		if(tagMap.h[262][0] != 2) throw new js__$Boot_HaxeError("PhotometricInterpretation must be = RGB");
		if(this.getOrDefault(tagMap,259,[1])[0] != 1) throw new js__$Boot_HaxeError("Compression must be = Uncompressed");
		if(this.getOrDefault(tagMap,274,[1])[0] != 1) throw new js__$Boot_HaxeError("Orientation must be = 1");
		if(this.getOrDefault(tagMap,284,[1])[0] != 1) throw new js__$Boot_HaxeError("PlanarConfiguration must be = Chunky");
		var imageLength = tagMap.h[257][0];
		var rowsPerStrip = this.getOrDefault(tagMap,278,[-1])[0];
		var stripsPerImage = (imageLength + rowsPerStrip - 1) / rowsPerStrip | 0;
		if(this.getOrDefault(tagMap,277,[1])[0] != 4) throw new js__$Boot_HaxeError("SamplesPerPixel must be = 4");
		if(!this.compareArray(this.getOrDefault(tagMap,258,[1,1,1,1]),[8,8,8,8])) throw new js__$Boot_HaxeError("BitsPerSample must be = [8, 8, 8, 8]");
		var sampleFormat = this.getOrDefault(tagMap,339,[1,1,1,1]);
		var _g1 = 0;
		var _g = sampleFormat.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(sampleFormat[i] == 4) sampleFormat[i] = 1;
		}
		if(!this.compareArray(sampleFormat,[1,1,1,1])) throw new js__$Boot_HaxeError("unsupported SampleFormat value");
		var extraSamples = this.getOrDefault(tagMap,338,[]);
		if(extraSamples.length != 1) throw new js__$Boot_HaxeError("ExtraSamples.length must be = 1");
		var extraSampleValue = extraSamples[0];
		if(extraSampleValue != 1 && extraSampleValue != 2) throw new js__$Boot_HaxeError("unsupported ExtraSamples value");
		var stripOffsets = tagMap.h[273];
		if(stripOffsets.length != stripsPerImage) throw new js__$Boot_HaxeError("invalid StripOffsets length");
		var stripByteCounts = tagMap.h[279];
		if(stripOffsets.length != stripsPerImage) throw new js__$Boot_HaxeError("invalid StripByteCounts length");
		var imageWidth = tagMap.h[256][0];
		var computedSize = Lambda.fold(stripByteCounts,function(a,b) {
			return a + b;
		},0);
		if(imageWidth * imageLength * 4 != computedSize) throw new js__$Boot_HaxeError("invalid StripByteCounts value");
		var _g2 = 0;
		while(_g2 < stripByteCounts.length) {
			var bc = stripByteCounts[_g2];
			++_g2;
			if(bc % 4 != 0) throw new js__$Boot_HaxeError("each StripByteCounts element must be dividable by 4");
		}
		var pixels = new openfl_utils_ByteArrayData(computedSize);
		pixels.position = 0;
		var ba = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.data);
		var _g3 = 0;
		while(_g3 < stripsPerImage) {
			var i1 = _g3++;
			ba.position = stripOffsets[i1];
			var count = stripByteCounts[i1] / 4 | 0;
			var _g11 = 0;
			while(_g11 < count) {
				var j = _g11++;
				var r = ba.readUnsignedByte();
				var g = ba.readUnsignedByte();
				var b1 = ba.readUnsignedByte();
				var a1 = ba.readUnsignedByte();
				pixels.writeByte(a1);
				pixels.writeByte(r);
				pixels.writeByte(g);
				pixels.writeByte(b1);
			}
		}
		pixels.position = 0;
		return { width : imageWidth, height : imageLength, pixels : pixels};
	}
	,getOrDefault: function(tagMap,tagId,def) {
		if(tagMap.h.hasOwnProperty(tagId)) return tagMap.h[tagId]; else return def;
	}
	,compareArray: function(a,b) {
		if(a.length != b.length) return false;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(a[i] != b[i]) return false;
		}
		return true;
	}
	,parseTag: function(pos,tagMap) {
		var tagId = this.getUShort(pos);
		switch(tagId) {
		case 256:case 257:case 258:case 259:case 262:case 273:case 274:case 277:case 278:case 279:case 284:case 338:case 339:
			var v = this.parseTagData(pos);
			tagMap.h[tagId] = v;
			v;
			break;
		default:
		}
	}
	,parseTagData: function(pos) {
		var dataType = this.getUShort(pos + 2);
		var dataCount = this.getULong(pos + 4);
		if(dataCount == 0) throw new js__$Boot_HaxeError("data count is zero");
		var sizeInBytes;
		sizeInBytes = dataCount * (function($this) {
			var $r;
			switch(dataType) {
			case 1:case 2:case 6:case 7:
				$r = 1;
				break;
			case 3:case 8:
				$r = 2;
				break;
			case 4:case 9:
				$r = 4;
				break;
			case 11:
				$r = (function($this) {
					var $r;
					throw new js__$Boot_HaxeError("unsupported data type: FLOAT");
					return $r;
				}($this));
				break;
			case 5:case 10:case 12:
				$r = (function($this) {
					var $r;
					throw new js__$Boot_HaxeError("unsupported data type: RATIONAL | SRATIONAL | DOUBLE");
					return $r;
				}($this));
				break;
			}
			return $r;
		}(this));
		var dataPos;
		if(sizeInBytes <= 4) dataPos = pos + 8; else dataPos = this.getULong(pos + 8);
		var result = [];
		var _g = 0;
		while(_g < dataCount) {
			var i = _g++;
			switch(dataType) {
			case 1:case 2:case 7:
				result.push(this.data.b[dataPos]);
				dataPos++;
				break;
			case 6:
				result.push(this.getSByte(dataPos));
				dataPos++;
				break;
			case 3:
				result.push(this.getUShort(dataPos));
				dataPos += 2;
				break;
			case 8:
				result.push(this.getSShort(dataPos));
				dataPos += 2;
				break;
			case 4:
				result.push(this.getULong(dataPos));
				dataPos += 4;
				break;
			case 9:
				result.push(this.getSLong(dataPos));
				dataPos += 4;
				break;
			default:
			}
		}
		return result;
	}
	,getSByte: function(pos) {
		var value = this.data.b[pos];
		if(value <= 127) return value; else return value - 256;
	}
	,getUShort: function(pos) {
		if(this.isBigEndian) return this.data.b[pos] << 8 | this.data.b[pos + 1]; else return this.data.b[pos] | this.data.b[pos + 1] << 8;
	}
	,getSShort: function(pos) {
		var value = this.getUShort(pos);
		if(value <= 32767) return value; else return value - 65536;
	}
	,getULong: function(pos) {
		if(this.isBigEndian) return this.data.b[pos] << 24 | this.data.b[pos + 1] << 16 | this.data.b[pos + 2] << 8 | this.data.b[pos + 3]; else return this.data.b[pos] | this.data.b[pos + 1] << 8 | this.data.b[pos + 2] << 16 | this.data.b[pos + 3] << 24;
	}
	,getSLong: function(pos) {
		var value = this.getULong(pos);
		if(value <= 2147483647) return value; else return value - 2147483647 - 2147483647 - 2;
	}
	,__class__: org_zamedev_particles_internal_tiff_TiffDecoder
};
var org_zamedev_particles_loaders_JsonParticleLoader = function() { };
$hxClasses["org.zamedev.particles.loaders.JsonParticleLoader"] = org_zamedev_particles_loaders_JsonParticleLoader;
org_zamedev_particles_loaders_JsonParticleLoader.__name__ = ["org","zamedev","particles","loaders","JsonParticleLoader"];
org_zamedev_particles_loaders_JsonParticleLoader.load = function(path) {
	var map = haxe_Json.parse(openfl_Assets.getText(path));
	var ps = new org_zamedev_particles_ParticleSystem();
	ps.emitterType = org_zamedev_particles_util_DynamicTools.asInt(map.emitterType);
	ps.maxParticles = org_zamedev_particles_util_DynamicTools.asInt(map.maxParticles);
	ps.positionType = 0;
	ps.duration = org_zamedev_particles_util_DynamicTools.asFloat(map.duration);
	ps.gravity = org_zamedev_particles_loaders_JsonParticleLoader.asVector(map,"gravity");
	ps.particleLifespan = org_zamedev_particles_util_DynamicTools.asFloat(map.particleLifespan);
	ps.particleLifespanVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.particleLifespanVariance);
	ps.speed = org_zamedev_particles_util_DynamicTools.asFloat(map.speed);
	ps.speedVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.speedVariance);
	ps.sourcePosition = { x : 0.0, y : 0.0};
	ps.sourcePositionVariance = org_zamedev_particles_loaders_JsonParticleLoader.asVector(map,"sourcePositionVariance");
	ps.angle = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.angle));
	ps.angleVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.angleVariance));
	ps.startParticleSize = org_zamedev_particles_util_DynamicTools.asFloat(map.startParticleSize);
	ps.startParticleSizeVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.startParticleSizeVariance);
	ps.finishParticleSize = org_zamedev_particles_util_DynamicTools.asFloat(map.finishParticleSize);
	ps.finishParticleSizeVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.finishParticleSizeVariance);
	ps.startColor = org_zamedev_particles_loaders_JsonParticleLoader.asColor(map,"startColor");
	ps.startColorVariance = org_zamedev_particles_loaders_JsonParticleLoader.asColor(map,"startColorVariance");
	ps.finishColor = org_zamedev_particles_loaders_JsonParticleLoader.asColor(map,"finishColor");
	ps.finishColorVariance = org_zamedev_particles_loaders_JsonParticleLoader.asColor(map,"finishColorVariance");
	ps.minRadius = org_zamedev_particles_util_DynamicTools.asFloat(map.minRadius);
	ps.minRadiusVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.minRadiusVariance);
	ps.maxRadius = org_zamedev_particles_util_DynamicTools.asFloat(map.maxRadius);
	ps.maxRadiusVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.maxRadiusVariance);
	ps.rotationStart = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotationStart));
	ps.rotationStartVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotationStartVariance));
	ps.rotationEnd = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotationEnd));
	ps.rotationEndVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotationEndVariance));
	ps.rotatePerSecond = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotatePerSecond));
	ps.rotatePerSecondVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(map.rotatePerSecondVariance));
	ps.radialAcceleration = org_zamedev_particles_util_DynamicTools.asFloat(map.radialAcceleration);
	ps.radialAccelerationVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.radialAccelVariance);
	ps.tangentialAcceleration = org_zamedev_particles_util_DynamicTools.asFloat(map.tangentialAcceleration);
	ps.tangentialAccelerationVariance = org_zamedev_particles_util_DynamicTools.asFloat(map.tangentialAccelVariance);
	ps.blendFuncSource = org_zamedev_particles_util_DynamicTools.asInt(map.blendFuncSource);
	ps.blendFuncDestination = org_zamedev_particles_util_DynamicTools.asInt(map.blendFuncDestination);
	ps.textureBitmapData = org_zamedev_particles_loaders_ParticleLoader.loadTexture(org_zamedev_particles_util_DynamicTools.asString(map.textureImageData),org_zamedev_particles_util_DynamicTools.asString(map.textureFileName),path);
	if(org_zamedev_particles_util_DynamicTools.asInt(map.yCoordFlipped) == 1) ps.yCoordMultiplier = -1.0; else ps.yCoordMultiplier = 1.0;
	return ps;
};
org_zamedev_particles_loaders_JsonParticleLoader.asVector = function(map,prefix) {
	return { x : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "x"]), y : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "y"])};
};
org_zamedev_particles_loaders_JsonParticleLoader.asColor = function(map,prefix) {
	return { r : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "Red"]), g : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "Green"]), b : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "Blue"]), a : org_zamedev_particles_util_DynamicTools.asFloat(map["" + prefix + "Alpha"])};
};
var org_zamedev_particles_loaders_ParticleLoader = function() { };
$hxClasses["org.zamedev.particles.loaders.ParticleLoader"] = org_zamedev_particles_loaders_ParticleLoader;
org_zamedev_particles_loaders_ParticleLoader.__name__ = ["org","zamedev","particles","loaders","ParticleLoader"];
org_zamedev_particles_loaders_ParticleLoader.load = function(path) {
	var ext = haxe_io_Path.extension(path).toLowerCase();
	switch(ext) {
	case "plist":
		return org_zamedev_particles_loaders_PlistParticleLoader.load(path);
	case "json":
		return org_zamedev_particles_loaders_JsonParticleLoader.load(path);
	case "pex":case "lap":
		return org_zamedev_particles_loaders_PexLapParticleLoader.load(path);
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported extension \"" + ext + "\""));
	}
};
org_zamedev_particles_loaders_ParticleLoader.loadTexture = function(textureImageData,textureFileName,path) {
	if(textureImageData == null || textureImageData.length == 0) return openfl_Assets.getBitmapData(haxe_io_Path.directory(path) + "/" + textureFileName);
	var data = haxe_crypto_Base64.decode(textureImageData);
	if(data.b[0] == 31 && data.b[1] == 139) {
		var reader = new format_gz_Reader(new haxe_io_BytesInput(data));
		data = reader.read().data;
	}
	var decoded = org_zamedev_particles_internal_tiff_TiffDecoder.decode(data);
	var result = new openfl_display_BitmapData(decoded.width,decoded.height,true,0);
	result.setPixels(new openfl_geom_Rectangle(0.0,0.0,decoded.width,decoded.height),decoded.pixels);
	return result;
};
var org_zamedev_particles_loaders_PexLapParticleLoader = function() { };
$hxClasses["org.zamedev.particles.loaders.PexLapParticleLoader"] = org_zamedev_particles_loaders_PexLapParticleLoader;
org_zamedev_particles_loaders_PexLapParticleLoader.__name__ = ["org","zamedev","particles","loaders","PexLapParticleLoader"];
org_zamedev_particles_loaders_PexLapParticleLoader.load = function(path) {
	var root = Xml.parse(openfl_Assets.getText(path)).firstElement();
	if((function($this) {
		var $r;
		if(root.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + root.nodeType);
		$r = root.nodeName;
		return $r;
	}(this)) != "particleEmitterConfig" && (function($this) {
		var $r;
		if(root.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + root.nodeType);
		$r = root.nodeName;
		return $r;
	}(this)) != "lanicaAnimoParticles") throw new js__$Boot_HaxeError(new openfl_errors_Error("Expecting \"particleEmitterConfig\" or \"lanicaAnimoParticles\", but \"" + (function($this) {
		var $r;
		if(root.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + root.nodeType;
		$r = root.nodeName;
		return $r;
	}(this)) + "\" found"));
	var map = new haxe_ds_StringMap();
	var $it0 = root.elements();
	while( $it0.hasNext() ) {
		var node = $it0.next();
		var k;
		if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
		k = node.nodeName;
		if(__map_reserved[k] != null) map.setReserved(k,node); else map.h[k] = node;
		node;
	}
	var ps = new org_zamedev_particles_ParticleSystem();
	ps.emitterType = org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode(__map_reserved.emitterType != null?map.getReserved("emitterType"):map.h["emitterType"]);
	ps.maxParticles = org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode(__map_reserved.maxParticles != null?map.getReserved("maxParticles"):map.h["maxParticles"]);
	ps.positionType = 0;
	ps.duration = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.duration != null?map.getReserved("duration"):map.h["duration"]);
	ps.gravity = org_zamedev_particles_loaders_PexLapParticleLoader.parseVectorNode(__map_reserved.gravity != null?map.getReserved("gravity"):map.h["gravity"]);
	ps.particleLifespan = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.particleLifeSpan != null?map.getReserved("particleLifeSpan"):map.h["particleLifeSpan"]);
	ps.particleLifespanVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.particleLifespanVariance != null?map.getReserved("particleLifespanVariance"):map.h["particleLifespanVariance"]);
	ps.speed = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.speed != null?map.getReserved("speed"):map.h["speed"]);
	ps.speedVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.speedVariance != null?map.getReserved("speedVariance"):map.h["speedVariance"]);
	ps.sourcePosition = org_zamedev_particles_loaders_PexLapParticleLoader.parseVectorNode(__map_reserved.sourcePosition != null?map.getReserved("sourcePosition"):map.h["sourcePosition"]);
	ps.sourcePositionVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseVectorNode(__map_reserved.sourcePositionVariance != null?map.getReserved("sourcePositionVariance"):map.h["sourcePositionVariance"]);
	ps.angle = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.angle != null?map.getReserved("angle"):map.h["angle"]));
	ps.angleVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.angleVariance != null?map.getReserved("angleVariance"):map.h["angleVariance"]));
	ps.startParticleSize = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.startParticleSize != null?map.getReserved("startParticleSize"):map.h["startParticleSize"]);
	ps.startParticleSizeVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.startParticleSizeVariance != null?map.getReserved("startParticleSizeVariance"):map.h["startParticleSizeVariance"]);
	ps.finishParticleSize = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.finishParticleSize != null?map.getReserved("finishParticleSize"):map.h["finishParticleSize"]);
	ps.finishParticleSizeVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.finishParticleSizeVariance != null?map.getReserved("finishParticleSizeVariance"):map.h["finishParticleSizeVariance"]);
	ps.startColor = org_zamedev_particles_loaders_PexLapParticleLoader.parseColorNode(__map_reserved.startColor != null?map.getReserved("startColor"):map.h["startColor"]);
	ps.startColorVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseColorNode(__map_reserved.startColorVariance != null?map.getReserved("startColorVariance"):map.h["startColorVariance"]);
	ps.finishColor = org_zamedev_particles_loaders_PexLapParticleLoader.parseColorNode(__map_reserved.finishColor != null?map.getReserved("finishColor"):map.h["finishColor"]);
	ps.finishColorVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseColorNode(__map_reserved.finishColorVariance != null?map.getReserved("finishColorVariance"):map.h["finishColorVariance"]);
	ps.minRadius = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.minRadius != null?map.getReserved("minRadius"):map.h["minRadius"]);
	ps.minRadiusVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.minRadiusVariance != null?map.getReserved("minRadiusVariance"):map.h["minRadiusVariance"]);
	ps.maxRadius = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.maxRadius != null?map.getReserved("maxRadius"):map.h["maxRadius"]);
	ps.maxRadiusVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.maxRadiusVariance != null?map.getReserved("maxRadiusVariance"):map.h["maxRadiusVariance"]);
	ps.rotationStart = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotationStart != null?map.getReserved("rotationStart"):map.h["rotationStart"]));
	ps.rotationStartVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotationStartVariance != null?map.getReserved("rotationStartVariance"):map.h["rotationStartVariance"]));
	ps.rotationEnd = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotationEnd != null?map.getReserved("rotationEnd"):map.h["rotationEnd"]));
	ps.rotationEndVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotationEndVariance != null?map.getReserved("rotationEndVariance"):map.h["rotationEndVariance"]));
	ps.rotatePerSecond = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotatePerSecond != null?map.getReserved("rotatePerSecond"):map.h["rotatePerSecond"]));
	ps.rotatePerSecondVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.rotatePerSecondVariance != null?map.getReserved("rotatePerSecondVariance"):map.h["rotatePerSecondVariance"]));
	ps.radialAcceleration = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.radialAcceleration != null?map.getReserved("radialAcceleration"):map.h["radialAcceleration"]);
	ps.radialAccelerationVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.radialAccelVariance != null?map.getReserved("radialAccelVariance"):map.h["radialAccelVariance"]);
	ps.tangentialAcceleration = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.tangentialAcceleration != null?map.getReserved("tangentialAcceleration"):map.h["tangentialAcceleration"]);
	ps.tangentialAccelerationVariance = org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode(__map_reserved.tangentialAccelVariance != null?map.getReserved("tangentialAccelVariance"):map.h["tangentialAccelVariance"]);
	ps.blendFuncSource = org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode(__map_reserved.blendFuncSource != null?map.getReserved("blendFuncSource"):map.h["blendFuncSource"]);
	ps.blendFuncDestination = org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode(__map_reserved.blendFuncDestination != null?map.getReserved("blendFuncDestination"):map.h["blendFuncDestination"]);
	ps.textureBitmapData = org_zamedev_particles_loaders_ParticleLoader.loadTexture((__map_reserved.texture != null?map.getReserved("texture"):map.h["texture"]).get("data"),(__map_reserved.texture != null?map.getReserved("texture"):map.h["texture"]).get("name"),path);
	if(org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode(__map_reserved.yCoordFlipped != null?map.getReserved("yCoordFlipped"):map.h["yCoordFlipped"]) == 1) ps.yCoordMultiplier = -1.0; else ps.yCoordMultiplier = 1.0;
	return ps;
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseIntNode = function(node) {
	if(node == null) return 0; else return org_zamedev_particles_loaders_PexLapParticleLoader.parseIntString(node.get("value"));
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatNode = function(node) {
	if(node == null) return 0; else return org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("value"));
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseVectorNode = function(node) {
	if(node == null) return { x : 0.0, y : 0.0};
	return { x : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("x")), y : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("y"))};
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseColorNode = function(node) {
	if(node == null) return { r : 0.0, g : 0.0, b : 0.0, a : 0.0};
	return { r : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("red")), g : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("green")), b : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("blue")), a : org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString(node.get("alpha"))};
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseIntString = function(s) {
	if(s == null) return 0;
	var result = Std.parseInt(s);
	if(result == null) return 0; else return result;
};
org_zamedev_particles_loaders_PexLapParticleLoader.parseFloatString = function(s) {
	if(s == null) return 0;
	var result = parseFloat(s);
	if(isNaN(result)) return 0.0; else return result;
};
var org_zamedev_particles_loaders_PlistParticleLoader = function() { };
$hxClasses["org.zamedev.particles.loaders.PlistParticleLoader"] = org_zamedev_particles_loaders_PlistParticleLoader;
org_zamedev_particles_loaders_PlistParticleLoader.__name__ = ["org","zamedev","particles","loaders","PlistParticleLoader"];
org_zamedev_particles_loaders_PlistParticleLoader.load = function(path) {
	var root = Xml.parse(openfl_Assets.getText(path)).firstElement().firstElement();
	if((function($this) {
		var $r;
		if(root.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + root.nodeType);
		$r = root.nodeName;
		return $r;
	}(this)) != "dict") throw new js__$Boot_HaxeError(new openfl_errors_Error("Expecting \"dict\", but \"" + (function($this) {
		var $r;
		if(root.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + root.nodeType;
		$r = root.nodeName;
		return $r;
	}(this)) + "\" found"));
	var key = null;
	var map = new haxe_ds_StringMap();
	var $it0 = root.elements();
	while( $it0.hasNext() ) {
		var node = $it0.next();
		if(key == null) {
			if((function($this) {
				var $r;
				if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
				$r = node.nodeName;
				return $r;
			}(this)) == "key") {
				key = org_zamedev_particles_util_XmlExt.innerText(node);
				if(key == "") throw new js__$Boot_HaxeError(new openfl_errors_Error("Empty key is not supported"));
				continue;
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Expecting element \"key\", but \"" + (function($this) {
				var $r;
				if(node.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + node.nodeType;
				$r = node.nodeName;
				return $r;
			}(this)) + "\" found"));
		}
		var textValue = org_zamedev_particles_util_XmlExt.innerText(node);
		var _g;
		if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
		_g = node.nodeName;
		switch(_g) {
		case "false":
			{
				if(__map_reserved[key] != null) map.setReserved(key,false); else map.h[key] = false;
				false;
			}
			break;
		case "true":
			{
				if(__map_reserved[key] != null) map.setReserved(key,true); else map.h[key] = true;
				true;
			}
			break;
		case "real":
			var value = parseFloat(textValue);
			if(isNaN(value)) throw new js__$Boot_HaxeError(new openfl_errors_Error("Could not parse \"" + textValue + "\" as real (for key \"" + key + "\")"));
			{
				if(__map_reserved[key] != null) map.setReserved(key,value); else map.h[key] = value;
				value;
			}
			break;
		case "integer":
			var value1 = Std.parseInt(textValue);
			if(value1 == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("Could not parse \"" + textValue + "\" as integer (for key \"" + key + "\")"));
			{
				if(__map_reserved[key] != null) map.setReserved(key,value1); else map.h[key] = value1;
				value1;
			}
			break;
		case "string":
			{
				if(__map_reserved[key] != null) map.setReserved(key,textValue); else map.h[key] = textValue;
				textValue;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported element \"" + (function($this) {
				var $r;
				if(node.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + node.nodeType;
				$r = node.nodeName;
				return $r;
			}(this)) + "\""));
		}
		key = null;
	}
	var ps = new org_zamedev_particles_ParticleSystem();
	ps.emitterType = org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.emitterType != null?map.getReserved("emitterType"):map.h["emitterType"]);
	ps.maxParticles = org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.maxParticles != null?map.getReserved("maxParticles"):map.h["maxParticles"]);
	ps.positionType = org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.positionType != null?map.getReserved("positionType"):map.h["positionType"]);
	ps.duration = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.duration != null?map.getReserved("duration"):map.h["duration"]);
	ps.gravity = org_zamedev_particles_loaders_PlistParticleLoader.asVector(map,"gravity");
	ps.particleLifespan = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.particleLifespan != null?map.getReserved("particleLifespan"):map.h["particleLifespan"]);
	ps.particleLifespanVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.particleLifespanVariance != null?map.getReserved("particleLifespanVariance"):map.h["particleLifespanVariance"]);
	ps.speed = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.speed != null?map.getReserved("speed"):map.h["speed"]);
	ps.speedVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.speedVariance != null?map.getReserved("speedVariance"):map.h["speedVariance"]);
	ps.sourcePosition = org_zamedev_particles_loaders_PlistParticleLoader.asVector(map,"sourcePosition");
	ps.sourcePositionVariance = org_zamedev_particles_loaders_PlistParticleLoader.asVector(map,"sourcePositionVariance");
	ps.angle = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.angle != null?map.getReserved("angle"):map.h["angle"]));
	ps.angleVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.angleVariance != null?map.getReserved("angleVariance"):map.h["angleVariance"]));
	ps.startParticleSize = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.startParticleSize != null?map.getReserved("startParticleSize"):map.h["startParticleSize"]);
	ps.startParticleSizeVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.startParticleSizeVariance != null?map.getReserved("startParticleSizeVariance"):map.h["startParticleSizeVariance"]);
	ps.finishParticleSize = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.finishParticleSize != null?map.getReserved("finishParticleSize"):map.h["finishParticleSize"]);
	ps.finishParticleSizeVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.finishParticleSizeVariance != null?map.getReserved("finishParticleSizeVariance"):map.h["finishParticleSizeVariance"]);
	ps.startColor = org_zamedev_particles_loaders_PlistParticleLoader.asColor(map,"startColor");
	ps.startColorVariance = org_zamedev_particles_loaders_PlistParticleLoader.asColor(map,"startColorVariance");
	ps.finishColor = org_zamedev_particles_loaders_PlistParticleLoader.asColor(map,"finishColor");
	ps.finishColorVariance = org_zamedev_particles_loaders_PlistParticleLoader.asColor(map,"finishColorVariance");
	ps.minRadius = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.minRadius != null?map.getReserved("minRadius"):map.h["minRadius"]);
	ps.minRadiusVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.minRadiusVariance != null?map.getReserved("minRadiusVariance"):map.h["minRadiusVariance"]);
	ps.maxRadius = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.maxRadius != null?map.getReserved("maxRadius"):map.h["maxRadius"]);
	ps.maxRadiusVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.maxRadiusVariance != null?map.getReserved("maxRadiusVariance"):map.h["maxRadiusVariance"]);
	ps.rotationStart = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotationStart != null?map.getReserved("rotationStart"):map.h["rotationStart"]));
	ps.rotationStartVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotationStartVariance != null?map.getReserved("rotationStartVariance"):map.h["rotationStartVariance"]));
	ps.rotationEnd = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotationEnd != null?map.getReserved("rotationEnd"):map.h["rotationEnd"]));
	ps.rotationEndVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotationEndVariance != null?map.getReserved("rotationEndVariance"):map.h["rotationEndVariance"]));
	ps.rotatePerSecond = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotatePerSecond != null?map.getReserved("rotatePerSecond"):map.h["rotatePerSecond"]));
	ps.rotatePerSecondVariance = org_zamedev_particles_util_MathHelper.deg2rad(org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.rotatePerSecondVariance != null?map.getReserved("rotatePerSecondVariance"):map.h["rotatePerSecondVariance"]));
	ps.radialAcceleration = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.radialAcceleration != null?map.getReserved("radialAcceleration"):map.h["radialAcceleration"]);
	ps.radialAccelerationVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.radialAccelVariance != null?map.getReserved("radialAccelVariance"):map.h["radialAccelVariance"]);
	ps.tangentialAcceleration = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.tangentialAcceleration != null?map.getReserved("tangentialAcceleration"):map.h["tangentialAcceleration"]);
	ps.tangentialAccelerationVariance = org_zamedev_particles_util_DynamicTools.asFloat(__map_reserved.tangentialAccelVariance != null?map.getReserved("tangentialAccelVariance"):map.h["tangentialAccelVariance"]);
	ps.blendFuncSource = org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.blendFuncSource != null?map.getReserved("blendFuncSource"):map.h["blendFuncSource"]);
	ps.blendFuncDestination = org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.blendFuncDestination != null?map.getReserved("blendFuncDestination"):map.h["blendFuncDestination"]);
	ps.textureBitmapData = org_zamedev_particles_loaders_ParticleLoader.loadTexture(org_zamedev_particles_util_DynamicTools.asString(__map_reserved.textureImageData != null?map.getReserved("textureImageData"):map.h["textureImageData"]),org_zamedev_particles_util_DynamicTools.asString(__map_reserved.textureFileName != null?map.getReserved("textureFileName"):map.h["textureFileName"]),path);
	if(org_zamedev_particles_util_DynamicTools.asInt(__map_reserved.yCoordFlipped != null?map.getReserved("yCoordFlipped"):map.h["yCoordFlipped"]) == 1) ps.yCoordMultiplier = -1.0; else ps.yCoordMultiplier = 1.0;
	return ps;
};
org_zamedev_particles_loaders_PlistParticleLoader.asVector = function(map,prefix) {
	return { x : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "x")), y : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "y"))};
};
org_zamedev_particles_loaders_PlistParticleLoader.asColor = function(map,prefix) {
	return { r : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "Red")), g : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "Green")), b : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "Blue")), a : org_zamedev_particles_util_DynamicTools.asFloat(map.get("" + prefix + "Alpha"))};
};
var org_zamedev_particles_renderers_ParticleSystemRenderer = function() { };
$hxClasses["org.zamedev.particles.renderers.ParticleSystemRenderer"] = org_zamedev_particles_renderers_ParticleSystemRenderer;
org_zamedev_particles_renderers_ParticleSystemRenderer.__name__ = ["org","zamedev","particles","renderers","ParticleSystemRenderer"];
org_zamedev_particles_renderers_ParticleSystemRenderer.prototype = {
	addParticleSystem: null
	,removeParticleSystem: null
	,__class__: org_zamedev_particles_renderers_ParticleSystemRenderer
};
var org_zamedev_particles_renderers_SpritesParticleRenderer = function() {
	this.dataList = [];
	openfl_display_Sprite.call(this);
};
$hxClasses["org.zamedev.particles.renderers.SpritesParticleRenderer"] = org_zamedev_particles_renderers_SpritesParticleRenderer;
org_zamedev_particles_renderers_SpritesParticleRenderer.__name__ = ["org","zamedev","particles","renderers","SpritesParticleRenderer"];
org_zamedev_particles_renderers_SpritesParticleRenderer.__interfaces__ = [org_zamedev_particles_renderers_ParticleSystemRenderer];
org_zamedev_particles_renderers_SpritesParticleRenderer.__super__ = openfl_display_Sprite;
org_zamedev_particles_renderers_SpritesParticleRenderer.prototype = $extend(openfl_display_Sprite.prototype,{
	dataList: null
	,addParticleSystem: function(ps) {
		if(this.dataList.length == 0) this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		ps.__initialize();
		var spriteList = [];
		var _g1 = 0;
		var _g = ps.maxParticles;
		while(_g1 < _g) {
			var i = _g1++;
			var sprite = new openfl_display_Sprite();
			sprite.set_visible(false);
			var bitmap = new openfl_display_Bitmap(ps.textureBitmapData);
			bitmap.set_x(-ps.textureBitmapData.width / 2.0);
			bitmap.set_y(-ps.textureBitmapData.height / 2.0);
			sprite.addChild(bitmap);
			spriteList.push({ sprite : sprite, colorTransform : new openfl_geom_ColorTransform(), visible : false});
			this.addChild(sprite);
		}
		this.dataList.push({ ps : ps, spriteList : spriteList, updated : false});
		return this;
	}
	,removeParticleSystem: function(ps) {
		var index = 0;
		while(index < this.dataList.length) if(this.dataList[index].ps == ps) {
			var _g = 0;
			var _g1 = this.dataList[index].spriteList;
			while(_g < _g1.length) {
				var info = _g1[_g];
				++_g;
				this.removeChild(info.sprite);
			}
			this.dataList.splice(index,1);
		} else index++;
		if(this.dataList.length == 0) this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		return this;
	}
	,onEnterFrame: function(_) {
		var updated = false;
		var _g = 0;
		var _g1 = this.dataList;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data.updated = data.ps.__update()) updated = true;
		}
		if(!updated) return;
		var _g2 = 0;
		var _g11 = this.dataList;
		while(_g2 < _g11.length) {
			var data1 = _g11[_g2];
			++_g2;
			if(!data1.updated) continue;
			var ps = data1.ps;
			var spriteList = data1.spriteList;
			var ethalonSize = ps.textureBitmapData.width;
			var _g3 = 0;
			var _g21 = ps.__particleCount;
			while(_g3 < _g21) {
				var i = _g3++;
				var particle = ps.__particleList[i];
				var info = spriteList[i];
				var sprite = info.sprite;
				sprite.set_x(particle.position.x * ps.particleScaleX);
				sprite.set_y(particle.position.y * ps.particleScaleY);
				var scale = particle.particleSize / ethalonSize * ps.particleScaleSize;
				sprite.set_scaleX(scale);
				sprite.set_scaleY(scale);
				sprite.set_rotation(particle.rotation * 180.0 / Math.PI);
				var colorTransform = info.colorTransform;
				colorTransform.redMultiplier = particle.color.r;
				colorTransform.greenMultiplier = particle.color.g;
				colorTransform.blueMultiplier = particle.color.b;
				colorTransform.alphaMultiplier = particle.color.a;
				sprite.get_transform().set_colorTransform(colorTransform);
				if(!info.visible) {
					info.visible = true;
					sprite.set_visible(true);
				}
			}
			var _g31 = ps.__particleCount;
			var _g22 = spriteList.length;
			while(_g31 < _g22) {
				var i1 = _g31++;
				var info1 = spriteList[i1];
				if(info1.visible) {
					info1.visible = false;
					info1.sprite.set_visible(false);
				}
			}
		}
	}
	,__class__: org_zamedev_particles_renderers_SpritesParticleRenderer
});
var org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$ = {};
$hxClasses["org.zamedev.particles.util._DynamicExt.DynamicExt_Impl_"] = org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$;
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.__name__ = ["org","zamedev","particles","util","_DynamicExt","DynamicExt_Impl_"];
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$._new = function() {
	return { };
};
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.set = function(this1,key,value) {
	this1[key] = value;
};
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.get = function(this1,key) {
	return this1[key];
};
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
org_zamedev_particles_util__$DynamicExt_DynamicExt_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
var org_zamedev_particles_util_DynamicTools = function() { };
$hxClasses["org.zamedev.particles.util.DynamicTools"] = org_zamedev_particles_util_DynamicTools;
org_zamedev_particles_util_DynamicTools.__name__ = ["org","zamedev","particles","util","DynamicTools"];
org_zamedev_particles_util_DynamicTools.asDynamic = function(value) {
	if(value == null) return { }; else return value;
};
org_zamedev_particles_util_DynamicTools.asArray = function(value) {
	if((value instanceof Array) && value.__enum__ == null) return value; else return [];
};
org_zamedev_particles_util_DynamicTools.asInt = function(value,def) {
	if(def == null) def = 0;
	if(((value | 0) === value)) return value; else if(typeof(value) == "number") return Std["int"](value); else return def;
};
org_zamedev_particles_util_DynamicTools.asNullInt = function(value) {
	if(((value | 0) === value)) return value; else if(typeof(value) == "number") return Std["int"](value); else return null;
};
org_zamedev_particles_util_DynamicTools.asFloat = function(value,def) {
	if(def == null) def = 0.0;
	if(typeof(value) == "number" || ((value | 0) === value)) return value; else return def;
};
org_zamedev_particles_util_DynamicTools.asNullFloat = function(value) {
	if(typeof(value) == "number" || ((value | 0) === value)) return value; else return null;
};
org_zamedev_particles_util_DynamicTools.asBool = function(value,def) {
	if(def == null) def = false;
	if(typeof(value) == "boolean") return value; else return def;
};
org_zamedev_particles_util_DynamicTools.asString = function(value,def) {
	if(def == null) def = "";
	if(value == null) return def; else return Std.string(value);
};
var org_zamedev_particles_util_MathHelper = function() { };
$hxClasses["org.zamedev.particles.util.MathHelper"] = org_zamedev_particles_util_MathHelper;
org_zamedev_particles_util_MathHelper.__name__ = ["org","zamedev","particles","util","MathHelper"];
org_zamedev_particles_util_MathHelper.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
org_zamedev_particles_util_MathHelper.rnd1to1 = function() {
	return Math.random() * 2.0 - 1.0;
};
org_zamedev_particles_util_MathHelper.clamp = function(value) {
	if(value < 0.0) return 0.0; else if(value < 1.0) return value; else return 1.0;
};
var org_zamedev_particles_util_XmlExt = function() { };
$hxClasses["org.zamedev.particles.util.XmlExt"] = org_zamedev_particles_util_XmlExt;
org_zamedev_particles_util_XmlExt.__name__ = ["org","zamedev","particles","util","XmlExt"];
org_zamedev_particles_util_XmlExt.innerText = function(node,def) {
	if(def == null) def = "";
	var child;
	if(node.nodeType != Xml.Document && node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + node.nodeType);
	child = node.children[0];
	if(child != null && (child.nodeType == Xml.PCData || child.nodeType == Xml.CData)) {
		if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
		return child.nodeValue;
	}
	return def;
};
var promhx_base_AsyncBase = function(d) {
	this.id = promhx_base_AsyncBase.id_ctr += 1;
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) promhx_base_AsyncBase.link(d,this,function(x) {
		return x;
	});
};
$hxClasses["promhx.base.AsyncBase"] = promhx_base_AsyncBase;
promhx_base_AsyncBase.__name__ = ["promhx","base","AsyncBase"];
promhx_base_AsyncBase.link = function(current,next,f) {
	current._update.push({ async : next, linkf : function(x) {
		next.handleResolve(f(x));
	}});
	promhx_base_AsyncBase.immediateLinkUpdate(current,next,f);
};
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && !(current._error.length > 0)) next.handleError(current._errorVal);
	if(current._resolved && !current._pending) try {
		next.handleResolve(f(current._val));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		next.handleError(e);
	}
};
promhx_base_AsyncBase.linkAll = function(all,next) {
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var vals;
			var _g = [];
			var $it0 = $iterator(all)();
			while( $it0.hasNext() ) {
				var a = $it0.next();
				_g.push(a == current?v:a._val);
			}
			vals = _g;
			next.handleResolve(vals);
		}
		null;
		return;
	};
	var $it1 = $iterator(all)();
	while( $it1.hasNext() ) {
		var a1 = $it1.next();
		a1._update.push({ async : next, linkf : (function(f,a11,a2) {
			return function(v1) {
				f(a11,a2,v1);
				return;
			};
		})(cthen,(function($this) {
			var $r;
			var _g1 = [];
			var $it2 = $iterator(all)();
			while( $it2.hasNext() ) {
				var a21 = $it2.next();
				if(a21 != a1) _g1.push(a21);
			}
			$r = _g1;
			return $r;
		}(this)),a1)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) next.handleResolve((function($this) {
		var $r;
		var _g2 = [];
		var $it3 = $iterator(all)();
		while( $it3.hasNext() ) {
			var a3 = $it3.next();
			_g2.push(a3._val);
		}
		$r = _g2;
		return $r;
	}(this)));
};
promhx_base_AsyncBase.pipeLink = function(current,ret,f) {
	var linked = false;
	var linkf = function(x) {
		if(!linked) {
			linked = true;
			var pipe_ret = f(x);
			pipe_ret._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
			promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret,function(x1) {
				return x1;
			});
		}
	};
	current._update.push({ async : ret, linkf : linkf});
	if(current._resolved && !current._pending) try {
		linkf(current._val);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		ret.handleError(e);
	}
};
promhx_base_AsyncBase.allResolved = function($as) {
	var $it0 = $iterator($as)();
	while( $it0.hasNext() ) {
		var a = $it0.next();
		if(!a._resolved) return false;
	}
	return true;
};
promhx_base_AsyncBase.allFulfilled = function($as) {
	var $it0 = $iterator($as)();
	while( $it0.hasNext() ) {
		var a = $it0.next();
		if(!a._fulfilled) return false;
	}
	return true;
};
promhx_base_AsyncBase.prototype = {
	id: null
	,_val: null
	,_resolved: null
	,_fulfilled: null
	,_pending: null
	,_update: null
	,_error: null
	,_errored: null
	,_errorMap: null
	,_errorVal: null
	,_errorPending: null
	,catchError: function(f) {
		this._error.push(f);
		return this;
	}
	,errorThen: function(f) {
		this._errorMap = f;
		return this;
	}
	,isResolved: function() {
		return this._resolved;
	}
	,isErrored: function() {
		return this._errored;
	}
	,isErrorHandled: function() {
		return this._error.length > 0;
	}
	,isErrorPending: function() {
		return this._errorPending;
	}
	,isFulfilled: function() {
		return this._fulfilled;
	}
	,isPending: function() {
		return this._pending;
	}
	,handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _g = this;
		if(this._pending) promhx_base_EventLoop.enqueue((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this._resolve),val)); else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_g._val = val;
				var _g1 = 0;
				var _g2 = _g._update;
				while(_g1 < _g2.length) {
					var up = _g2[_g1];
					++_g1;
					try {
						up.linkf(val);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						up.async.handleError(e);
					}
				}
				_g._fulfilled = true;
				_g._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _g = this;
		var update_errors = function(e) {
			if(_g._error.length > 0) {
				var _g1 = 0;
				var _g2 = _g._error;
				while(_g1 < _g2.length) {
					var ef = _g2[_g1];
					++_g1;
					ef(e);
				}
			} else if(_g._update.length > 0) {
				var _g11 = 0;
				var _g21 = _g._update;
				while(_g11 < _g21.length) {
					var up = _g21[_g11];
					++_g11;
					up.async.handleError(e);
				}
			} else throw new js__$Boot_HaxeError(e);
			_g._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_g._errorMap != null) try {
					_g._resolve(_g._errorMap(error));
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
					update_errors(e1);
				} else update_errors(error);
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,then: function(f) {
		var ret = new promhx_base_AsyncBase();
		promhx_base_AsyncBase.link(this,ret,f);
		return ret;
	}
	,unlink: function(to) {
		var _g = this;
		promhx_base_EventLoop.queue.add(function() {
			_g._update = _g._update.filter(function(x) {
				return x.async != to;
			});
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,isLinked: function(to) {
		var updated = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == to) return true;
		}
		return updated;
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports.promhx.Deferred = function() {
	promhx_base_AsyncBase.call(this);
};
$hxClasses["promhx.Deferred"] = promhx_Deferred;
promhx_Deferred.__name__ = ["promhx","Deferred"];
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,promise: function() {
		return new promhx_Promise(this);
	}
	,stream: function() {
		return new promhx_Stream(this);
	}
	,publicStream: function() {
		return new promhx_PublicStream(this);
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports.promhx.Promise = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._rejected = false;
};
$hxClasses["promhx.Promise"] = promhx_Promise;
promhx_Promise.__name__ = ["promhx","Promise"];
promhx_Promise.whenAll = function(itb) {
	var ret = new promhx_Promise();
	promhx_base_AsyncBase.linkAll(itb,ret);
	return ret;
};
promhx_Promise.promise = function(_val) {
	var ret = new promhx_Promise();
	ret.handleResolve(_val);
	return ret;
};
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	_rejected: null
	,isRejected: function() {
		return this._rejected;
	}
	,reject: function(e) {
		this._rejected = true;
		this.handleError(e);
	}
	,handleResolve: function(val) {
		if(this._resolved) {
			var msg = "Promise has already been resolved";
			throw new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved(msg));
		}
		this._resolve(val);
	}
	,then: function(f) {
		var ret = new promhx_Promise();
		promhx_base_AsyncBase.link(this,ret,f);
		return ret;
	}
	,unlink: function(to) {
		var _g = this;
		promhx_base_EventLoop.queue.add(function() {
			if(!_g._fulfilled) {
				var msg = "Downstream Promise is not fullfilled";
				_g.handleError(promhx_error_PromiseError.DownstreamNotFullfilled(msg));
			} else _g._update = _g._update.filter(function(x) {
				return x.async != to;
			});
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,pipe: function(f) {
		var ret = new promhx_Promise();
		promhx_base_AsyncBase.pipeLink(this,ret,f);
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Promise();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
		});
		this.then($bind(ret,ret._resolve));
		return ret;
	}
	,__class__: promhx_Promise
});
var promhx_Stream = $hx_exports.promhx.Stream = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._end_deferred = new promhx_Deferred();
	this._end_promise = this._end_deferred.promise();
};
$hxClasses["promhx.Stream"] = promhx_Stream;
promhx_Stream.__name__ = ["promhx","Stream"];
promhx_Stream.foreach = function(itb) {
	var s = new promhx_Stream();
	var $it0 = $iterator(itb)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		s.handleResolve(i);
	}
	s.end();
	return s;
};
promhx_Stream.wheneverAll = function(itb) {
	var ret = new promhx_Stream();
	promhx_base_AsyncBase.linkAll(itb,ret);
	return ret;
};
promhx_Stream.concatAll = function(itb) {
	var ret = new promhx_Stream();
	var $it0 = $iterator(itb)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.concat(i);
	}
	return ret;
};
promhx_Stream.mergeAll = function(itb) {
	var ret = new promhx_Stream();
	var $it0 = $iterator(itb)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.merge(i);
	}
	return ret;
};
promhx_Stream.stream = function(_val) {
	var ret = new promhx_Stream();
	ret.handleResolve(_val);
	return ret;
};
promhx_Stream.__super__ = promhx_base_AsyncBase;
promhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{
	deferred: null
	,_pause: null
	,_end: null
	,_end_promise: null
	,_end_deferred: null
	,then: function(f) {
		var ret = new promhx_Stream();
		promhx_base_AsyncBase.link(this,ret,f);
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,detachStream: function(str) {
		var filtered = [];
		var removed = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == str) removed = true; else filtered.push(u);
		}
		this._update = filtered;
		return removed;
	}
	,first: function() {
		var s = new promhx_Promise();
		this.then(function(x) {
			if(!s._resolved) s.handleResolve(x);
		});
		return s;
	}
	,handleResolve: function(val) {
		if(!this._end && !this._pause) this._resolve(val);
	}
	,pause: function(set) {
		if(set == null) set = !this._pause;
		this._pause = set;
	}
	,pipe: function(f) {
		var ret = new promhx_Stream();
		promhx_base_AsyncBase.pipeLink(this,ret,f);
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Stream();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
			piped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));
		});
		this.then($bind(ret,ret._resolve));
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,handleEnd: function() {
		if(this._pending) {
			promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
			promhx_base_EventLoop.continueOnNextLoop();
		} else if(this._end_promise._resolved) return; else {
			this._end = true;
			var o;
			if(this._resolved) o = haxe_ds_Option.Some(this._val); else o = haxe_ds_Option.None;
			this._end_promise.handleResolve(o);
			this._update = [];
			this._error = [];
		}
	}
	,end: function() {
		promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
		promhx_base_EventLoop.continueOnNextLoop();
		return this;
	}
	,endThen: function(f) {
		return this._end_promise.then(f);
	}
	,filter: function(f) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : function(x) {
			if(f(x)) ret.handleResolve(x);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,concat: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		this._end_promise.then(function(_) {
			s.pipe(function(x1) {
				ret.handleResolve(x1);
				return ret;
			});
			s._end_promise.then(function(_1) {
				ret.end();
			});
		});
		return ret;
	}
	,merge: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		s._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		promhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,__class__: promhx_Stream
});
var promhx_PublicStream = $hx_exports.promhx.PublicStream = function(def) {
	promhx_Stream.call(this,def);
};
$hxClasses["promhx.PublicStream"] = promhx_PublicStream;
promhx_PublicStream.__name__ = ["promhx","PublicStream"];
promhx_PublicStream.publicstream = function(val) {
	var ps = new promhx_PublicStream();
	ps.handleResolve(val);
	return ps;
};
promhx_PublicStream.__super__ = promhx_Stream;
promhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,update: function(val) {
		this.handleResolve(val);
	}
	,__class__: promhx_PublicStream
});
var promhx_base_EventLoop = function() { };
$hxClasses["promhx.base.EventLoop"] = promhx_base_EventLoop;
promhx_base_EventLoop.__name__ = ["promhx","base","EventLoop"];
promhx_base_EventLoop.nextLoop = null;
promhx_base_EventLoop.enqueue = function(eqf) {
	promhx_base_EventLoop.queue.add(eqf);
	promhx_base_EventLoop.continueOnNextLoop();
};
promhx_base_EventLoop.set_nextLoop = function(f) {
	if(promhx_base_EventLoop.nextLoop != null) throw new js__$Boot_HaxeError("nextLoop has already been set"); else promhx_base_EventLoop.nextLoop = f;
	return promhx_base_EventLoop.nextLoop;
};
promhx_base_EventLoop.queueEmpty = function() {
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.finish = function(max_iterations) {
	if(max_iterations == null) max_iterations = 1000;
	var fn = null;
	while(max_iterations-- > 0 && (fn = promhx_base_EventLoop.queue.pop()) != null) fn();
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.clear = function() {
	promhx_base_EventLoop.queue = new List();
};
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) fn();
	if(!promhx_base_EventLoop.queue.isEmpty()) promhx_base_EventLoop.continueOnNextLoop();
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f); else (typeof setImmediate === 'function' ? setImmediate : setTimeout)(promhx_base_EventLoop.f);
};
var promhx_deferred_DeferredPromise = function() {
	promhx_Deferred.call(this);
	this.boundPromise = new promhx_Promise(this);
};
$hxClasses["promhx.deferred.DeferredPromise"] = promhx_deferred_DeferredPromise;
promhx_deferred_DeferredPromise.__name__ = ["promhx","deferred","DeferredPromise"];
promhx_deferred_DeferredPromise.__super__ = promhx_Deferred;
promhx_deferred_DeferredPromise.prototype = $extend(promhx_Deferred.prototype,{
	boundPromise: null
	,__class__: promhx_deferred_DeferredPromise
});
var promhx_error_PromiseError = $hxClasses["promhx.error.PromiseError"] = { __ename__ : true, __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"] };
promhx_error_PromiseError.AlreadyResolved = function(message) { var $x = ["AlreadyResolved",0,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
promhx_error_PromiseError.DownstreamNotFullfilled = function(message) { var $x = ["DownstreamNotFullfilled",1,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
var protohx_CommonError = function(msg) {
	this.msg = msg;
};
$hxClasses["protohx.CommonError"] = protohx_CommonError;
protohx_CommonError.__name__ = ["protohx","CommonError"];
protohx_CommonError.prototype = {
	msg: null
	,__class__: protohx_CommonError
};
var protohx_Protohx = function() { };
$hxClasses["protohx.Protohx"] = protohx_Protohx;
protohx_Protohx.__name__ = ["protohx","Protohx"];
protohx_Protohx.getLow = function(i) {
	return js_Boot.__cast(i.low , Int);
};
protohx_Protohx.getHigh = function(i) {
	return js_Boot.__cast(i.high , Int);
};
protohx_Protohx.newInt64 = function(h,l) {
	var x = new haxe__$Int64__$_$_$Int64(h,l);
	return x;
};
protohx_Protohx.newUInt64 = function(h,l) {
	var x = new haxe__$Int64__$_$_$Int64(h,l);
	return x;
};
protohx_Protohx.setOutputEndian = function(out) {
	out.set_bigEndian(false);
};
protohx_Protohx.setInputEndian = function(out) {
	out.set_bigEndian(false);
};
var protohx_ReadUtils = function() { };
$hxClasses["protohx.ReadUtils"] = protohx_ReadUtils;
protohx_ReadUtils.__name__ = ["protohx","ReadUtils"];
protohx_ReadUtils.skip = function(input,wireType) {
	switch(wireType) {
	case 0:
		while(input.buf.readByte() >= 128) {
		}
		break;
	case 1:
		input.buf.readInt32();
		input.buf.readInt32();
		break;
	case 2:
		var i = protohx_ReadUtils.read__TYPE_UINT32(input);
		while(i != 0) {
			input.buf.readByte();
			i--;
		}
		break;
	case 5:
		input.buf.readInt32();
		break;
	default:
		throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(wireType))));
	}
};
protohx_ReadUtils.read__TYPE_DOUBLE = function(input) {
	return input.buf.readDouble();
};
protohx_ReadUtils.read__TYPE_FLOAT = function(input) {
	return haxe_io_FPHelper.i32ToFloat(input.buf.readInt32());
};
protohx_ReadUtils.read__TYPE_INT64 = function(input) {
	var low = 0;
	var high = 0;
	var b = 0;
	var i = 0;
	while(true) {
		b = input.buf.readByte();
		if(i == 28) break; else if(b >= 128) low |= (b & 127) << i; else {
			low |= b << i;
			return protohx_Protohx.newInt64(high,low);
		}
		i += 7;
	}
	if(b >= 128) {
		b &= 127;
		low |= b << i;
		high = b >>> 4;
	} else {
		low |= b << i;
		high = b >>> 4;
		return protohx_Protohx.newInt64(high,low);
	}
	i = 3;
	while(true) {
		b = input.buf.readByte();
		if(i < 32) {
			if(b >= 128) high |= (b & 127) << i; else {
				high |= b << i;
				break;
			}
		}
		i += 7;
	}
	return protohx_Protohx.newInt64(high,low);
};
protohx_ReadUtils.read__TYPE_UINT64 = function(input) {
	var tmp = protohx_ReadUtils.read__TYPE_INT64(input);
	return protohx_Protohx.newUInt64(js_Boot.__cast(tmp.high , Int),js_Boot.__cast(tmp.low , Int));
};
protohx_ReadUtils.read__TYPE_INT32 = function(input) {
	return protohx_ReadUtils.read__TYPE_UINT32(input);
};
protohx_ReadUtils.read__TYPE_FIXED64 = function(input) {
	var low = input.buf.readInt32();
	var high = input.buf.readInt32();
	return protohx_Protohx.newUInt64(high,low);
};
protohx_ReadUtils.read__TYPE_FIXED32 = function(input) {
	return js_Boot.__cast(input.buf.readInt32() , Int);
};
protohx_ReadUtils.read__TYPE_BOOL = function(input) {
	var a = protohx_ReadUtils.read__TYPE_UINT32(input);
	return a != 0;
};
protohx_ReadUtils.read__TYPE_STRING = function(input) {
	var length = protohx_ReadUtils.read__TYPE_UINT32(input);
	return input.buf.readString(length);
};
protohx_ReadUtils.read__TYPE_BYTES = function(input) {
	var result = null;
	var length = protohx_ReadUtils.read__TYPE_UINT32(input);
	if(_$UInt_UInt_$Impl_$.gt(length,0)) result = input.readBytes(length);
	return result;
};
protohx_ReadUtils.read__TYPE_UINT32 = function(input) {
	var result = 0;
	var i = 0;
	while(true) {
		var b = input.buf.readByte();
		if(_$UInt_UInt_$Impl_$.gt(32,i)) {
			if(b >= 128) result |= (b & 127) << i; else {
				result |= b << i;
				break;
			}
		} else {
			while(input.buf.readByte() >= 128) {
			}
			break;
		}
		i = i + 7;
	}
	return result;
};
protohx_ReadUtils.read__TYPE_ENUM = function(input) {
	return protohx_ReadUtils.read__TYPE_INT32(input);
};
protohx_ReadUtils.read__TYPE_SFIXED32 = function(input) {
	return input.buf.readInt32();
};
protohx_ReadUtils.read__TYPE_SFIXED64 = function(input) {
	var low = input.buf.readInt32();
	var high = input.buf.readInt32();
	return protohx_Protohx.newInt64(high,low);
};
protohx_ReadUtils.read__TYPE_SINT32 = function(input) {
	return protohx_ZigZag.decode32(protohx_ReadUtils.read__TYPE_UINT32(input));
};
protohx_ReadUtils.read__TYPE_SINT64 = function(input) {
	var result = protohx_ReadUtils.read__TYPE_INT64(input);
	var low;
	low = js_Boot.__cast(result.low , Int);
	var high;
	high = js_Boot.__cast(result.high , Int);
	var lowNew = protohx_ZigZag.decode64low(low,high);
	var highNew = protohx_ZigZag.decode64high(low,high);
	return protohx_Protohx.newInt64(highNew,lowNew);
};
protohx_ReadUtils.read__TYPE_MESSAGE = function(input,message) {
	var length = protohx_ReadUtils.read__TYPE_UINT32(input);
	if(input.buf.totlen - input.buf.pos < length) throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid message length: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(length))));
	var bytesAfterSlice = input.buf.totlen - input.buf.pos - length;
	message.readFromSlice(input,bytesAfterSlice);
	if(input.buf.totlen - input.buf.pos != bytesAfterSlice) throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid nested message"));
	return message;
};
protohx_ReadUtils.readPackedRepeated = function(input,readFuntion,value) {
	var length = protohx_ReadUtils.read__TYPE_UINT32(input);
	if(input.buf.totlen - input.buf.pos < length) throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid message length: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(length))));
	var bytesAfterSlice = input.buf.totlen - input.buf.pos - length;
	while(input.buf.totlen - input.buf.pos > bytesAfterSlice) value.push(readFuntion(input));
	if(input.buf.totlen - input.buf.pos != bytesAfterSlice) throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid packed repeated data"));
};
var protohx_ReadingBuffer = function(buf) {
	this.buf = buf;
	this.buf.set_bigEndian(false);
};
$hxClasses["protohx.ReadingBuffer"] = protohx_ReadingBuffer;
protohx_ReadingBuffer.__name__ = ["protohx","ReadingBuffer"];
protohx_ReadingBuffer.fromBytes = function(bytes,pos,len) {
	return new protohx_ReadingBuffer(new haxe_io_BytesInput(bytes,pos,len));
};
protohx_ReadingBuffer.prototype = {
	length: null
	,bytesAvailable: null
	,buf: null
	,get_length: function() {
		return this.buf.totlen;
	}
	,get_bytesAvailable: function() {
		return this.buf.totlen - this.buf.pos;
	}
	,readBytes: function(len) {
		var b = haxe_io_Bytes.alloc(len);
		this.buf.readBytes(b,0,len);
		return b;
	}
	,readUTFBytes: function(len) {
		return this.buf.readString(len);
	}
	,readInt32: function() {
		return this.buf.readInt32();
	}
	,readUnsignedByte: function() {
		return this.buf.readByte();
	}
	,readDouble: function() {
		return this.buf.readDouble();
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.buf.readInt32());
	}
	,__class__: protohx_ReadingBuffer
	,__properties__: {get_bytesAvailable:"get_bytesAvailable",get_length:"get_length"}
};
var protohx_WireType = function() { };
$hxClasses["protohx.WireType"] = protohx_WireType;
protohx_WireType.__name__ = ["protohx","WireType"];
var protohx_WriteUtils = function() { };
$hxClasses["protohx.WriteUtils"] = protohx_WriteUtils;
protohx_WriteUtils.__name__ = ["protohx","WriteUtils"];
protohx_WriteUtils.writeSingleUnknown = function(output,tag,value) {
	protohx_WriteUtils.write__TYPE_UINT32(output,tag);
	var _g = tag & 7;
	switch(_g) {
	case 0:
		protohx_WriteUtils.write__TYPE_UINT64(output,value);
		break;
	case 1:
		protohx_WriteUtils.write__TYPE_FIXED64(output,value);
		break;
	case 2:
		protohx_WriteUtils.write__TYPE_BYTES(output,value);
		break;
	case 5:
		protohx_WriteUtils.write__TYPE_FIXED32(output,value);
		break;
	default:
		throw new js__$Boot_HaxeError(new protohx_CommonError("Invalid wire type: " + Std.string(_$UInt_UInt_$Impl_$.toFloat(tag & 7))));
	}
};
protohx_WriteUtils.writeUnknownPair = function(output,tag,value) {
	var repeated;
	if((value instanceof Array) && value.__enum__ == null) repeated = js_Boot.__cast(value , Array); else repeated = null;
	if(repeated != null) {
		var _g = 0;
		while(_g < repeated.length) {
			var element = repeated[_g];
			++_g;
			protohx_WriteUtils.writeSingleUnknown(output,tag,element);
		}
	} else protohx_WriteUtils.writeSingleUnknown(output,tag,value);
};
protohx_WriteUtils.writeVarint64 = function(output,low,high) {
	if(high == 0) protohx_WriteUtils.write__TYPE_UINT32(output,low); else {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			output.writeByte(low & 127 | 128);
			low >>>= 7;
		}
		if((high & -8) == 0) output.writeByte(high << 4 | low); else {
			output.writeByte((high << 4 | low) & 127 | 128);
			protohx_WriteUtils.write__TYPE_UINT32(output,high >>> 3);
		}
	}
};
protohx_WriteUtils.writeTag = function(output,wireType,number) {
	protohx_WriteUtils.write__TYPE_UINT32(output,number << 3 | wireType);
};
protohx_WriteUtils.write__TYPE_DOUBLE = function(output,value) {
	output.writeDouble(value);
};
protohx_WriteUtils.write__TYPE_FLOAT = function(output,value) {
	output.writeFloat(value);
};
protohx_WriteUtils.write__TYPE_INT64 = function(output,value) {
	protohx_WriteUtils.writeVarint64(output,js_Boot.__cast(value.low , Int),js_Boot.__cast(value.high , Int));
};
protohx_WriteUtils.write__TYPE_UINT64 = function(output,value) {
	protohx_WriteUtils.writeVarint64(output,js_Boot.__cast(value.low , Int),js_Boot.__cast(value.high , Int));
};
protohx_WriteUtils.write__TYPE_INT32 = function(output,value) {
	if(value < 0) protohx_WriteUtils.writeVarint64(output,value,-1); else protohx_WriteUtils.write__TYPE_UINT32(output,value);
};
protohx_WriteUtils.write__TYPE_FIXED64 = function(output,value) {
	output.writeInt32(js_Boot.__cast(value.low , Int));
	output.writeInt32(js_Boot.__cast(value.high , Int));
};
protohx_WriteUtils.write__TYPE_FIXED32 = function(output,value) {
	output.writeInt32(value);
};
protohx_WriteUtils.write__TYPE_BOOL = function(output,value) {
	output.writeByte(value?1:0);
};
protohx_WriteUtils.write__TYPE_STRING = function(output,value) {
	var i = output.beginBlock();
	if(value != null) output.writeUTFBytes(value);
	output.endBlock(i);
};
protohx_WriteUtils.write__TYPE_BYTES = function(output,value) {
	if(value != null) {
		protohx_WriteUtils.write__TYPE_UINT32(output,value.length);
		output.writeBytes(value);
	} else protohx_WriteUtils.write__TYPE_UINT32(output,0);
};
protohx_WriteUtils.write__TYPE_UINT32 = function(output,value) {
	while(true) if((value & -128) == 0) {
		output.writeByte(value);
		return;
	} else {
		output.writeByte(value & 127 | 128);
		value = value >>> 7;
	}
};
protohx_WriteUtils.write__TYPE_ENUM = function(output,value) {
	protohx_WriteUtils.write__TYPE_INT32(output,value);
};
protohx_WriteUtils.write__TYPE_SFIXED32 = function(output,value) {
	output.writeInt32(value);
};
protohx_WriteUtils.write__TYPE_SFIXED64 = function(output,value) {
	output.writeInt32(js_Boot.__cast(value.low , Int));
	output.writeInt32(js_Boot.__cast(value.high , Int));
};
protohx_WriteUtils.write__TYPE_SINT32 = function(output,value) {
	protohx_WriteUtils.write__TYPE_UINT32(output,protohx_ZigZag.encode32(value));
};
protohx_WriteUtils.write__TYPE_SINT64 = function(output,value) {
	protohx_WriteUtils.writeVarint64(output,protohx_ZigZag.encode64low(js_Boot.__cast(value.low , Int),js_Boot.__cast(value.high , Int)),protohx_ZigZag.encode64high(js_Boot.__cast(value.low , Int),js_Boot.__cast(value.high , Int)));
};
protohx_WriteUtils.write__TYPE_MESSAGE = function(output,value) {
	var i = output.beginBlock();
	value.writeToBuffer(output);
	output.endBlock(i);
};
protohx_WriteUtils.writePackedRepeated = function(output,writeFunction,value) {
	var i = output.beginBlock();
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var j = _g1++;
		writeFunction.apply(null,[output,value[j]]);
	}
	output.endBlock(i);
};
var protohx_WritingBuffer = function() {
	this.slices = [];
	this.buf = new haxe_io_BytesOutput();
	this.buf.set_bigEndian(false);
	this.position = 0;
};
$hxClasses["protohx.WritingBuffer"] = protohx_WritingBuffer;
protohx_WritingBuffer.__name__ = ["protohx","WritingBuffer"];
protohx_WritingBuffer.prototype = {
	slices: null
	,buf: null
	,position: null
	,writeDouble: function(v) {
		this.buf.writeDouble(v);
		this.position += 8;
	}
	,writeFloat: function(v) {
		this.buf.writeInt32(haxe_io_FPHelper.floatToI32(v));
		this.position += 4;
	}
	,writeBytes: function(v) {
		this.buf.write(v);
		this.position += v.length;
	}
	,writeUTFBytes: function(v) {
		var b = haxe_io_Bytes.ofString(v);
		this.buf.write(b);
		this.position += b.length;
	}
	,writeInt32: function(v) {
		this.buf.writeInt32(v);
		this.position += 4;
	}
	,writeByte: function(v) {
		this.buf.writeByte(v);
		this.position += 1;
	}
	,beginBlock: function() {
		this.slices.push(this.position);
		var beginSliceIndex = this.slices.length;
		this.slices.push(0);
		this.slices.push(0);
		this.slices.push(this.position);
		return beginSliceIndex;
	}
	,endBlock: function(beginSliceIndex) {
		this.slices.push(this.position);
		var beginPosition = this.slices[beginSliceIndex + 2];
		this.slices[beginSliceIndex] = this.position;
		protohx_WriteUtils.write__TYPE_UINT32(this,this.position - beginPosition);
		this.slices[beginSliceIndex + 1] = this.position;
		this.slices.push(this.position);
	}
	,toNormal: function(output) {
		var i = 0;
		var begin = 0;
		var bytes = this.buf.getBytes();
		while(i < this.slices.length) {
			var end = this.slices[i];
			++i;
			if(_$UInt_UInt_$Impl_$.gt(end,begin)) output.writeFullBytes(bytes,begin,end - begin); else if(_$UInt_UInt_$Impl_$.gt(begin,end)) throw new js__$Boot_HaxeError(new protohx_CommonError(""));
			begin = this.slices[i];
			++i;
		}
		output.writeFullBytes(bytes,begin,bytes.length - begin);
	}
	,__class__: protohx_WritingBuffer
};
var protohx_ZigZag = function() { };
$hxClasses["protohx.ZigZag"] = protohx_ZigZag;
protohx_ZigZag.__name__ = ["protohx","ZigZag"];
protohx_ZigZag.encode32 = function(n) {
	return n << 1 ^ n >> 31;
};
protohx_ZigZag.decode32 = function(n) {
	return n >>> 1 ^ -(n & 1);
};
protohx_ZigZag.encode64low = function(low,high) {
	return low << 1 ^ high >> 31;
};
protohx_ZigZag.encode64high = function(low,high) {
	return low >>> 31 ^ high << 1 ^ high >> 31;
};
protohx_ZigZag.decode64low = function(low,high) {
	return high << 31 ^ low >>> 1 ^ -(low & 1);
};
protohx_ZigZag.decode64high = function(low,high) {
	return high >>> 1 ^ -(low & 1);
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
msignal_SlotList.NIL = new msignal_SlotList(null,null);
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
var __map_reserved = {}
var q = window.jQuery;
var js = js || {}
js.JQuery = q;
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
Core.initialized = false;
Core.onReady = new msignal_Signal0();
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
agario_atlas_MainShop.ATLAS = "main_shop";
agario_atlas_MainShop.Close = "Close";
agario_atlas_MainShop.Close_disabled = "Close_disabled";
agario_atlas_MainShop.Exp_Star = "Exp_Star";
agario_atlas_MainShop.appstore = "appstore";
agario_atlas_MainShop.arrow = "arrow";
agario_atlas_MainShop.back_button = "back_button";
agario_atlas_MainShop.coins_button = "coins_button";
agario_atlas_MainShop.currency_icon = "currency_icon";
agario_atlas_MainShop.fast_play = "fast_play";
agario_atlas_MainShop.fb_icon = "fb_icon";
agario_atlas_MainShop.freecoins_video = "freecoins_video";
agario_atlas_MainShop.giant_coin = "giant_coin";
agario_atlas_MainShop.gifts_icon = "gifts_icon";
agario_atlas_MainShop.google_play = "google_play";
agario_atlas_MainShop.gplus_icon = "gplus_icon";
agario_atlas_MainShop.hint = "hint";
agario_atlas_MainShop.locket = "locket";
agario_atlas_MainShop.mass_button = "mass_button";
agario_atlas_MainShop.massboost_2x_shop = "massboost_2x_shop";
agario_atlas_MainShop.massboost_3x_shop = "massboost_3x_shop";
agario_atlas_MainShop.multiplier_stamp = "multiplier_stamp";
agario_atlas_MainShop.not_for_guests = "not_for_guests";
agario_atlas_MainShop.play = "play";
agario_atlas_MainShop.progress_striped = "progress_striped";
agario_atlas_MainShop.skins_button = "skins_button";
agario_atlas_MainShop.sticker = "sticker";
agario_atlas_MainShop.twitter_icon = "twitter_icon";
agario_atlas_MainShop.xp_button = "xp_button";
agario_atlas_MainShop.xpboost_2x_shop = "xpboost_2x_shop";
agario_atlas_MainShop.xpboost_3x_shop = "xpboost_3x_shop";
agario_atlas_Menuscommonui.ATLAS = "menusCommonUI";
agario_atlas_Menuscommonui.back_button = "back_button";
agario_atlas_Menuscommonui.currency_icon = "currency_icon";
agario_atlas_Menuscommonui.currency_plusbox = "currency_plusbox";
agario_atlas_Menuscommonui.divider = "divider";
agario_atlas_Menuscommonui.exit_button = "exit_button";
agario_atlas_Menuscommonui.fb_icon = "fb_icon";
agario_atlas_Menuscommonui.freecoins_icon = "freecoins_icon";
agario_atlas_Menuscommonui.g__icon = "g+_icon";
agario_atlas_Menuscommonui.icon_home = "icon_home";
agario_atlas_Menuscommonui.icon_no = "icon_no";
agario_atlas_Menuscommonui.icon_no_white = "icon_no_white";
agario_atlas_Menuscommonui.icon_reconnect = "icon_reconnect";
agario_atlas_Menuscommonui.icon_reconnect_white = "icon_reconnect_white";
agario_atlas_Menuscommonui.icon_yes = "icon_yes";
agario_atlas_Menuscommonui.icon_yes_white = "icon_yes_white";
agario_atlas_Menuscommonui.loading_inside = "loading_inside";
agario_atlas_Menuscommonui.loading_outside = "loading_outside";
agario_atlas_Menuscommonui.logo = "logo";
agario_atlas_Menuscommonui.plus = "plus";
agario_atlas_Menuscommonui.profilepic_guest = "profilepic_guest";
agario_atlas_Menuscommonui.progression_empty = "progression_empty";
agario_atlas_Menuscommonui.progression_full = "progression_full";
agario_atlas_Menuscommonui.progression_white = "progression_white";
agario_atlas_Menuscommonui.scroller = "scroller";
agario_atlas_Menuscommonui.scroller_transparent = "scroller_transparent";
agario_atlas_Menuscommonui.scroller_white = "scroller_white";
agario_atlas_Menuscommonui.spinning_ball = "spinning_ball";
agario_atlas_Menuscommonui.spinning_ball_effect = "spinning_ball_effect";
agario_atlas_Menuscommonui.sticker = "sticker";
agario_atlas_Menuscommonui.stretch_darkblue_frame = "stretch_darkblue_frame";
agario_atlas_Menuscommonui.stretch_g_red_frame = "stretch_g+red_frame";
agario_atlas_Menuscommonui.stretch_green_frame = "stretch_green_frame";
agario_atlas_Menuscommonui.stretch_lightgrey_frame = "stretch_lightgrey_frame";
agario_atlas_Menuscommonui.stretch_orange_frame = "stretch_orange_frame";
agario_atlas_Menuscommonui.stretch_red_frame = "stretch_red_frame";
agario_atlas_Menuscommonui.stretch_trans_green_frame = "stretch_trans_green_frame";
agario_atlas_Menuscommonui.stretch_white_frame = "stretch_white_frame";
agario_atlas_Menuscommonui.stretch_white_green_frame = "stretch_white_green_frame";
agario_atlas_Menuscommonui.stretch_whitegrey_frame = "stretch_whitegrey_frame";
agario_atlas_Menuscommonui.stretch_whitegrey_tab = "stretch_whitegrey_tab";
agario_atlas_Menuscommonui.tapjoy_icon = "tapjoy_icon";
agario_atlas_Menuscommonui.twitter_icon = "twitter_icon";
agario_atlas_Menuscommonui.twitter_login_icon = "twitter_login_icon";
agario_atlas_Menuscommonui.whitegrey_tab = "whitegrey_tab";
agario_config_Assets.INGAME_ATLAS = [{ id : "main_shop", src : "atlas/main_shop.xml"}];
agario_config_CommandMap.list = [new oaktree_ext_commands_Command("echo",agario_config_EchoCommand)];
agario_config_Configs.NOT_FOUND = "__NOT__FOUND__";
agario_config_Configs.properties = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved.xsolla_endpoint != null) _g.setReserved("xsolla_endpoint","https://payments-dev.agario.miniclippt.com"); else _g.h["xsolla_endpoint"] = "https://payments-dev.agario.miniclippt.com";
	if(__map_reserved.root_url != null) _g.setReserved("root_url","https://flash-web-dev1-eu-central-1.agario.miniclippt.com/"); else _g.h["root_url"] = "https://flash-web-dev1-eu-central-1.agario.miniclippt.com/";
	if(__map_reserved.config_url != null) _g.setReserved("config_url","https://agario-configurations-web.s3.amazonaws.com/dev"); else _g.h["config_url"] = "https://agario-configurations-web.s3.amazonaws.com/dev";
	if(__map_reserved.load_local_configuration != null) _g.setReserved("load_local_configuration","false"); else _g.h["load_local_configuration"] = "false";
	$r = _g;
	return $r;
}(this));
agario_config_GameStates.STATE_MAIN_SCREEN = "state_main_screen";
agario_config_GameStates.STATE_SHOP_DIALOG = "state_shop_dialog";
agario_config_GameStates.STATE_PAYMENT_WINDOW = "state_xsolla_iframe";
agario_config_GameStates.STATE_OFFERWALL_WINDOW = "state_offerwall_window";
agario_config_GameStates.STATE_VIDEO_WINDOW = "state_video_window";
agario_config_GameStates.STATE_FREE_COINS_DIALOG = "state_free_coins_dialog";
agario_config_GameStates.STATE_PROFILE_DIALOG = "state_profile_dialog";
agario_config_GameStates.STATE_GUEST_LOGIN_DIALOG = "state_guest_login_dialog";
agario_config_GameStates.STATE_FREE_COINS_COLLECT_DIALOG = "stateFreeCoinsCollect";
agario_config_GameStates.PURCHASE_COMPLETE_DIALOG = "purchaseCompleteDialog";
agario_config_GameStates.LEVEL_UP_DIALOG = "levelUpDialog";
agario_config_GameStates.CONNECTION_LOST_DIALOG = "connectionLostDialog";
agario_config_GameStates.GIFT_UNAVAILABLE_DIALOG = "giftUnavailableDialog";
agario_models_VersionModel.MAJOR = "1";
agario_models_VersionModel.MINOR = "4";
agario_models_VersionModel.PATCH = "9";
agario_models_VersionModel.BUILD_NUMBER = "40";
agario_models_VersionModel.VERSION = "" + "1" + "." + "4" + "." + "9";
agario_models_VersionModel.SERVER_VERSION = "";
agario_models_VersionModel.CONFIG_NUMBER = "0";
agario_module_dom_NetworkUI.INITIAL_DELAY = 5000;
agario_module_shop_components_SkinElement.WIDTH = 150;
agario_module_shop_components_SkinElement.HEIGHT = 360;
agario_module_shop_components_SlotControl.WIDTH = 150;
agario_module_shop_components_SlotControl.HEIGHT = 360;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
agario_module_shop_events_HintTooltipEvent.OPENED = "HintTooltipEvent::OPENED";
agario_module_shop_events_HintTooltipEvent.CLOSED = "HintTooltipEvent::CLOSED";
agario_module_shop_events_ShopEvent.READY = "ShopEvent::Ready";
agario_module_shop_events_ShopEvent.BUY = "ShopEvent::BUY";
agario_module_shop_events_ShopEvent.USE = "ShopEvent::USE";
agario_module_shop_events_ShopEvent.UNEQUIP = "ShopEvent::UNEQUIP";
agario_module_shop_events_ShopEvent.DISABLE_SHOP = "ShopEvent::DISABLE_SHOP";
agario_module_shop_events_ShopEvent.ENABLE_SHOP = "ShopEvent::ENABLE_SHOP";
agario_module_shop_events_ShopEvent.SHOP_ENABLED = "ShopEvent::SHOP_ENABLED";
agario_module_shop_events_ShopEvent.CONFIGURATION_LOADED = "ShopEvent::CONFIGURATION_LOADED";
agario_module_shop_events_ShopEvent.CONNECTION_LOST = "ShopEvent::connectionLost";
agario_module_shop_events_ShopEvent.SHOW_GUEST_CONVERSION_POPUP = "ShopEvent::show_guest_conversion";
agario_module_shop_events_ShopEvent.USE_PRODUCT_RESPONSE = "ShopEvent::useProductResponse";
agario_module_shop_events_ShopEvent.SOFT_PURCHASE_COMPLETE = "ShopEvent::softPurchaseComplete";
agario_module_shop_events_ShopEvent.SOFT_PURCHASE_FAILED = "shopevent::soft_purchase_failed";
agario_module_shop_events_ShopEvent.INAPP_PURCHASE_COMPLETE = "ShopEvent::INAPP_PURCHASE_COMPLETE";
agario_module_shop_events_ShopEvent.FREE_COINS_RESPONSE = "ShopEvent::freeCoinsResponse";
agario_module_shop_events_ShopEvent.CHECK_VIDEOS = "ShopEvent::checkVideos";
agario_module_shop_events_ShopEvent.USE_PRODUCT_FAILED = "ShopEvent::useProductFailed";
agario_module_shop_events_ShopEvent.ALLOW_DISABLE_CLOSE = "shop_event::allow_disable_close";
agario_module_shop_events_ShopEvent.SHOW_GIFT_UNAVAILABLE = "shop_event::showGiftUnavailable";
agario_module_shop_events_WalletEvent.WALLET_UPDATED = "WalletEvent::UPDATED";
agario_module_shop_models_GameUser.GUEST_USER_COIN_VALUE = 100;
oaktree_core_VO.__rtti = "<class path=\"oaktree.core.VO\" params=\"\">\n\t<classCache expr=\"&apos;???&apos;\" line=\"16\" static=\"1\">\n\t\t<x path=\"Map\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<x path=\"Map\">\n\t\t\t\t<c path=\"String\"/>\n\t\t\t\t<e path=\"oaktree.core.VOTypes\"/>\n\t\t\t</x>\n\t\t</x>\n\t\t<meta><m n=\":value\"><e>'???'</e></m></meta>\n\t</classCache>\n\t<addFieldDeclaration public=\"1\" set=\"method\" line=\"202\" static=\"1\"><f a=\"className:fieldName:fieldType\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<e path=\"oaktree.core.VOTypes\"/>\n\t<x path=\"Void\"/>\n</f></addFieldDeclaration>\n\t<classHasField public=\"1\" set=\"method\" line=\"210\" static=\"1\"><f a=\"className:fieldName\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n</f></classHasField>\n\t<handleSpecialTypes set=\"method\" line=\"26\"><f a=\"key:obj\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Bool\"/>\n</f></handleSpecialTypes>\n\t<hasField set=\"method\" line=\"31\"><f a=\"fieldToFind\">\n\t<c path=\"String\"/>\n\t<x path=\"Bool\"/>\n</f></hasField>\n\t<setValues public=\"1\" set=\"method\" line=\"40\"><f a=\"obj\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></setValues>\n\t<_parse set=\"method\" line=\"84\"><f a=\"type:v\">\n\t<e path=\"oaktree.core.VOTypes\"/>\n\t<d/>\n\t<d/>\n</f></_parse>\n\t<_parseClass set=\"method\" line=\"101\"><f a=\"name:v\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<d/>\n</f></_parseClass>\n\t<resolveVOType set=\"method\" line=\"128\"><f a=\"type\">\n\t<e path=\"oaktree.core.VOTypes\"/>\n\t<x path=\"Class\"><d/></x>\n</f></resolveVOType>\n\t<_parseArray params=\"T\" set=\"method\" line=\"139\">\n\t\t<f a=\"valueClass:valueType:v\">\n\t\t\t<c path=\"_parseArray.T\"/>\n\t\t\t<e path=\"oaktree.core.VOTypes\"/>\n\t\t\t<d/>\n\t\t\t<c path=\"Array\"><c path=\"_parseArray.T\"/></c>\n\t\t</f>\n\t\t<meta><m n=\":has_untyped\"/></meta>\n\t</_parseArray>\n\t<parseRTTIFields set=\"method\" line=\"151\"><f a=\"type\">\n\t<e path=\"haxe.rtti.CType\"/>\n\t<e path=\"oaktree.core.VOTypes\"/>\n</f></parseRTTIFields>\n\t<parseFieldType set=\"method\" line=\"162\"><f a=\"name:params\">\n\t<c path=\"String\"/>\n\t<c path=\"List\"><e path=\"haxe.rtti.CType\"/></c>\n\t<e path=\"oaktree.core.VOTypes\"/>\n</f></parseFieldType>\n\t<loadFieldInfo set=\"method\" line=\"179\">\n\t\t<f a=\"?rootCall:className:classObj\" v=\"false::\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<c path=\"String\"/>\n\t\t\t<x path=\"Class\"><d/></x>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{rootCall:false}</e></m></meta>\n\t</loadFieldInfo>\n\t<getDeclaredTypeOfField public=\"1\" set=\"method\" line=\"221\"><f a=\"className:field\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n\t<e path=\"oaktree.core.VOTypes\"/>\n</f></getDeclaredTypeOfField>\n\t<DEBUG public=\"1\" get=\"accessor\" set=\"null\"><x path=\"Bool\"/></DEBUG>\n\t<get_DEBUG set=\"method\" line=\"234\"><f a=\"\"><x path=\"Bool\"/></f></get_DEBUG>\n\t<new public=\"1\" set=\"method\" line=\"18\">\n\t\t<f a=\"?obj\" v=\"null\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{obj:null}</e></m></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
oaktree_core_VO.classCache = new haxe_ds_StringMap();
agario_module_shop_models_ShopModel.__meta__ = { fields : { userSettings : { name : ["Default Settings - User"]}, localizationSettings : { name : ["Default Settings - Localization"]}, defaultCommunicationSettings : { name : ["Default Settings - Comm."]}, shopCoins : { name : ["Shop - Coins"]}, shopBoostCategories : { name : ["Shop - Boost Categories"]}, shopBoostItems : { name : ["Shop - Boost Items"]}, shopSkins : { name : ["Shop - Skins"]}, shopPriceCurrency : { name : ["Prices - Currencies"]}, shopPriceMatrix : { name : ["Prices - Matrix"]}, shopSkinTabs : { name : ["Visual - Shop Skins Tabs"]}, walletInappPurchases : { name : ["Wallet - In-App Purchases"]}, walletSoftPurchases : { name : ["Wallet - Soft Purchases"]}, walletProductBundles : { name : ["Wallet - Product Bundles"]}, walletProducts : { name : ["Wallet - Products"]}, externalSocialStories : { name : ["External - Social Stories"]}, gamePlayBoosts : { name : ["Gameplay - Boosts"]}, gamePlaySkins : { name : ["Gameplay - Equippable Skins"]}, freeSkins : { name : ["Gameplay - Free Skins"]}, xpList : { name : ["Gameplay - XP to Level"]}, walletBonusRewards : { name : ["Wallet - Bonuses and Rewards"]}}};
agario_module_shop_models_ShopModel.__rtti = "<class path=\"agario.module.shop.models.ShopModel\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<countr_code public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</countr_code>\n\t<currency public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currency>\n\t<userSettings public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.UserSettingVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Default Settings - User\"</e></m>\n\t\t</meta>\n\t</userSettings>\n\t<localizationSettings public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.UserSettingVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Default Settings - Localization\"</e></m>\n\t\t</meta>\n\t</localizationSettings>\n\t<defaultCommunicationSettings public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.UserSettingVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Default Settings - Comm.\"</e></m>\n\t\t</meta>\n\t</defaultCommunicationSettings>\n\t<shopCoins public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.CurrencyItemVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Shop - Coins\"</e></m>\n\t\t</meta>\n\t</shopCoins>\n\t<shopBoostCategories public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.ShopBoostCategoryVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Shop - Boost Categories\"</e></m>\n\t\t</meta>\n\t</shopBoostCategories>\n\t<shopBoostItems public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.ShopBoostItemVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Shop - Boost Items\"</e></m>\n\t\t</meta>\n\t</shopBoostItems>\n\t<shopSkins public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.ShopSkinItemVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Shop - Skins\"</e></m>\n\t\t</meta>\n\t</shopSkins>\n\t<shopPriceCurrency public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.PriceCurrencyVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Prices - Currencies\"</e></m>\n\t\t</meta>\n\t</shopPriceCurrency>\n\t<shopPriceMatrix public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.PriceTierVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Prices - Matrix\"</e></m>\n\t\t</meta>\n\t</shopPriceMatrix>\n\t<shopSkinTabs public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.ShopSkinTabVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Visual - Shop Skins Tabs\"</e></m>\n\t\t</meta>\n\t</shopSkinTabs>\n\t<walletInappPurchases public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.WalletInappPurchaseVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Wallet - In-App Purchases\"</e></m>\n\t\t</meta>\n\t</walletInappPurchases>\n\t<walletSoftPurchases public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.WalletSoftPurchaseVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Wallet - Soft Purchases\"</e></m>\n\t\t</meta>\n\t</walletSoftPurchases>\n\t<walletProductBundles public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.WalletProductBundleVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Wallet - Product Bundles\"</e></m>\n\t\t</meta>\n\t</walletProductBundles>\n\t<walletProducts public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.WalletProductVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Wallet - Products\"</e></m>\n\t\t</meta>\n\t</walletProducts>\n\t<externalSocialStories public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.SocialStoryVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"External - Social Stories\"</e></m>\n\t\t</meta>\n\t</externalSocialStories>\n\t<gamePlayBoosts public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.GamePlayBoostVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Gameplay - Boosts\"</e></m>\n\t\t</meta>\n\t</gamePlayBoosts>\n\t<gamePlaySkins public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.GamePlaySkinVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Gameplay - Equippable Skins\"</e></m>\n\t\t</meta>\n\t</gamePlaySkins>\n\t<freeSkins public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.FreeSkinVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Gameplay - Free Skins\"</e></m>\n\t\t</meta>\n\t</freeSkins>\n\t<xpList public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.XPItemVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Gameplay - XP to Level\"</e></m>\n\t\t</meta>\n\t</xpList>\n\t<walletBonusRewards public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.BonusRewardVO\"/></c>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\"name\"><e>\"Wallet - Bonuses and Rewards\"</e></m>\n\t\t</meta>\n\t</walletBonusRewards>\n\t<new public=\"1\" set=\"method\" line=\"91\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_types_BoostType.XP_BOOST = "xp_boost";
agario_module_shop_models_types_BoostType.MASS_BOOST = "mass_boost";
agario_module_shop_models_types_ShopItemType.INAPP = "INAPP";
agario_module_shop_models_types_ShopItemType.SOFT = "SOFT";
agario_module_shop_models_types_ShopItemType.REWARD = "REWARD";
agario_module_shop_models_vo_BonusRewardVO.__rtti = "<class path=\"agario.module.shop.models.vo.BonusRewardVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<bonusId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bonusId>\n\t<bonusQty public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bonusQty>\n\t<bonusProductId public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bonusProductId>\n\t<productUpdateOrigin public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productUpdateOrigin>\n\t<new set=\"method\" line=\"12\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_ShopItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.ShopItemVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<purchaseId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</purchaseId>\n\t<price public=\"1\">\n\t\t<x path=\"Float\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</price>\n\t<purchaseType public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</purchaseType>\n\t<type public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</type>\n\t<isReward public=\"1\" line=\"15\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</isReward>\n\t<purchaseInfo public=\"1\">\n\t\t<d/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</purchaseInfo>\n\t<owned public=\"1\" get=\"accessor\" set=\"accessor\" line=\"20\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</owned>\n\t<get_owned set=\"method\" line=\"21\">\n\t\t<f a=\"\"><x path=\"Bool\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_owned>\n\t<set_owned set=\"method\" line=\"22\">\n\t\t<f a=\"value\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Bool\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_owned>\n\t<inUse public=\"1\" get=\"accessor\" set=\"accessor\" line=\"24\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</inUse>\n\t<get_inUse set=\"method\" line=\"25\">\n\t\t<f a=\"\"><x path=\"Bool\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_inUse>\n\t<set_inUse set=\"method\" line=\"26\">\n\t\t<f a=\"value\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Bool\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_inUse>\n\t<name public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</name>\n\t<description public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</description>\n\t<new public=\"1\" set=\"method\" line=\"33\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_CurrencyItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.CurrencyItemVO\" params=\"\">\n\t<extends path=\"agario.module.shop.models.vo.ShopItemVO\"/>\n\t<preAmount public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</preAmount>\n\t<finalAmount public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</finalAmount>\n\t<banner public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</banner>\n\t<visibility public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</visibility>\n\t<currency_code public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currency_code>\n\t<percentage public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</percentage>\n\t<new public=\"1\" set=\"method\" line=\"19\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_ExchangeRateVO.__rtti = "<class path=\"agario.module.shop.models.vo.ExchangeRateVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<currency_offset public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currency_offset>\n\t<usd_exchange public=\"1\">\n\t\t<x path=\"Float\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</usd_exchange>\n\t<usd_exchange_inverse public=\"1\">\n\t\t<x path=\"Float\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</usd_exchange_inverse>\n\t<user_currency public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</user_currency>\n\t<new public=\"1\" set=\"method\" line=\"14\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_GamePlayBoostVO.__rtti = "<class path=\"agario.module.shop.models.vo.GamePlayBoostVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<productId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productId>\n\t<type public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</type>\n\t<multiplier public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</multiplier>\n\t<duration public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</duration>\n\t<new public=\"1\" set=\"method\" line=\"15\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_GamePlaySkinVO.__rtti = "<class path=\"agario.module.shop.models.vo.GamePlaySkinVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<gameplayId public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</gameplayId>\n\t<image public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</image>\n\t<shopImage public=\"1\" get=\"accessor\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</shopImage>\n\t<get_shopImage set=\"method\" line=\"17\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_shopImage>\n\t<set_shopImage set=\"method\" line=\"22\">\n\t\t<f a=\"value\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"String\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_shopImage>\n\t<gamePlayImage public=\"1\" get=\"accessor\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</gamePlayImage>\n\t<get_gamePlayImage set=\"method\" line=\"25\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_gamePlayImage>\n\t<set_gamePlayImage set=\"method\" line=\"34\">\n\t\t<f a=\"value\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"String\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_gamePlayImage>\n\t<cellColor public=\"1\" get=\"accessor\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</cellColor>\n\t<get_cellColor set=\"method\" line=\"37\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_cellColor>\n\t<set_cellColor set=\"method\" line=\"38\">\n\t\t<f a=\"value\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"String\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_cellColor>\n\t<productId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productId>\n\t<new public=\"1\" set=\"method\" line=\"45\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_FreeSkinVO.__rtti = "<class path=\"agario.module.shop.models.vo.FreeSkinVO\" params=\"\" module=\"agario.module.shop.models.vo.GamePlaySkinVO\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<image public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</image>\n\t<showName public=\"1\" line=\"58\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</showName>\n\t<gamePlayImage public=\"1\" get=\"accessor\" set=\"null\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</gamePlayImage>\n\t<get_gamePlayImage set=\"method\" line=\"61\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_gamePlayImage>\n\t<new public=\"1\" set=\"method\" line=\"53\"><f a=\"?obj\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_PlayerInfoVO.__rtti = "<class path=\"agario.module.shop.models.vo.PlayerInfoVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<currentSkin public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currentSkin>\n\t<wallet public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.WalletItemVO\"/></c>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</wallet>\n\t<coinAmount public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</coinAmount>\n\t<getWalletItemById public=\"1\" set=\"method\" line=\"19\">\n\t\t<f a=\"id\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"agario.module.shop.models.vo.WalletItemVO\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</getWalletItemById>\n\t<new public=\"1\" set=\"method\" line=\"14\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_PriceCurrencyVO.__rtti = "<class path=\"agario.module.shop.models.vo.PriceCurrencyVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<new public=\"1\" set=\"method\" line=\"14\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_PriceTierVO.__rtti = "<class path=\"agario.module.shop.models.vo.PriceTierVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<tier public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</tier>\n\t<currencies public=\"1\">\n\t\t<x path=\"Map\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<x path=\"Float\"/>\n\t\t</x>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currencies>\n\t<getPriceByCurrency public=\"1\" set=\"method\" line=\"27\">\n\t\t<f a=\"currency\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<x path=\"Float\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</getPriceByCurrency>\n\t<new public=\"1\" set=\"method\" line=\"15\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_ServerInfoVO.__rtti = "<class path=\"agario.module.shop.models.vo.ServerInfoVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<host public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</host>\n\t<tcpPort public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</tcpPort>\n\t<udpPort public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</udpPort>\n\t<new public=\"1\" set=\"method\" line=\"15\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_ShopBoostCategoryVO.__rtti = "<class path=\"agario.module.shop.models.vo.ShopBoostCategoryVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<shopId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</shopId>\n\t<position public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</position>\n\t<title public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</title>\n\t<description public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</description>\n\t<image public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</image>\n\t<spritesheet public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</spritesheet>\n\t<new public=\"1\" set=\"method\" line=\"17\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_ShopBoostItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.ShopBoostItemVO\" params=\"\">\n\t<extends path=\"agario.module.shop.models.vo.ShopItemVO\"/>\n\t<categoryShopId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</categoryShopId>\n\t<title public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</title>\n\t<bestDealSticker public=\"1\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bestDealSticker>\n\t<position public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</position>\n\t<categoryPosition public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</categoryPosition>\n\t<productIdToQuantify public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productIdToQuantify>\n\t<category public=\"1\">\n\t\t<c path=\"agario.module.shop.models.vo.ShopBoostCategoryVO\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</category>\n\t<gameplayInfo public=\"1\">\n\t\t<c path=\"agario.module.shop.models.vo.GamePlayBoostVO\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</gameplayInfo>\n\t<new public=\"1\" set=\"method\" line=\"19\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_ShopSkinItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.ShopSkinItemVO\" params=\"\">\n\t<extends path=\"agario.module.shop.models.vo.ShopItemVO\"/>\n\t<originId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</originId>\n\t<productIdToQuantify public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productIdToQuantify>\n\t<image public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</image>\n\t<tab public=\"1\" line=\"15\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</tab>\n\t<title public=\"1\" get=\"accessor\" set=\"accessor\">\n\t\t<c path=\"String\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</title>\n\t<get_title set=\"method\" line=\"18\">\n\t\t<f a=\"\"><c path=\"String\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_title>\n\t<set_title set=\"method\" line=\"25\">\n\t\t<f a=\"value\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"String\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_title>\n\t<visibility public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</visibility>\n\t<isVisible public=\"1\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</isVisible>\n\t<gamePlayInfo public=\"1\">\n\t\t<c path=\"agario.module.shop.models.vo.GamePlaySkinVO\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</gamePlayInfo>\n\t<availableAtLevel public=\"1\" line=\"34\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</availableAtLevel>\n\t<new public=\"1\" set=\"method\" line=\"37\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_ShopSkinTabVO.__rtti = "<class path=\"agario.module.shop.models.vo.ShopSkinTabVO\" params=\"\">\n\t<extends path=\"agario.module.shop.models.vo.ShopItemVO\"/>\n\t<tabName public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</tabName>\n\t<isNormalSort public=\"1\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</isNormalSort>\n\t<tabDescription public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</tabDescription>\n\t<new public=\"1\" set=\"method\" line=\"16\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_SocialStoryVO.__rtti = "<class path=\"agario.module.shop.models.vo.SocialStoryVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<icon public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</icon>\n\t<iconURL public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</iconURL>\n\t<titleTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</titleTag>\n\t<subtitleTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</subtitleTag>\n\t<descriptionTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</descriptionTag>\n\t<descriptionAndroidTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</descriptionAndroidTag>\n\t<twitterTitleTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</twitterTitleTag>\n\t<twitterSubtitleTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</twitterSubtitleTag>\n\t<twitterDescriptionTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</twitterDescriptionTag>\n\t<twitterDescriptionAndroidTag public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</twitterDescriptionAndroidTag>\n\t<new public=\"1\" set=\"method\" line=\"23\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_UserInfoVO.__rtti = "<class path=\"agario.module.shop.models.vo.UserInfoVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<displayName public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</displayName>\n\t<xp public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</xp>\n\t<level public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</level>\n\t<hasLoggedIntoMobile public=\"1\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</hasLoggedIntoMobile>\n\t<xpNeeded public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</xpNeeded>\n\t<userTimedEvents public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.TimedEventVO\"/></c>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</userTimedEvents>\n\t<setTimedEvent public=\"1\" set=\"method\" line=\"24\">\n\t\t<f a=\"te\">\n\t\t\t<c path=\"agario.module.shop.models.vo.TimedEventVO\"/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</setTimedEvent>\n\t<getTimedEvent public=\"1\" set=\"method\" line=\"34\">\n\t\t<f a=\"eventId\">\n\t\t\t<c path=\"String\"/>\n\t\t\t<c path=\"agario.module.shop.models.vo.TimedEventVO\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</getTimedEvent>\n\t<new public=\"1\" set=\"method\" line=\"19\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_UserSettingVO.__rtti = "<class path=\"agario.module.shop.models.vo.UserSettingVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<key public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</key>\n\t<value public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</value>\n\t<new public=\"1\" set=\"method\" line=\"13\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_UserStatsVO.__rtti = "<class path=\"agario.module.shop.models.vo.UserStatsVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<gamesPlayed public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</gamesPlayed>\n\t<massConsumed public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</massConsumed>\n\t<averageScore public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</averageScore>\n\t<highestMass public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</highestMass>\n\t<longestTimeAlive public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</longestTimeAlive>\n\t<mostCellsEaten public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</mostCellsEaten>\n\t<new public=\"1\" set=\"method\" line=\"19\">\n\t\t<f a=\"?obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_WalletInappPurchaseVO.__rtti = "<class path=\"agario.module.shop.models.vo.WalletInappPurchaseVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<bundleId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bundleId>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<priceTier public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</priceTier>\n\t<localizedName public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</localizedName>\n\t<localizedDescription public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</localizedDescription>\n\t<new public=\"1\" set=\"method\" line=\"18\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_WalletItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.WalletItemVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<productId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productId>\n\t<_balance>\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</_balance>\n\t<balance public=\"1\" get=\"accessor\" set=\"accessor\">\n\t\t<x path=\"Int\"/>\n\t\t<meta>\n\t\t\t<m n=\":keep\"/>\n\t\t\t<m n=\":isVar\"/>\n\t\t</meta>\n\t</balance>\n\t<get_balance set=\"method\" line=\"16\">\n\t\t<f a=\"\"><x path=\"Int\"/></f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</get_balance>\n\t<set_balance set=\"method\" line=\"17\">\n\t\t<f a=\"value\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</set_balance>\n\t<inUse public=\"1\" line=\"26\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</inUse>\n\t<new public=\"1\" set=\"method\" line=\"28\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_WalletProductBundleVO.__rtti = "<class path=\"agario.module.shop.models.vo.WalletProductBundleVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<productId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</productId>\n\t<quantity public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</quantity>\n\t<new public=\"1\" set=\"method\" line=\"15\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_WalletProductVO.__rtti = "<class path=\"agario.module.shop.models.vo.WalletProductVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<type public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</type>\n\t<consumable public=\"1\">\n\t\t<x path=\"Bool\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</consumable>\n\t<new public=\"1\" set=\"method\" line=\"16\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_WalletSoftPurchaseVO.__rtti = "<class path=\"agario.module.shop.models.vo.WalletSoftPurchaseVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<bundleId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</bundleId>\n\t<currencyAmount public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currencyAmount>\n\t<currencyProductId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currencyProductId>\n\t<id public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</id>\n\t<new public=\"1\" set=\"method\" line=\"16\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_XPItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.XPItemVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<level public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</level>\n\t<xpToNextLevel public=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</xpToNextLevel>\n\t<levelUpBonusId public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</levelUpBonusId>\n\t<new public=\"1\" set=\"method\" line=\"15\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
agario_module_shop_models_vo_XsollaShopItemsVO.__rtti = "<class path=\"agario.module.shop.models.vo.XsollaShopItemsVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<items public=\"1\">\n\t\t<c path=\"Array\"><c path=\"agario.module.shop.models.vo.XsollaShopItemVO\"/></c>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</items>\n\t<currency_code public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</currency_code>\n\t<new public=\"1\" set=\"method\" line=\"10\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":keep\"/>\n\t</meta>\n</class>";
agario_module_shop_models_vo_XsollaShopItemVO.__rtti = "<class path=\"agario.module.shop.models.vo.XsollaShopItemVO\" params=\"\" module=\"agario.module.shop.models.vo.XsollaShopItemsVO\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<sku public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</sku>\n\t<description public=\"1\">\n\t\t<c path=\"String\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</description>\n\t<price public=\"1\">\n\t\t<x path=\"Float\"/>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</price>\n\t<new public=\"1\" set=\"method\" line=\"23\">\n\t\t<f a=\"obj\">\n\t\t\t<d/>\n\t\t\t<x path=\"Void\"/>\n\t\t</f>\n\t\t<meta><m n=\":keep\"/></meta>\n\t</new>\n\t<meta><m n=\":keep\"/></meta>\n</class>";
oaktree_ext_ui_views_GenericDialog.DISABLE_CLOSED = "ShopEvent::DISABLE_CLOSED";
oaktree_ext_ui_views_GenericDialog.CLOSE = "close";
agario_module_user_view_LevelUpDialog.LEVELS_PER_SKIN_REWARD = 5;
agario_proto_cell_$state_Cell_$type_$enum.normal_cell = 1;
agario_proto_cell_$state_Cell_$type_$enum.virus = 2;
agario_proto_cell_$state_Cell_$type_$enum.food = 3;
agario_proto_device_Platform_$enum.ios = 1;
agario_proto_device_Platform_$enum.android = 2;
agario_proto_device_Platform_$enum.web_facebook = 3;
agario_proto_device_Platform_$enum.web_miniclip = 4;
agario_proto_device_Platform_$enum.web_agario = 5;
agario_proto_disconnect_Reason_$enum.reconnect = 1;
agario_proto_disconnect_Reason_$enum.incompatible_client = 2;
agario_proto_disconnect_Reason_$enum.not_authorized = 3;
agario_proto_disconnect_Reason_$enum.invalid_login = 4;
agario_proto_envelope_Content_$type_$enum.uncompressed = 1;
agario_proto_envelope_Content_$type_$enum.compressed = 2;
agario_proto_inapp_$purchase_$response_Result_$enum.success = 1;
agario_proto_inapp_$purchase_$response_Result_$enum.try_again_later = 2;
agario_proto_inapp_$purchase_$response_Result_$enum.invalid_receipt = 3;
agario_proto_inapp_$purchase_$response_Result_$enum.unknown_purchase_id = 4;
agario_proto_login_$request_Realm_$enum.guest = 1;
agario_proto_login_$request_Realm_$enum.facebook = 2;
agario_proto_login_$request_Realm_$enum.googleplus = 3;
agario_proto_login_$response_Current_$game_$state_$enum.not_playing = 1;
agario_proto_login_$response_Current_$game_$state_$enum.playing = 2;
agario_proto_login_$response_Realm_$enum.guest = 1;
agario_proto_login_$response_Realm_$enum.facebook = 2;
agario_proto_login_$response_Realm_$enum.googleplus = 3;
agario_proto_product_$update_Origin_$enum.new_account = 0;
agario_proto_product_$update_Origin_$enum.xp_level_up = 1;
agario_proto_product_$update_Origin_$enum.soft_purchase = 2;
agario_proto_product_$update_Origin_$enum.inapp_purchase = 3;
agario_proto_product_$update_Origin_$enum.xp_boost_activation = 4;
agario_proto_product_$update_Origin_$enum.mass_boost_activation = 5;
agario_proto_product_$update_Origin_$enum.hourly_bonus = 6;
agario_proto_product_$update_Origin_$enum.reward_platform = 7;
agario_proto_product_$update_Origin_$enum.payment_platform = 8;
agario_proto_product_$update_Origin_$enum.retro_veteran_skin = 9;
agario_proto_product_$update_Origin_$enum.gifting = 10;
agario_proto_product_$update_Type_$enum.currency = 0;
agario_proto_product_$update_Type_$enum.boost = 1;
agario_proto_product_$update_Type_$enum.skin = 2;
agario_proto_realm_$upgrade_$request_Realm_$enum.facebook = 1;
agario_proto_realm_$upgrade_$request_Realm_$enum.googleplus = 2;
agario_proto_realm_$upgrade_$response_Realm_$enum.facebook = 1;
agario_proto_realm_$upgrade_$response_Realm_$enum.googleplus = 2;
agario_proto_req_Type_$enum.login_request = 10;
agario_proto_req_Type_$enum.login_response = 11;
agario_proto_req_Type_$enum.realm_upgrade_request = 12;
agario_proto_req_Type_$enum.realm_upgrade_response = 13;
agario_proto_req_Type_$enum.disconnect = 20;
agario_proto_req_Type_$enum.ping = 30;
agario_proto_req_Type_$enum.pong = 31;
agario_proto_req_Type_$enum.udp_handshake = 32;
agario_proto_req_Type_$enum.enter_game_request = 40;
agario_proto_req_Type_$enum.leave_game_request = 41;
agario_proto_req_Type_$enum.activate_boost_request = 42;
agario_proto_req_Type_$enum.activate_boost_response = 43;
agario_proto_req_Type_$enum.direction_vector = 50;
agario_proto_req_Type_$enum.player_split = 51;
agario_proto_req_Type_$enum.player_shoot_mass = 52;
agario_proto_req_Type_$enum.leaderboard = 60;
agario_proto_req_Type_$enum.arena_state = 61;
agario_proto_req_Type_$enum.game_over = 62;
agario_proto_req_Type_$enum.soft_purchase_request = 70;
agario_proto_req_Type_$enum.soft_purchase_response = 71;
agario_proto_req_Type_$enum.apple_inapp_purchase_request = 72;
agario_proto_req_Type_$enum.google_inapp_purchase_request = 73;
agario_proto_req_Type_$enum.inapp_purchase_response = 74;
agario_proto_req_Type_$enum.activate_timed_event_request = 75;
agario_proto_req_Type_$enum.activate_timed_event_response = 76;
agario_proto_req_Type_$enum.wallet_updates = 77;
agario_proto_req_Type_$enum.purchase_wallet_updates = 78;
agario_proto_req_Type_$enum.update_user_settings_request = 80;
agario_proto_req_Type_$enum.update_user_settings_response = 81;
agario_proto_req_Type_$enum.server_to_server_game_over_wrapper = 90;
agario_proto_req_Type_$enum.claim_gifts_request = 100;
agario_proto_req_Type_$enum.claim_gifts_response = 101;
agario_proto_req_Type_$enum.send_gifts = 102;
agario_proto_req_Type_$enum.consume_requests = 103;
agario_proto_req_Type_$enum.request_gifts = 104;
agario_proto_soft_$purchase_$response_Result_$enum.success = 1;
agario_proto_soft_$purchase_$response_Result_$enum.insufficient_funds = 2;
agario_proto_soft_$purchase_$response_Result_$enum.unknown_purchase_id = 3;
agario_proto_user_$data_$update_Type_$enum.xp_level = 10;
agario_proto_user_$data_$update_Type_$enum.product = 20;
agario_proto_user_$setting_Key_$enum.selected_skin_id = 1;
agario_proto_user_$setting_Key_$enum.stop_on_release = 2;
agario_proto_user_$setting_Key_$enum.direction_on_touch = 3;
agario_proto_user_$setting_Key_$enum.button_positions = 4;
agario_proto_user_$setting_Key_$enum.show_mass = 5;
agario_proto_user_$setting_Key_$enum.show_arrow = 6;
agario_proto_user_$setting_Key_$enum.dark_background = 7;
agario_proto_user_$setting_Key_$enum.show_level = 8;
agario_proto_user_$setting_Type_$enum.is_string = 1;
agario_proto_user_$setting_Type_$enum.is_int32 = 2;
agario_services_ConfigurationService.configID = "-";
agario_services_PaymentEvent.GOT_CURRENCY_CODE = "payment_event::got_currency_code";
agario_views_ShopDialog.SHOP_MAIN = "shopMain";
agario_views_ShopDialog.SHOP_CURRENCY = "shopCurrency";
agario_views_ShopDialog.SHOP_SKINS = "shopSkins";
agario_views_ShopDialog.SHOP_MASS = "shopMass";
agario_views_ShopDialog.SHOP_BOOST = "shopBoost";
assets_manager_loaders_LoaderManager.EVT_FILE_LOAD_COMPLETE = "evtFileLoadComplete";
format_tools__$InflateImpl_Window.SIZE = 32768;
format_tools__$InflateImpl_Window.BUFSIZE = 65536;
format_tools_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
format_tools_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
format_tools_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
format_tools_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
format_tools_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
format_tools_InflateImpl.FIXED_HUFFMAN = null;
gamepad_HTML5GamepadManager.epsilon = 0.00002;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
haxe_zip_InflateImpl.FIXED_HUFFMAN = null;
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_CFFI.__moduleNames = null;
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_Bytes.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
oaktree_OakTree.events = new oaktree_core_events_Dispatcher();
oaktree_OakTree.commands = new oaktree_ext_commands_Commands();
oaktree_OakTree._isInitialized = false;
oaktree_core_Entity._idCounter = 0;
oaktree_core_Log._level = 2;
oaktree_core_Log._log_width = 16;
oaktree_core_events_ConnectionEvent.RETRY_ATTEMPTS_ENDED = "retryAttemptsEnded";
oaktree_core_events_UserEvent.USER_LOGGED = "UserEvent::USER_LOGGED";
oaktree_core_io_IO._ftypeMapping = new haxe_ds_StringMap();
oaktree_debug_events_DebugLayerEvent.ADDED = "debugLayerAdded";
oaktree_debug_events_DebugLayerEvent.REMOVED = "debugLayerRemoved";
oaktree_debug_events_DebugLayerEvent.NAME_CHANGED = "debugLayerNameChanged";
oaktree_debug_events_DebugLayerEvent.VISIBILITY_CHANGED = "debugLayerVisibilityChanged";
oaktree_debug_events_DebugOptionEvent.ADDED = "debugOptionAdded";
oaktree_debug_events_DebugOptionEvent.REMOVED = "debugOptionRemoved";
oaktree_debug_events_DebugOptionEvent.ENABLED_CHANGED = "debugOptionEnabledChanged";
oaktree_debug_metrics_MetricsPanel.FONT = "Arial";
oaktree_debug_metrics_MetricsPanel.FONT_SIZE = 11;
oaktree_debug_metrics_MetricsPanel.FONT_COLOR = 16777215;
oaktree_debug_metrics_MetricsPanel.FPS_SAMPLE_INTERVAL = 500;
oaktree_debug_metrics_MetricsPanel.PADDING = 5;
oaktree_debug_ui_DebugPanel.BACKGROUND_COLOR = 3355443;
oaktree_debug_ui_DebugPanel.BACKGROUND_ALPHA = 0.6;
oaktree_debug_ui_DebugPanel.HEIGHT = 200;
oaktree_debug_ui_DebugPanel.TAB_BUTTON_HEIGHT = 20;
oaktree_debug_ui_DebugPanelTabButton.UP_STATE_COLOR = 10066329;
oaktree_debug_ui_DebugPanelTabButton.OVER_STATE_COLOR = 11184810;
oaktree_debug_ui_DebugPanelTabButton.DOWN_STATE_COLOR = 13421772;
oaktree_debug_ui_DebugPanelTabButton.FONT = "Arial";
oaktree_debug_ui_DebugPanelTabButton.FONT_SIZE = 12;
oaktree_debug_ui_DebugPanelTabButton.FONT_COLOR = 3355443;
oaktree_display_AssetsManager.webRegex = new EReg("(\\-web\\b)|(-web)$","g");
oaktree_display_BaseTexture.sOrigin = new openfl_geom_Point();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
oaktree_display_SubTexture._tTexCoords = new openfl_geom_Point();
oaktree_display_SubTexture._tMatrix = new openfl_geom_Matrix();
oaktree_ext_localization_I18n.onInit = new msignal_Signal0();
oaktree_ext_localization_I18n.initialized = false;
oaktree_objects_FramedSpriteVO.__rtti = "<class path=\"oaktree.objects.FramedSpriteVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<scaleHorizontal public=\"1\"><x path=\"Bool\"/></scaleHorizontal>\n\t<scaleVertical public=\"1\"><x path=\"Bool\"/></scaleVertical>\n\t<texture public=\"1\"><c path=\"String\"/></texture>\n\t<imageFrameName public=\"1\"><c path=\"String\"/></imageFrameName>\n\t<leftX public=\"1\" line=\"14\"><x path=\"Int\"/></leftX>\n\t<rightX public=\"1\" line=\"15\"><x path=\"Int\"/></rightX>\n\t<bottomY public=\"1\" line=\"16\"><x path=\"Int\"/></bottomY>\n\t<topY public=\"1\" line=\"17\"><x path=\"Int\"/></topY>\n\t<handleSpecialTypes set=\"method\" line=\"27\" override=\"1\"><f a=\"key:obj\">\n\t<c path=\"String\"/>\n\t<d/>\n\t<x path=\"Bool\"/>\n</f></handleSpecialTypes>\n\t<removeExtension set=\"method\" line=\"58\"><f a=\"frameName\">\n\t<c path=\"String\"/>\n\t<c path=\"String\"/>\n</f></removeExtension>\n\t<asRectangle public=\"1\" set=\"method\" line=\"64\"><f a=\"\"><c path=\"openfl.geom.Rectangle\"/></f></asRectangle>\n\t<clone public=\"1\" set=\"method\" line=\"69\"><f a=\"\"><c path=\"oaktree.objects.FramedSpriteVO\"/></f></clone>\n\t<new public=\"1\" set=\"method\" line=\"19\"><f a=\"?obj\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta><m n=\":directlyUsed\"/></meta>\n</class>";
oaktree_objects_ManifestVO.__rtti = "<class path=\"oaktree.objects.ManifestVO\" params=\"\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<build public=\"1\"><x path=\"Int\"/></build>\n\t<assets public=\"1\" line=\"11\"><c path=\"Array\"><c path=\"oaktree.objects.AssetVO\"/></c></assets>\n\t<new public=\"1\" set=\"method\" line=\"13\"><f a=\"obj\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta><m n=\":directlyUsed\"/></meta>\n</class>";
oaktree_objects_AssetVO.__rtti = "<class path=\"oaktree.objects.AssetVO\" params=\"\" module=\"oaktree.objects.ManifestVO\">\n\t<extends path=\"oaktree.core.VO\"/>\n\t<id public=\"1\"><c path=\"String\"/></id>\n\t<src public=\"1\"><c path=\"String\"/></src>\n\t<type public=\"1\"><c path=\"String\"/></type>\n\t<base public=\"1\"><c path=\"String\"/></base>\n\t<texture public=\"1\"><c path=\"String\"/></texture>\n\t<metafile public=\"1\"><c path=\"String\"/></metafile>\n\t<new public=\"1\" set=\"method\" line=\"30\"><f a=\"obj\">\n\t<d/>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta><m n=\":directlyUsed\"/></meta>\n</class>";
oaktree_utils_StringUtility.NUMBER_FORMAT_NUMBER = "#";
oaktree_utils_StringUtility.NUMBER_FORMAT_ZERO = "0";
oaktree_utils_StringUtility.NUMBER_DECIMAL = ".";
oaktree_utils_StringUtility.FORMAT_REGEXP = new EReg("{(\\d+)(:([^}]+))?}","g");
oaktree_utils_StringUtility.arrayParamsReg = new EReg("%@","");
oaktree_utils_Warehouse._store = new oaktree_utils_WarehouseInstance();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";","   if(" + "openfl_uUseColorTransform" + ")","   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";","   else","   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);","}"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_display_BitmapData.__isGLES = null;
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$","gmi");
openfl_display_Shader.aPosition = "openfl_aPosition";
openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
openfl_display_Shader.aColor = "openfl_aColor";
openfl_display_Shader.uSampler = "openfl_uSampler0";
openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
openfl_display_Shader.vColor = "openfl_vColor";
openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";","attribute vec2 " + openfl_display_Shader.aTexCoord + ";","attribute vec4 " + openfl_display_Shader.aColor + ";","uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";"];
openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";","uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";","uniform vec4 " + openfl_display_Shader.uColorOffset + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_TRANS_COLOR = 128;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 519;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 514;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 516;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 518;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 513;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 515;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 512;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 517;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_display3D_textures_Texture.internalFormat = -1;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__meta__ = { fields : { fragment : { fragment : null}, get_uMultipliers : { noCompletion : null}, set_uMultipliers : { noCompletion : null}, get_uOffsets : { noCompletion : null}, set_uOffsets : { noCompletion : null}}};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.DELETE = 0;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.GET = 1;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.HEAD = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.OPTIONS = 3;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.POST = 4;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.PUT = 5;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
org_zamedev_particles_ParticleSystem.EMITTER_TYPE_GRAVITY = 0;
org_zamedev_particles_ParticleSystem.EMITTER_TYPE_RADIAL = 1;
org_zamedev_particles_ParticleSystem.POSITION_TYPE_FREE = 0;
org_zamedev_particles_ParticleSystem.POSITION_TYPE_RELATIVE = 1;
org_zamedev_particles_ParticleSystem.POSITION_TYPE_GROUPED = 2;
promhx_base_AsyncBase.id_ctr = 0;
promhx_base_EventLoop.queue = new List();
protohx_WireType.VARINT = 0;
protohx_WireType.FIXED_64_BIT = 1;
protohx_WireType.LENGTH_DELIMITED = 2;
protohx_WireType.FIXED_32_BIT = 5;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=agario.js.map